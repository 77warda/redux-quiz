{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { QuizActions } from '../+state/quiz-app.actions';\nimport { combineLatest, map } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { selectCorrectAnswer, selectCurrentQuestion, selectCurrentQuestionIndex, selectCurrentScore, selectIsOptionCorrect, selectIsOptionIncorrect, selectIsOptionSelected, selectQuestions, selectSelectedOption, selectTotalQuestions, selectUserResponses } from '../+state/quiz-app.selectors';\nlet QuizComponent = class QuizComponent {\n  constructor(store, router) {\n    this.store = store;\n    this.router = router;\n    this.isOptionSelected = false;\n    this.selectedOption = null;\n    this.selectedOptionClass = null;\n    this.correctAnswerClass = null;\n    this.nextBtn = 'Next';\n    // state: Quiz = {\n    //   totalQuestions: 0,\n    //   current_score: 0,\n    //   total_score: 0,\n    //   questions: [],\n    //   options: [],\n    //   currentQuestion: '',\n    //   current_Question_Index: 0,\n    // };\n    // =================today's work ========================\n    this.optionWindowVisible = false;\n    this.sideWindowVisible = false;\n  }\n  ngOnInit() {\n    this.store.dispatch(QuizActions.loadQuestions());\n    this.currentQuestionIndex$ = this.store.pipe(select(selectCurrentQuestionIndex), map(index => index + 1));\n    this.questions$ = this.store.pipe(select(selectQuestions));\n    this.totalQuestions$ = this.store.pipe(select(selectTotalQuestions));\n    this.currentQuestion$ = this.store.pipe(select(selectCurrentQuestion));\n    this.correctAnswer$ = this.store.pipe(select(selectCorrectAnswer));\n    this.currentScore$ = this.store.pipe(select(selectCurrentScore));\n    // ===================== new work ==============\n    this.selectedOption$ = this.store.select(selectSelectedOption);\n    this.isOptionSelected$ = this.store.select(selectIsOptionSelected);\n    this.isOptionCorrect$ = this.store.select(selectIsOptionCorrect);\n    this.isOptionIncorrect$ = this.store.select(selectIsOptionIncorrect);\n    // for previous question\n    this.isFirstQuestion$ = this.currentQuestionIndex$.pipe(map(index => index === 1));\n    this.userResponses$ = this.store.pipe(select(selectUserResponses));\n    this.isLastQuestion$ = combineLatest([this.currentQuestionIndex$, this.totalQuestions$]).pipe(map(([index, totalQuestions]) => {\n      console.log('Total Questions:', totalQuestions);\n      const lastQuestion = (index ?? 0) > (totalQuestions ?? 0);\n      return lastQuestion;\n    }));\n    // ===============================\n    this.store.pipe(select(selectSelectedOption)).subscribe(selectedOption => {\n      this.selectedOption = selectedOption;\n    });\n    // ================================================================\n    //this is only to show in console and otherwise not working at all\n    this.correctAnswer$.subscribe(correctAnswer => console.log('Correct Answer:', correctAnswer));\n    this.currentQuestionIndex$.subscribe(index => {\n      console.log('Current Question Index:', index);\n    });\n    this.currentQuestionIndex$.subscribe(index => {\n      if (index && index === 10) {\n        this.nextBtn = 'Complete';\n      }\n    });\n  }\n  toggleOptionWindow() {\n    this.optionWindowVisible = !this.optionWindowVisible;\n  }\n  openSideWindow() {\n    this.sideWindowVisible = true;\n  }\n  closeSideWindow() {\n    this.sideWindowVisible = false;\n  }\n  skipQuestion() {\n    console.log('skip');\n    this.store.dispatch(QuizActions.skipQuestion());\n    this.currentQuestionIndex$.subscribe(index => {\n      if (index && index > 10) {\n        this.router.navigate(['/skip']);\n      }\n    });\n  }\n  nextQuestion() {\n    console.log('hello');\n    this.store.dispatch(QuizActions.nextQuestion());\n    // reset styling\n    this.selectedOption = null;\n    this.selectedOptionClass = null;\n    this.correctAnswerClass = null;\n    this.isOptionSelected = false;\n    this.currentQuestionIndex$.subscribe(index => {\n      if (index && index > 10) {\n        this.router.navigate(['/result']);\n      }\n    });\n  }\n  previousQuestion() {\n    this.store.dispatch(QuizActions.previousQuestion());\n  }\n  selectOption(option) {\n    this.store.dispatch(QuizActions.selectOption({\n      option\n    }));\n  }\n};\nQuizComponent = __decorate([Component({\n  selector: 'quiz-app-quiz',\n  templateUrl: './quiz.component.html',\n  styleUrls: ['./quiz.component.scss']\n}), __metadata(\"design:paramtypes\", [Store, Router])], QuizComponent);\nexport { QuizComponent };","map":{"version":3,"mappings":"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","names":["Component","Store","select","QuizActions","combineLatest","map","Router","selectCorrectAnswer","selectCurrentQuestion","selectCurrentQuestionIndex","selectCurrentScore","selectIsOptionCorrect","selectIsOptionIncorrect","selectIsOptionSelected","selectQuestions","selectSelectedOption","selectTotalQuestions","selectUserResponses","QuizComponent","constructor","store","router","ngOnInit","dispatch","loadQuestions","currentQuestionIndex$","pipe","index","questions$","totalQuestions$","currentQuestion$","correctAnswer$","currentScore$","selectedOption$","isOptionSelected$","isOptionCorrect$","isOptionIncorrect$","isFirstQuestion$","userResponses$","isLastQuestion$","totalQuestions","console","log","lastQuestion","subscribe","selectedOption","correctAnswer","nextBtn","toggleOptionWindow","optionWindowVisible","openSideWindow","sideWindowVisible","closeSideWindow","skipQuestion","navigate","nextQuestion","selectedOptionClass","correctAnswerClass","isOptionSelected","previousQuestion","selectOption","option","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/quiz/quiz.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Question, Quiz } from './quiz.interface';\nimport { Store, select } from '@ngrx/store';\nimport { QuizActions } from '../+state/quiz-app.actions';\nimport { Observable, combineLatest, map, take } from 'rxjs';\nimport { Router } from '@angular/router';\nimport {\n  selectCorrectAnswer,\n  selectCurrentQuestion,\n  selectCurrentQuestionIndex,\n  selectCurrentScore,\n  selectIsOptionCorrect,\n  selectIsOptionIncorrect,\n  selectIsOptionSelected,\n  selectQuestions,\n  selectSelectedOption,\n  selectTotalQuestions,\n  selectUserResponses,\n} from '../+state/quiz-app.selectors';\n\n@Component({\n  selector: 'quiz-app-quiz',\n  templateUrl: './quiz.component.html',\n  styleUrls: ['./quiz.component.scss'],\n})\nexport class QuizComponent implements OnInit {\n  questions$!: Observable<Question[]>;\n  currentQuestionIndex$!: Observable<number | null>;\n  totalQuestions$!: Observable<number | null>;\n  currentQuestion$!: Observable<Question | undefined>;\n  correctAnswer$!: Observable<string>;\n  currentScore$!: Observable<number>;\n  isFirstQuestion$!: Observable<boolean>;\n  isLastQuestion$!: Observable<boolean>;\n  isOptionSelected = false;\n  quizText!: string;\n  selectedOption: string | null = null;\n  selectedOptionClass: string | null = null;\n  correctAnswerClass: string | null = null;\n  selectedOptionIndex$!: Observable<number | null>;\n  userResponses$!: Observable<(string | null)[]>;\n\n  nextBtn = 'Next';\n  // state: Quiz = {\n  //   totalQuestions: 0,\n  //   current_score: 0,\n  //   total_score: 0,\n  //   questions: [],\n  //   options: [],\n  //   currentQuestion: '',\n  //   current_Question_Index: 0,\n  // };\n  // =================today's work ========================\n  optionWindowVisible = false;\n  sideWindowVisible = false;\n  selectedOption$!: Observable<string | null>;\n  isOptionSelected$!: Observable<boolean>;\n  isOptionCorrect$!: Observable<boolean>;\n  isOptionIncorrect$!: Observable<boolean>;\n\n  constructor(private store: Store, private router: Router) {}\n\n  ngOnInit(): void {\n    this.store.dispatch(QuizActions.loadQuestions());\n    this.currentQuestionIndex$ = this.store.pipe(\n      select(selectCurrentQuestionIndex),\n      map((index) => index + 1)\n    );\n    this.questions$ = this.store.pipe(select(selectQuestions));\n    this.totalQuestions$ = this.store.pipe(select(selectTotalQuestions));\n    this.currentQuestion$ = this.store.pipe(select(selectCurrentQuestion));\n    this.correctAnswer$ = this.store.pipe(select(selectCorrectAnswer));\n    this.currentScore$ = this.store.pipe(select(selectCurrentScore));\n\n    // ===================== new work ==============\n    this.selectedOption$ = this.store.select(selectSelectedOption);\n    this.isOptionSelected$ = this.store.select(selectIsOptionSelected);\n    this.isOptionCorrect$ = this.store.select(selectIsOptionCorrect);\n    this.isOptionIncorrect$ = this.store.select(selectIsOptionIncorrect);\n    // for previous question\n    this.isFirstQuestion$ = this.currentQuestionIndex$.pipe(\n      map((index) => index === 1)\n    );\n    this.userResponses$ = this.store.pipe(select(selectUserResponses));\n    this.isLastQuestion$ = combineLatest([\n      this.currentQuestionIndex$,\n      this.totalQuestions$,\n    ]).pipe(\n      map(([index, totalQuestions]) => {\n        console.log('Total Questions:', totalQuestions);\n        const lastQuestion = (index ?? 0) > (totalQuestions ?? 0);\n        return lastQuestion;\n      })\n    );\n    // ===============================\n    this.store\n      .pipe(select(selectSelectedOption))\n      .subscribe((selectedOption: string | null) => {\n        this.selectedOption = selectedOption;\n      });\n\n    // ================================================================\n    //this is only to show in console and otherwise not working at all\n    this.correctAnswer$.subscribe((correctAnswer) =>\n      console.log('Correct Answer:', correctAnswer)\n    );\n    this.currentQuestionIndex$.subscribe((index) => {\n      console.log('Current Question Index:', index);\n    });\n    this.currentQuestionIndex$.subscribe((index) => {\n      if (index && index === 10) {\n        this.nextBtn = 'Complete';\n      }\n    });\n  }\n\n  toggleOptionWindow() {\n    this.optionWindowVisible = !this.optionWindowVisible;\n  }\n  openSideWindow() {\n    this.sideWindowVisible = true;\n  }\n  closeSideWindow() {\n    this.sideWindowVisible = false;\n  }\n  skipQuestion() {\n    console.log('skip');\n    this.store.dispatch(QuizActions.skipQuestion());\n    this.currentQuestionIndex$.subscribe((index) => {\n      if (index && index > 10) {\n        this.router.navigate(['/skip']);\n      }\n    });\n  }\n  nextQuestion() {\n    console.log('hello');\n    this.store.dispatch(QuizActions.nextQuestion());\n    // reset styling\n    this.selectedOption = null;\n    this.selectedOptionClass = null;\n    this.correctAnswerClass = null;\n    this.isOptionSelected = false;\n\n    this.currentQuestionIndex$.subscribe((index) => {\n      if (index && index > 10) {\n        this.router.navigate(['/result']);\n      }\n    });\n  }\n  previousQuestion() {\n    this.store.dispatch(QuizActions.previousQuestion());\n  }\n\n  selectOption(option: string) {\n    this.store.dispatch(QuizActions.selectOption({ option }));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}