{"ast":null,"code":"// import { createAction, props } from '@ngrx/store';\n// import { QuizAppEntity } from './quiz-app.models';\n// import { Question } from '../quiz/quiz.interface';\n// export const loadQuestions = createAction('[Quiz] Load Questions');\n// export const loadQuestionsSuccess = createAction(\n//   '[Quiz] Load Questions Success',\n//   props<{ questions: Question[] }>()\n// );\n// export const loadQuestionsFailure = createAction(\n//   '[Quiz] Load Questions Failure',\n//   props<{ error: any }>()\n// );\n// export const setCurrentQuestionIndex = createAction(\n//   '[Quiz] Set Current Question Index',\n//   props<{ index: number }>()\n// );\n// export const selectOption = createAction(\n//   '[Quiz] Select Option',\n//   props<{ option: string; isCorrect: boolean }>()\n// );\n// export const nextQuestion = createAction('[Quiz] Next Question');\n// export const skipQuestion = createAction('[Quiz] Skip Question');\n// export const previousQuestion = createAction('[Quiz] Previous Question');\n// export const updateScore = createAction(\n//   '[Quiz] Update Score',\n//   props<{ score: number }>()\n// );\n// export const restartQuiz = createAction('[Quiz] Restart Quiz');\nimport { createActionGroup, emptyProps, props } from '@ngrx/store';\n// export const QuizActions = createActionGroup({\n//   source: 'Quiz',\n//   events: {\n//     'Load Questions': emptyProps(),\n//     'Set Current Question Index': props<{ index: number }>(),\n//     'Select Option': props<{ option: string; isCorrect: boolean }>(),\n//     'Next Question': emptyProps(),\n//     'Skip Question': emptyProps(),\n//     'Previous Question': emptyProps(),\n//     'Update Score': props<{ score: number }>(),\n//     'Restart Quiz': emptyProps(),\n//     'Load Categories': emptyProps(),\n//     'Set Current Question': props<{ question: any; index: number }>(),\n//     'Set Selected Number Of Questions': props<{\n//       selectedNumberOfQuestions: number;\n//     }>(),\n//     'Set Selected Category': props<{ selectedCategory: string }>(),\n//     'Set Selected difficulty': props<{ selectedDifficulty: string }>(),\n//     'submit Form': props<{ formValue: any }>(),\n//   },\n// });\n// export const QuizApiActions = createActionGroup({\n//   source: 'Quiz/API',\n//   events: {\n//     'Load Questions Success': props<{ questions: Question[] }>(),\n//     'Load Questions Failure': props<{ error: any }>(),\n//     'Load Categories Success': props<{ categories: Category }>(),\n//     'Load Categories Failure': props<{ error: any }>(),\n//   },\n// });\nexport const QuizActions = createActionGroup({\n  source: 'Quiz',\n  events: {\n    Enter: emptyProps(),\n    'Load Trivia': emptyProps(),\n    'Next Question': emptyProps(),\n    'Answer Question': props(),\n    'Skip Question': emptyProps(),\n    'Restart Quiz': emptyProps(),\n    'Previous Question': emptyProps(),\n    'load Categories': emptyProps(),\n    'submit Form': props(),\n    'set Current Question': props()\n  }\n});\nexport const QuizApiActions = createActionGroup({\n  source: 'Quiz/API',\n  events: {\n    'Trivia Loaded Success': props(),\n    'Load Quiz Failure': props(),\n    'load Categories Success': props(),\n    'load Categories Failure': props()\n  }\n});","map":{"version":3,"mappings":"AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,SAASA,iBAAiB,EAAEC,UAAU,EAAEC,KAAK,QAAQ,aAAa;AAGlE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAGH,iBAAiB,CAAC;EAC3CI,MAAM,EAAE,MAAM;EACdC,MAAM,EAAE;IACNC,KAAK,EAAEL,UAAU,EAAE;IACnB,aAAa,EAAEA,UAAU,EAAE;IAC3B,eAAe,EAAEA,UAAU,EAAE;IAC7B,iBAAiB,EAAEC,KAAK,EAAqB;IAC7C,eAAe,EAAED,UAAU,EAAE;IAC7B,cAAc,EAAEA,UAAU,EAAE;IAC5B,mBAAmB,EAAEA,UAAU,EAAE;IACjC,iBAAiB,EAAEA,UAAU,EAAE;IAC/B,aAAa,EAAEC,KAAK,EAAsB;IAC1C,sBAAsB,EAAEA,KAAK;;CAEhC,CAAC;AAEF,OAAO,MAAMK,cAAc,GAAGP,iBAAiB,CAAC;EAC9CI,MAAM,EAAE,UAAU;EAClBC,MAAM,EAAE;IACN,uBAAuB,EAAEH,KAAK,EAA0B;IACxD,mBAAmB,EAAEA,KAAK,EAAkB;IAC5C,yBAAyB,EAAEA,KAAK,EAA8B;IAC9D,yBAAyB,EAAEA,KAAK;;CAEnC,CAAC","names":["createActionGroup","emptyProps","props","QuizActions","source","events","Enter","QuizApiActions"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/+state/quiz-app.actions.ts"],"sourcesContent":["// import { createAction, props } from '@ngrx/store';\n// import { QuizAppEntity } from './quiz-app.models';\n// import { Question } from '../quiz/quiz.interface';\n\n// export const loadQuestions = createAction('[Quiz] Load Questions');\n\n// export const loadQuestionsSuccess = createAction(\n//   '[Quiz] Load Questions Success',\n//   props<{ questions: Question[] }>()\n// );\n\n// export const loadQuestionsFailure = createAction(\n//   '[Quiz] Load Questions Failure',\n//   props<{ error: any }>()\n// );\n// export const setCurrentQuestionIndex = createAction(\n//   '[Quiz] Set Current Question Index',\n//   props<{ index: number }>()\n// );\n\n// export const selectOption = createAction(\n//   '[Quiz] Select Option',\n//   props<{ option: string; isCorrect: boolean }>()\n// );\n\n// export const nextQuestion = createAction('[Quiz] Next Question');\n// export const skipQuestion = createAction('[Quiz] Skip Question');\n// export const previousQuestion = createAction('[Quiz] Previous Question');\n// export const updateScore = createAction(\n//   '[Quiz] Update Score',\n//   props<{ score: number }>()\n// );\n\n// export const restartQuiz = createAction('[Quiz] Restart Quiz');\n\nimport { createActionGroup, emptyProps, props } from '@ngrx/store';\nimport { Categories, Question } from '../quiz/quiz.interface';\n\n// export const QuizActions = createActionGroup({\n//   source: 'Quiz',\n//   events: {\n//     'Load Questions': emptyProps(),\n//     'Set Current Question Index': props<{ index: number }>(),\n//     'Select Option': props<{ option: string; isCorrect: boolean }>(),\n//     'Next Question': emptyProps(),\n//     'Skip Question': emptyProps(),\n//     'Previous Question': emptyProps(),\n//     'Update Score': props<{ score: number }>(),\n//     'Restart Quiz': emptyProps(),\n//     'Load Categories': emptyProps(),\n//     'Set Current Question': props<{ question: any; index: number }>(),\n//     'Set Selected Number Of Questions': props<{\n//       selectedNumberOfQuestions: number;\n//     }>(),\n//     'Set Selected Category': props<{ selectedCategory: string }>(),\n//     'Set Selected difficulty': props<{ selectedDifficulty: string }>(),\n//     'submit Form': props<{ formValue: any }>(),\n//   },\n// });\n// export const QuizApiActions = createActionGroup({\n//   source: 'Quiz/API',\n//   events: {\n//     'Load Questions Success': props<{ questions: Question[] }>(),\n//     'Load Questions Failure': props<{ error: any }>(),\n//     'Load Categories Success': props<{ categories: Category }>(),\n//     'Load Categories Failure': props<{ error: any }>(),\n//   },\n// });\nexport const QuizActions = createActionGroup({\n  source: 'Quiz',\n  events: {\n    Enter: emptyProps(),\n    'Load Trivia': emptyProps(),\n    'Next Question': emptyProps(),\n    'Answer Question': props<{ guess: string }>(),\n    'Skip Question': emptyProps(),\n    'Restart Quiz': emptyProps(),\n    'Previous Question': emptyProps(),\n    'load Categories': emptyProps(),\n    'submit Form': props<{ formValue: any }>(),\n    'set Current Question': props<{ currentQuestionNumber: number }>(),\n  },\n});\n\nexport const QuizApiActions = createActionGroup({\n  source: 'Quiz/API',\n  events: {\n    'Trivia Loaded Success': props<{ trivia: Question[] }>(),\n    'Load Quiz Failure': props<{ error: any }>(),\n    'load Categories Success': props<{ categories: Categories }>(),\n    'load Categories Failure': props<{ error: any }>(),\n  },\n});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}