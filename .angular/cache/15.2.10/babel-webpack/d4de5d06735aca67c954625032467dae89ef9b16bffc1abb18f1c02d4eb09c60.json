{"ast":null,"code":"// import { createFeatureSelector, createSelector } from '@ngrx/store';\n// import { QUIZ_APP_FEATURE_KEY } from './quiz-app.reducer';\n// import { Quiz } from '../quiz/quiz.interface';\n// export const selectQuizState =\n//   createFeatureSelector<Quiz>(QUIZ_APP_FEATURE_KEY);\n// // Selectors for individual pieces of state\n// export const selectQuestions = createSelector(selectQuizState, (state) => {\n//   console.log('ques in selectors', state.questions);\n//   return state.questions;\n// });\n// export const selectCurrentQuestionIndex = createSelector(\n//   selectQuizState,\n//   (state) => state.current_Question_Index\n// );\n// export const selectTotalQuestions = createSelector(\n//   selectQuizState,\n//   (state) => state.questions.length\n// );\n// export const selectCurrentQuestion = createSelector(\n//   selectQuestions,\n//   selectCurrentQuestionIndex,\n//   (questions, currentQuestionIndex) => {\n//     console.log('hi', questions);\n//     return {\n//       ...questions[currentQuestionIndex],\n//       options:\n//         questions[currentQuestionIndex]?.incorrectAnswers\n//           .concat(questions[currentQuestionIndex]?.correctAnswer)\n//           .sort() || [],\n//     };\n//   }\n// );\n// export const selectCorrectAnswer = createSelector(\n//   selectCurrentQuestion,\n//   (currentQuestion) => currentQuestion?.correctAnswer\n// );\n// export const selectCurrentScore = createSelector(\n//   selectQuizState,\n//   (state) => state.current_score\n// );\n// export const selectSelectedOption = createSelector(\n//   selectQuizState,\n//   (state) => state.selectedOption\n// );\n// export const selectUserResponses = createSelector(\n//   selectQuizState,\n//   (state) => state.userResponses\n// );\n// export const selectIsOptionSelected = createSelector(\n//   selectSelectedOption,\n//   (selectedOption) => !!selectedOption\n// );\n// // for getting categories:\n// export const selectCategories = createSelector(\n//   selectQuizState,\n//   (state) => state.categories\n// );\n// export const selectSelectedNumberOfQuestions = createSelector(\n//   selectQuizState,\n//   (state) => state.selectedNumberOfQuestions\n// );\n// export const selectSelectedCategory = createSelector(\n//   selectQuizState,\n//   (state) => state.selectedCategory\n// );\n// export const selectSelectedDifficulty = createSelector(\n//   selectQuizState,\n//   (state) => state.selectedDifficulty\n// );\n// export const selectFilteredQuestions = createSelector(\n//   selectQuizState,\n//   selectSelectedNumberOfQuestions,\n//   selectSelectedCategory,\n//   selectSelectedDifficulty,\n//   (state, selectedNumberOfQuestions, selectedCategory, selectedDifficulty) => {\n//     // Apply filtering\n//     const filteredQuestions = state.questions.filter(\n//       (question) =>\n//         question.category.toLowerCase() === selectedCategory.toLowerCase() &&\n//         question.difficulty.toLowerCase() === selectedDifficulty.toLowerCase()\n//     );\n//     console.log('Filtered Questions:', filteredQuestions);\n//     return filteredQuestions.slice(0, selectedNumberOfQuestions);\n//   }\n// );\nimport { createSelector, createFeatureSelector } from '@ngrx/store';\nimport { QUIZ_APP_FEATURE_KEY } from './quiz-app.reducer';\n// Get the feature state\nexport const selectTriviaState = createFeatureSelector(QUIZ_APP_FEATURE_KEY);\nexport const selectShowFooter = createSelector(selectTriviaState, state => state.showFooter);\nexport const selectCurrentQuestionNumber = createSelector(selectTriviaState, state => state.currentQuestionNumber);\nexport const selectTotalQuestions = createSelector(selectTriviaState, state => state.questions.length);\nexport const selectCategories = createSelector(selectTriviaState, state => state.categories);\nexport const selectScore = createSelector(selectTriviaState, state => state.score);\nexport const selectQuestions = createSelector(selectTriviaState, state => state.questions);\nexport const selectCurrentQuestion = createSelector(selectQuestions, selectCurrentQuestionNumber, (questions, currentQuestionNumber) => {\n  console.log('hi', questions);\n  console.log('currentQuestionNumber:', currentQuestionNumber);\n  const adjustedIndex = currentQuestionNumber - 1;\n  return {\n    ...questions[adjustedIndex],\n    options: questions[adjustedIndex]?.incorrectAnswers.concat(questions[adjustedIndex]?.correctAnswer).sort() || []\n  };\n});\nexport const selectCorrectAnswer = createSelector(selectCurrentQuestion, currentQuestion => currentQuestion?.correctAnswer);\nexport const selectSelectedOption = createSelector(selectTriviaState, state => {\n  console.log('selected', state.response);\n  return state.response;\n});\nexport const selectUserResponses = createSelector(selectTriviaState, state => {\n  console.log('Responses saved as', state.userResponses);\n  return state.userResponses;\n});","map":{"version":3,"mappings":"AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,cAAc,EAAEC,qBAAqB,QAAQ,aAAa;AACnE,SAASC,oBAAoB,QAAQ,oBAAoB;AAGzD;AACA,OAAO,MAAMC,iBAAiB,GAC5BF,qBAAqB,CAAOC,oBAAoB,CAAC;AAEnD,OAAO,MAAME,gBAAgB,GAAGJ,cAAc,CAC5CG,iBAAiB,EAChBE,KAAW,IAAKA,KAAK,CAACC,UAAU,CAClC;AAED,OAAO,MAAMC,2BAA2B,GAAGP,cAAc,CACvDG,iBAAiB,EAChBE,KAAW,IAAKA,KAAK,CAACG,qBAAqB,CAC7C;AAED,OAAO,MAAMC,oBAAoB,GAAGT,cAAc,CAChDG,iBAAiB,EAChBE,KAAW,IAAKA,KAAK,CAACK,SAAS,CAACC,MAAM,CACxC;AACD,OAAO,MAAMC,gBAAgB,GAAGZ,cAAc,CAC5CG,iBAAiB,EAChBE,KAAK,IAAKA,KAAK,CAACQ,UAAU,CAC5B;AAED,OAAO,MAAMC,WAAW,GAAGd,cAAc,CACvCG,iBAAiB,EAChBE,KAAW,IAAKA,KAAK,CAACU,KAAK,CAC7B;AAED,OAAO,MAAMC,eAAe,GAAGhB,cAAc,CAC3CG,iBAAiB,EAChBE,KAAK,IAAKA,KAAK,CAACK,SAAS,CAC3B;AAED,OAAO,MAAMO,qBAAqB,GAAGjB,cAAc,CACjDgB,eAAe,EACfT,2BAA2B,EAC3B,CAACG,SAAS,EAAEF,qBAAqB,KAAI;EACnCU,OAAO,CAACC,GAAG,CAAC,IAAI,EAAET,SAAS,CAAC;EAC5BQ,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEX,qBAAqB,CAAC;EAC5D,MAAMY,aAAa,GAAGZ,qBAAqB,GAAG,CAAC;EAE/C,OAAO;IACL,GAAGE,SAAS,CAACU,aAAa,CAAC;IAC3BC,OAAO,EACLX,SAAS,CAACU,aAAa,CAAC,EAAEE,gBAAgB,CACvCC,MAAM,CAACb,SAAS,CAACU,aAAa,CAAC,EAAEI,aAAa,CAAC,CAC/CC,IAAI,EAAE,IAAI;GAChB;AACH,CAAC,CACF;AAED,OAAO,MAAMC,mBAAmB,GAAG1B,cAAc,CAC/CiB,qBAAqB,EACpBU,eAAe,IAAKA,eAAe,EAAEH,aAAa,CACpD;AAED,OAAO,MAAMI,oBAAoB,GAAG5B,cAAc,CAChDG,iBAAiB,EAChBE,KAAK,IAAI;EACRa,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEd,KAAK,CAACwB,QAAQ,CAAC;EACvC,OAAOxB,KAAK,CAACwB,QAAQ;AACvB,CAAC,CACF;AACD,OAAO,MAAMC,mBAAmB,GAAG9B,cAAc,CAC/CG,iBAAiB,EAChBE,KAAK,IAAI;EACRa,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEd,KAAK,CAAC0B,aAAa,CAAC;EACtD,OAAO1B,KAAK,CAAC0B,aAAa;AAC5B,CAAC,CACF","names":["createSelector","createFeatureSelector","QUIZ_APP_FEATURE_KEY","selectTriviaState","selectShowFooter","state","showFooter","selectCurrentQuestionNumber","currentQuestionNumber","selectTotalQuestions","questions","length","selectCategories","categories","selectScore","score","selectQuestions","selectCurrentQuestion","console","log","adjustedIndex","options","incorrectAnswers","concat","correctAnswer","sort","selectCorrectAnswer","currentQuestion","selectSelectedOption","response","selectUserResponses","userResponses"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/+state/quiz-app.selectors.ts"],"sourcesContent":["// import { createFeatureSelector, createSelector } from '@ngrx/store';\n// import { QUIZ_APP_FEATURE_KEY } from './quiz-app.reducer';\n// import { Quiz } from '../quiz/quiz.interface';\n\n// export const selectQuizState =\n//   createFeatureSelector<Quiz>(QUIZ_APP_FEATURE_KEY);\n\n// // Selectors for individual pieces of state\n// export const selectQuestions = createSelector(selectQuizState, (state) => {\n//   console.log('ques in selectors', state.questions);\n//   return state.questions;\n// });\n\n// export const selectCurrentQuestionIndex = createSelector(\n//   selectQuizState,\n//   (state) => state.current_Question_Index\n// );\n\n// export const selectTotalQuestions = createSelector(\n//   selectQuizState,\n//   (state) => state.questions.length\n// );\n\n// export const selectCurrentQuestion = createSelector(\n//   selectQuestions,\n//   selectCurrentQuestionIndex,\n//   (questions, currentQuestionIndex) => {\n//     console.log('hi', questions);\n//     return {\n//       ...questions[currentQuestionIndex],\n//       options:\n//         questions[currentQuestionIndex]?.incorrectAnswers\n//           .concat(questions[currentQuestionIndex]?.correctAnswer)\n//           .sort() || [],\n//     };\n//   }\n// );\n\n// export const selectCorrectAnswer = createSelector(\n//   selectCurrentQuestion,\n//   (currentQuestion) => currentQuestion?.correctAnswer\n// );\n\n// export const selectCurrentScore = createSelector(\n//   selectQuizState,\n//   (state) => state.current_score\n// );\n\n// export const selectSelectedOption = createSelector(\n//   selectQuizState,\n//   (state) => state.selectedOption\n// );\n// export const selectUserResponses = createSelector(\n//   selectQuizState,\n//   (state) => state.userResponses\n// );\n\n// export const selectIsOptionSelected = createSelector(\n//   selectSelectedOption,\n//   (selectedOption) => !!selectedOption\n// );\n// // for getting categories:\n// export const selectCategories = createSelector(\n//   selectQuizState,\n//   (state) => state.categories\n// );\n// export const selectSelectedNumberOfQuestions = createSelector(\n//   selectQuizState,\n//   (state) => state.selectedNumberOfQuestions\n// );\n\n// export const selectSelectedCategory = createSelector(\n//   selectQuizState,\n//   (state) => state.selectedCategory\n// );\n\n// export const selectSelectedDifficulty = createSelector(\n//   selectQuizState,\n//   (state) => state.selectedDifficulty\n// );\n\n// export const selectFilteredQuestions = createSelector(\n//   selectQuizState,\n//   selectSelectedNumberOfQuestions,\n//   selectSelectedCategory,\n//   selectSelectedDifficulty,\n//   (state, selectedNumberOfQuestions, selectedCategory, selectedDifficulty) => {\n//     // Apply filtering\n//     const filteredQuestions = state.questions.filter(\n//       (question) =>\n//         question.category.toLowerCase() === selectedCategory.toLowerCase() &&\n//         question.difficulty.toLowerCase() === selectedDifficulty.toLowerCase()\n//     );\n//     console.log('Filtered Questions:', filteredQuestions);\n//     return filteredQuestions.slice(0, selectedNumberOfQuestions);\n//   }\n// );\n\nimport { createSelector, createFeatureSelector } from '@ngrx/store';\nimport { QUIZ_APP_FEATURE_KEY } from './quiz-app.reducer';\nimport { Quiz } from '../quiz/quiz.interface';\n\n// Get the feature state\nexport const selectTriviaState =\n  createFeatureSelector<Quiz>(QUIZ_APP_FEATURE_KEY);\n\nexport const selectShowFooter = createSelector(\n  selectTriviaState,\n  (state: Quiz) => state.showFooter\n);\n\nexport const selectCurrentQuestionNumber = createSelector(\n  selectTriviaState,\n  (state: Quiz) => state.currentQuestionNumber\n);\n\nexport const selectTotalQuestions = createSelector(\n  selectTriviaState,\n  (state: Quiz) => state.questions.length\n);\nexport const selectCategories = createSelector(\n  selectTriviaState,\n  (state) => state.categories\n);\n\nexport const selectScore = createSelector(\n  selectTriviaState,\n  (state: Quiz) => state.score\n);\n\nexport const selectQuestions = createSelector(\n  selectTriviaState,\n  (state) => state.questions\n);\n\nexport const selectCurrentQuestion = createSelector(\n  selectQuestions,\n  selectCurrentQuestionNumber,\n  (questions, currentQuestionNumber) => {\n    console.log('hi', questions);\n    console.log('currentQuestionNumber:', currentQuestionNumber);\n    const adjustedIndex = currentQuestionNumber - 1;\n\n    return {\n      ...questions[adjustedIndex],\n      options:\n        questions[adjustedIndex]?.incorrectAnswers\n          .concat(questions[adjustedIndex]?.correctAnswer)\n          .sort() || [],\n    };\n  }\n);\n\nexport const selectCorrectAnswer = createSelector(\n  selectCurrentQuestion,\n  (currentQuestion) => currentQuestion?.correctAnswer\n);\n\nexport const selectSelectedOption = createSelector(\n  selectTriviaState,\n  (state) => {\n    console.log('selected', state.response);\n    return state.response;\n  }\n);\nexport const selectUserResponses = createSelector(\n  selectTriviaState,\n  (state) => {\n    console.log('Responses saved as', state.userResponses);\n    return state.userResponses;\n  }\n);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}