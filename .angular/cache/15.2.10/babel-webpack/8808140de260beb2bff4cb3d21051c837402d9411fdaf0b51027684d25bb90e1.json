{"ast":null,"code":"export const QUIZ_APP_FEATURE_KEY = 'quizApp';\n// export const initialState: Quiz = {\n//   totalQuestions: 0,\n//   current_score: 0,\n//   total_score: 0,\n//   questions: [],\n//   options: [],\n//   currentQuestion: '',\n//   current_Question_Index: 0,\n//   selectedOption: '',\n//   isOptionSelected: false,\n//   selectedOptionClass: '',\n//   correctAnswerClass: '',\n//   userResponses: [],\n//   isFirstQuestion$: false,\n//   correctAnswer: '',\n//   categories: {},\n//   selectedNumberOfQuestions: 0,\n//   selectedCategory: '',\n//   selectedDifficulty: '',\n// };\n// export const quizAppReducer = createReducer(\n//   initialState,\n//   on(QuizApiActions.loadQuestionsSuccess, (state, { questions }) => ({\n//     ...state,\n//     questions: questions,\n//     totalQuestions: questions.length,\n//     currentQuestion: questions[state.current_Question_Index].question.text,\n//     options: questions[state.current_Question_Index].incorrectAnswers\n//       .concat(questions[state.current_Question_Index].correctAnswer)\n//       .sort(),\n//   })),\n//   on(QuizActions.setCurrentQuestion, (state, { question, index }) => ({\n//     ...state,\n//     current_Question_Index: index,\n//     currentQuestion: question,\n//   })),\n//   on(QuizActions.nextQuestion, (state) => {\n//     const nextIndex = state.current_Question_Index + 1;\n//     return {\n//       ...state,\n//       current_Question_Index: nextIndex,\n//       currentQuestion: state.questions[nextIndex]?.question.text,\n//     };\n//   }),\n//   on(QuizActions.skipQuestion, (state) => {\n//     const nextIndex = state.current_Question_Index + 1;\n//     return {\n//       ...state,\n//       current_Question_Index: nextIndex,\n//       currentQuestion: state.questions[nextIndex]?.question.text,\n//     };\n//   }),\n//   on(QuizActions.previousQuestion, (state) => {\n//     const previousIndex = state.current_Question_Index - 1;\n//     // const nextIndex = state.current_Question_Index + 1;\n//     return {\n//       ...state,\n//       current_Question_Index: previousIndex,\n//       currentQuestion: state.questions[previousIndex]?.question.text,\n//     };\n//   }),\n//   on(QuizActions.selectOption, (state, { option }) => {\n//     const userResponses = [...state.userResponses];\n//     userResponses[state.current_Question_Index] = option;\n//     return {\n//       ...state,\n//       selectedOption: option,\n//       isOptionSelected: true,\n//       selectedOptionClass:\n//         state.questions[state.current_Question_Index].correctAnswer === option\n//           ? 'correct-answer'\n//           : 'incorrect-answer',\n//       correctAnswerClass: 'correct-answer',\n//       userResponses,\n//     };\n//   }),\n//   on(QuizActions.updateScore, (state, { score }) => {\n//     return { ...state, current_score: state.current_score + score };\n//   }),\n//   on(QuizActions.restartQuiz, () => initialState),\n//   //categories and all work related to form\n//   on(QuizApiActions.loadCategoriesSuccess, (state, { categories }) => {\n//     // console.log('Categories received in reducer:', categories);\n//     return {\n//       ...state,\n//       categories: categories,\n//     };\n//   }),\n//   on(\n//     QuizActions.setSelectedNumberOfQuestions,\n//     (state, { selectedNumberOfQuestions }) => ({\n//       ...state,\n//       selectedNumberOfQuestions,\n//     })\n//   ),\n//   on(QuizActions.setSelectedCategory, (state, { selectedCategory }) => ({\n//     ...state,\n//     selectedCategory,\n//   })),\n//   on(QuizActions.setSelectedDifficulty, (state, { selectedDifficulty }) => ({\n//     ...state,\n//     selectedDifficulty,\n//   }))\n// );","map":{"version":3,"mappings":"AAQA,OAAO,MAAMA,oBAAoB,GAAG,SAAS;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","names":["QUIZ_APP_FEATURE_KEY"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/+state/quiz-app.reducer.ts"],"sourcesContent":["import { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { createReducer, on } from '@ngrx/store';\n\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport { QuizAppEntity } from './quiz-app.models';\nimport { Quiz } from '../quiz/quiz.interface';\n\nexport const QUIZ_APP_FEATURE_KEY = 'quizApp';\n\n// export const initialState: Quiz = {\n//   totalQuestions: 0,\n//   current_score: 0,\n//   total_score: 0,\n//   questions: [],\n//   options: [],\n//   currentQuestion: '',\n//   current_Question_Index: 0,\n//   selectedOption: '',\n//   isOptionSelected: false,\n//   selectedOptionClass: '',\n//   correctAnswerClass: '',\n//   userResponses: [],\n//   isFirstQuestion$: false,\n//   correctAnswer: '',\n//   categories: {},\n//   selectedNumberOfQuestions: 0,\n//   selectedCategory: '',\n//   selectedDifficulty: '',\n// };\n\n// export const quizAppReducer = createReducer(\n//   initialState,\n\n//   on(QuizApiActions.loadQuestionsSuccess, (state, { questions }) => ({\n//     ...state,\n//     questions: questions,\n//     totalQuestions: questions.length,\n//     currentQuestion: questions[state.current_Question_Index].question.text,\n//     options: questions[state.current_Question_Index].incorrectAnswers\n//       .concat(questions[state.current_Question_Index].correctAnswer)\n//       .sort(),\n//   })),\n//   on(QuizActions.setCurrentQuestion, (state, { question, index }) => ({\n//     ...state,\n//     current_Question_Index: index,\n//     currentQuestion: question,\n//   })),\n\n//   on(QuizActions.nextQuestion, (state) => {\n//     const nextIndex = state.current_Question_Index + 1;\n\n//     return {\n//       ...state,\n//       current_Question_Index: nextIndex,\n//       currentQuestion: state.questions[nextIndex]?.question.text,\n//     };\n//   }),\n//   on(QuizActions.skipQuestion, (state) => {\n//     const nextIndex = state.current_Question_Index + 1;\n\n//     return {\n//       ...state,\n//       current_Question_Index: nextIndex,\n//       currentQuestion: state.questions[nextIndex]?.question.text,\n//     };\n//   }),\n//   on(QuizActions.previousQuestion, (state) => {\n//     const previousIndex = state.current_Question_Index - 1;\n//     // const nextIndex = state.current_Question_Index + 1;\n\n//     return {\n//       ...state,\n//       current_Question_Index: previousIndex,\n//       currentQuestion: state.questions[previousIndex]?.question.text,\n//     };\n//   }),\n\n//   on(QuizActions.selectOption, (state, { option }) => {\n//     const userResponses = [...state.userResponses];\n//     userResponses[state.current_Question_Index] = option;\n\n//     return {\n//       ...state,\n//       selectedOption: option,\n//       isOptionSelected: true,\n//       selectedOptionClass:\n//         state.questions[state.current_Question_Index].correctAnswer === option\n//           ? 'correct-answer'\n//           : 'incorrect-answer',\n//       correctAnswerClass: 'correct-answer',\n//       userResponses,\n//     };\n//   }),\n//   on(QuizActions.updateScore, (state, { score }) => {\n//     return { ...state, current_score: state.current_score + score };\n//   }),\n\n//   on(QuizActions.restartQuiz, () => initialState),\n\n//   //categories and all work related to form\n//   on(QuizApiActions.loadCategoriesSuccess, (state, { categories }) => {\n//     // console.log('Categories received in reducer:', categories);\n//     return {\n//       ...state,\n//       categories: categories,\n//     };\n//   }),\n//   on(\n//     QuizActions.setSelectedNumberOfQuestions,\n//     (state, { selectedNumberOfQuestions }) => ({\n//       ...state,\n//       selectedNumberOfQuestions,\n//     })\n//   ),\n//   on(QuizActions.setSelectedCategory, (state, { selectedCategory }) => ({\n//     ...state,\n//     selectedCategory,\n//   })),\n//   on(QuizActions.setSelectedDifficulty, (state, { selectedDifficulty }) => ({\n//     ...state,\n//     selectedDifficulty,\n//   }))\n// );\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}