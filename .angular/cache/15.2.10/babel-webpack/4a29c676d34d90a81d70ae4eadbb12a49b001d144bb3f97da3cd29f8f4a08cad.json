{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport { Store, select } from '@ngrx/store';\nimport * as QuizActions from '../+state/quiz-app.actions';\nimport { selectCorrectAnswer, selectCurrentQuestion, selectCurrentQuestionIndex, selectCurrentScore, selectTotalQuestions } from '../+state/quiz-app.selectors';\nlet QuizComponent = class QuizComponent {\n  // state: Quiz = {\n  //   totalQuestions: 0,\n  //   current_score: 0,\n  //   total_score: 0,\n  //   questions: [],\n  //   options: [],\n  //   currentQuestion: '',\n  //   current_Question_Index: 0,\n  // };\n  constructor(triviaService, store) {\n    this.triviaService = triviaService;\n    this.store = store;\n    this.isOptionSelected = false;\n    this.selectedOption = null;\n    this.selectedOptionClass = null;\n    this.correctAnswerClass = null;\n  }\n  ngOnInit() {\n    this.restartQuiz();\n    this.store.dispatch(QuizActions.loadQuestions());\n    this.currentQuestionIndex$ = this.store.pipe(select(selectCurrentQuestionIndex));\n    this.totalQuestions$ = this.store.pipe(select(selectTotalQuestions));\n    this.currentQuestion$ = this.store.pipe(select(selectCurrentQuestion));\n    this.totalQuestions$ = this.store.pipe(select(selectTotalQuestions));\n    this.correctAnswer$ = this.store.pipe(select(selectCorrectAnswer));\n    this.currentScore$ = this.store.pipe(select(selectCurrentScore));\n    //this is only to show in console and otherwise not working at all\n    this.correctAnswer$.subscribe(correctAnswer => console.log('Correct Answer:', correctAnswer));\n    this.currentQuestionIndex$.subscribe(index => {\n      console.log('Current Question Index:', index);\n    });\n  }\n  restartQuiz() {\n    // this.fetchTriviaQuestion();\n    this.isOptionSelected = false;\n    this.selectedOption = null;\n    this.selectedOptionClass = null;\n    this.correctAnswerClass = null;\n  }\n  shuffleArray(array) {\n    return array.sort(() => Math.random() - 0.6);\n  }\n  setCurrentQuestion(index) {\n    this.quizText = 'Redux Angular Quiz';\n    this.store.dispatch(QuizActions.setCurrentQuestionIndex({\n      index\n    }));\n  }\n  nextQuestion() {\n    this.store.dispatch(QuizActions.nextQuestion());\n    // reset styling\n    this.selectedOption = null;\n    this.selectedOptionClass = null;\n    this.correctAnswerClass = null;\n    this.isOptionSelected = false;\n  }\n  previousQuestion() {\n    this.store.dispatch(QuizActions.previousQuestion());\n  }\n  isCorrectAnswer(option) {\n    let correctAnswer;\n    this.store.pipe(select(selectCurrentQuestion)).subscribe(currentQuestion => {\n      if (currentQuestion) {\n        correctAnswer = currentQuestion.correctAnswer;\n      }\n    });\n    return !!correctAnswer && correctAnswer === option;\n  }\n  // Function to handle option selection\n  selectOption(option) {\n    if (!this.selectedOption) {\n      this.selectedOption = option;\n      const isCorrect = this.isCorrectAnswer(option);\n      this.store.dispatch(QuizActions.selectOption({\n        option,\n        isCorrect\n      }));\n      if (isCorrect) {\n        this.store.dispatch(QuizActions.updateScore({\n          score: 1\n        }));\n      }\n      this.selectedOptionClass = isCorrect ? 'correct-answer' : 'incorrect-answer';\n      this.correctAnswerClass = 'correct-answer';\n      this.isOptionSelected = true;\n    }\n  }\n};\nQuizComponent = __decorate([Component({\n  selector: 'quiz-app-quiz',\n  templateUrl: './quiz.component.html',\n  styleUrls: ['./quiz.component.scss']\n}), __metadata(\"design:paramtypes\", [QuizReduxService, Store])], QuizComponent);\nexport { QuizComponent };","map":{"version":3,"mappings":"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","names":["Component","QuizReduxService","Store","select","QuizActions","selectCorrectAnswer","selectCurrentQuestion","selectCurrentQuestionIndex","selectCurrentScore","selectTotalQuestions","QuizComponent","constructor","triviaService","store","ngOnInit","restartQuiz","dispatch","loadQuestions","currentQuestionIndex$","pipe","totalQuestions$","currentQuestion$","correctAnswer$","currentScore$","subscribe","correctAnswer","console","log","index","isOptionSelected","selectedOption","selectedOptionClass","correctAnswerClass","shuffleArray","array","sort","Math","random","setCurrentQuestion","quizText","setCurrentQuestionIndex","nextQuestion","previousQuestion","isCorrectAnswer","option","currentQuestion","selectOption","isCorrect","updateScore","score","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/quiz/quiz.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Question, Quiz } from './quiz.interface';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport { Store, select } from '@ngrx/store';\nimport * as QuizActions from '../+state/quiz-app.actions';\nimport { quizAppReducer } from '../+state/quiz-app.reducer';\nimport { Observable, combineLatest, map, withLatestFrom } from 'rxjs';\nimport {\n  selectCorrectAnswer,\n  selectCurrentQuestion,\n  selectCurrentQuestionIndex,\n  selectCurrentScore,\n  selectQuestions,\n  selectTotalQuestions,\n} from '../+state/quiz-app.selectors';\n\n@Component({\n  selector: 'quiz-app-quiz',\n  templateUrl: './quiz.component.html',\n  styleUrls: ['./quiz.component.scss'],\n})\nexport class QuizComponent implements OnInit {\n  questions$!: Observable<Question[]>;\n  currentQuestionIndex$!: Observable<number | null>;\n  totalQuestions$!: Observable<number | null>;\n  currentQuestion$!: Observable<Question | undefined>;\n  correctAnswer$!: Observable<string>;\n  currentScore$!: Observable<number>;\n  isOptionSelected = false;\n  quizText!: string;\n  selectedOption: string | null = null;\n  selectedOptionClass: string | null = null;\n  correctAnswerClass: string | null = null;\n  // state: Quiz = {\n  //   totalQuestions: 0,\n  //   current_score: 0,\n  //   total_score: 0,\n  //   questions: [],\n  //   options: [],\n  //   currentQuestion: '',\n  //   current_Question_Index: 0,\n  // };\n\n  constructor(private triviaService: QuizReduxService, private store: Store) {}\n\n  ngOnInit(): void {\n    this.restartQuiz();\n    this.store.dispatch(QuizActions.loadQuestions());\n    this.currentQuestionIndex$ = this.store.pipe(\n      select(selectCurrentQuestionIndex)\n    );\n    this.totalQuestions$ = this.store.pipe(select(selectTotalQuestions));\n    this.currentQuestion$ = this.store.pipe(select(selectCurrentQuestion));\n    this.totalQuestions$ = this.store.pipe(select(selectTotalQuestions));\n    this.correctAnswer$ = this.store.pipe(select(selectCorrectAnswer));\n    this.currentScore$ = this.store.pipe(select(selectCurrentScore));\n\n    //this is only to show in console and otherwise not working at all\n    this.correctAnswer$.subscribe((correctAnswer) =>\n      console.log('Correct Answer:', correctAnswer)\n    );\n    this.currentQuestionIndex$.subscribe((index) => {\n      console.log('Current Question Index:', index);\n    });\n  }\n\n  restartQuiz() {\n    // this.fetchTriviaQuestion();\n    this.isOptionSelected = false;\n    this.selectedOption = null;\n    this.selectedOptionClass = null;\n    this.correctAnswerClass = null;\n  }\n  shuffleArray(array: string[]): string[] {\n    return array.sort(() => Math.random() - 0.6);\n  }\n\n  setCurrentQuestion(index: number) {\n    this.quizText = 'Redux Angular Quiz';\n    this.store.dispatch(QuizActions.setCurrentQuestionIndex({ index }));\n  }\n\n  nextQuestion() {\n    this.store.dispatch(QuizActions.nextQuestion());\n    // reset styling\n    this.selectedOption = null;\n    this.selectedOptionClass = null;\n    this.correctAnswerClass = null;\n    this.isOptionSelected = false;\n  }\n  previousQuestion() {\n    this.store.dispatch(QuizActions.previousQuestion());\n  }\n  isCorrectAnswer(option: string): boolean {\n    let correctAnswer: string | undefined;\n    this.store\n      .pipe(select(selectCurrentQuestion))\n      .subscribe((currentQuestion) => {\n        if (currentQuestion) {\n          correctAnswer = currentQuestion.correctAnswer;\n        }\n      });\n\n    return !!correctAnswer && correctAnswer === option;\n  }\n\n  // Function to handle option selection\n  selectOption(option: string) {\n    if (!this.selectedOption) {\n      this.selectedOption = option;\n      const isCorrect = this.isCorrectAnswer(option);\n      this.store.dispatch(QuizActions.selectOption({ option, isCorrect }));\n      if (isCorrect) {\n        this.store.dispatch(QuizActions.updateScore({ score: 1 }));\n      }\n\n      this.selectedOptionClass = isCorrect\n        ? 'correct-answer'\n        : 'incorrect-answer';\n      this.correctAnswerClass = 'correct-answer';\n      this.isOptionSelected = true;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}