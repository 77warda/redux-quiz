{"ast":null,"code":"import { createEffect, Actions, ofType } from '@ngrx/effects';\nimport { catchError, of, map, mergeMap, tap, switchMap, interval, take } from 'rxjs';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport { Store } from '@ngrx/store';\nimport { Router } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../quiz-redux.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@ngrx/store\";\nexport class QuizAppEffects {\n  constructor(actions$, quizService, router, store) {\n    this.actions$ = actions$;\n    this.quizService = quizService;\n    this.router = router;\n    this.store = store;\n    this.startTimer$ = createEffect(() => this.actions$.pipe(ofType(QuizActions.submitForm), switchMap(action => {\n      // const totalQuestions = action.formValue.numberOfQuestions;\n      const timerDuration = 10;\n      console.log('Timer started');\n      return interval(1000).pipe(take(timerDuration + 1), tap(timeElapsed => {\n        const remainingTime = timerDuration - timeElapsed;\n        const minutes = Math.floor(remainingTime / 60);\n        const seconds = remainingTime % 60;\n        const formattedMinutes = minutes < 10 ? '0' + minutes : '' + minutes;\n        const formattedSeconds = seconds < 10 ? '0' + seconds : '' + seconds;\n        // console.log(\n        //   'Time remaining:',\n        //   `${formattedMinutes}:${formattedSeconds}`\n        // );\n        this.store.dispatch(QuizActions.updateTimer({\n          timer: `${formattedMinutes}:${formattedSeconds}`\n        }));\n        if (remainingTime === 0) {\n          this.store.dispatch(QuizActions.finishQuiz());\n        }\n      }));\n    })), {\n      dispatch: false\n    });\n    this.loadTrivia$ = createEffect(() => this.actions$.pipe(ofType(QuizActions.submitForm), switchMap(action => this.quizService.getTrivia(action.formValue).pipe(tap(() => {\n      console.log('Form submitted successfully');\n      this.router.navigate(['/quizstart']);\n    }), switchMap(quizQuestions => {\n      return [QuizApiActions.loadQuestionsSuccess({\n        quizQuestions\n      })];\n    }), catchError(error => {\n      console.error('Error in loadTrivia effect:', error);\n      return of(QuizApiActions.loadQuestionsFailure({\n        error\n      }));\n    })))));\n    this.loadCategories$ = createEffect(() => this.actions$.pipe(ofType(QuizActions.loadCategories), mergeMap(() => this.quizService.getCategories().pipe(map(categories => QuizApiActions.loadCategoriesSuccess({\n      categories\n    })), catchError(error => of(QuizApiActions.loadCategoriesFailure({\n      error\n    })))))));\n    this.finishQuiz$ = createEffect(() => this.actions$.pipe(ofType(QuizActions.finishQuiz), tap(() => {\n      this.router.navigate(['/result']);\n    })), {\n      dispatch: false\n    });\n  }\n  static #_ = this.ɵfac = function QuizAppEffects_Factory(t) {\n    return new (t || QuizAppEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.QuizReduxService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.Store));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuizAppEffects,\n    factory: QuizAppEffects.ɵfac\n  });\n}","map":{"version":3,"mappings":"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","names":["createEffect","Actions","ofType","catchError","of","map","mergeMap","tap","switchMap","interval","take","QuizActions","QuizApiActions","QuizReduxService","Store","Router","QuizAppEffects","constructor","actions$","quizService","router","store","pipe","submitForm","action","timerDuration","console","log","timeElapsed","remainingTime","minutes","Math","floor","seconds","formattedMinutes","formattedSeconds","dispatch","updateTimer","timer","finishQuiz","getTrivia","formValue","navigate","quizQuestions","loadQuestionsSuccess","error","loadQuestionsFailure","loadCategories","getCategories","categories","loadCategoriesSuccess","loadCategoriesFailure","factory"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/+state/quiz-app.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { createEffect, Actions, ofType } from '@ngrx/effects';\nimport {\n  catchError,\n  of,\n  map,\n  mergeMap,\n  tap,\n  switchMap,\n  interval,\n  takeUntil,\n  EMPTY,\n  take,\n} from 'rxjs';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport { Store } from '@ngrx/store';\nimport { selectTotalQuestions } from './quiz-app.selectors';\nimport { Router } from '@angular/router';\n\n@Injectable()\nexport class QuizAppEffects {\n  constructor(\n    private actions$: Actions,\n    private quizService: QuizReduxService,\n    private router: Router,\n    private store: Store\n  ) {}\n\n  startTimer$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(QuizActions.submitForm),\n        switchMap((action) => {\n          // const totalQuestions = action.formValue.numberOfQuestions;\n          const timerDuration = 10;\n\n          console.log('Timer started');\n          return interval(1000).pipe(\n            take(timerDuration + 1),\n            tap((timeElapsed) => {\n              const remainingTime = timerDuration - timeElapsed;\n              const minutes = Math.floor(remainingTime / 60);\n              const seconds = remainingTime % 60;\n              const formattedMinutes =\n                minutes < 10 ? '0' + minutes : '' + minutes;\n              const formattedSeconds =\n                seconds < 10 ? '0' + seconds : '' + seconds;\n              // console.log(\n              //   'Time remaining:',\n              //   `${formattedMinutes}:${formattedSeconds}`\n              // );\n              this.store.dispatch(\n                QuizActions.updateTimer({\n                  timer: `${formattedMinutes}:${formattedSeconds}`,\n                })\n              );\n              if (remainingTime === 0) {\n                this.store.dispatch(QuizActions.finishQuiz());\n              }\n            })\n          );\n        })\n      ),\n    { dispatch: false }\n  );\n\n  loadTrivia$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(QuizActions.submitForm),\n      switchMap((action) =>\n        this.quizService.getTrivia(action.formValue).pipe(\n          tap(() => {\n            console.log('Form submitted successfully');\n            this.router.navigate(['/quizstart']);\n          }),\n          switchMap((quizQuestions) => {\n            return [QuizApiActions.loadQuestionsSuccess({ quizQuestions })];\n          }),\n          catchError((error) => {\n            console.error('Error in loadTrivia effect:', error);\n            return of(QuizApiActions.loadQuestionsFailure({ error }));\n          })\n        )\n      )\n    )\n  );\n\n  loadCategories$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(QuizActions.loadCategories),\n      mergeMap(() =>\n        this.quizService.getCategories().pipe(\n          map((categories) =>\n            QuizApiActions.loadCategoriesSuccess({ categories })\n          ),\n          catchError((error) =>\n            of(QuizApiActions.loadCategoriesFailure({ error }))\n          )\n        )\n      )\n    )\n  );\n  finishQuiz$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(QuizActions.finishQuiz),\n        tap(() => {\n          this.router.navigate(['/result']);\n        })\n      ),\n    { dispatch: false }\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}