{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { QuizActions } from '../+state/quiz-app.actions';\nimport { combineLatest, map, take } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { selectCorrectAnswer, selectCurrentQuestion, selectCurrentQuestionIndex, selectCurrentScore, selectSelectedOption, selectTotalQuestions, selectUserResponses } from '../+state/quiz-app.selectors';\nlet QuizComponent = class QuizComponent {\n  // state: Quiz = {\n  //   totalQuestions: 0,\n  //   current_score: 0,\n  //   total_score: 0,\n  //   questions: [],\n  //   options: [],\n  //   currentQuestion: '',\n  //   current_Question_Index: 0,\n  // };\n  constructor(store, router) {\n    this.store = store;\n    this.router = router;\n    this.isOptionSelected = false;\n    this.selectedOption = null;\n    this.selectedOptionClass = null;\n    this.correctAnswerClass = null;\n    this.nextBtn = 'Next';\n  }\n  ngOnInit() {\n    this.store.dispatch(QuizActions.loadQuestions());\n    this.currentQuestionIndex$ = this.store.pipe(select(selectCurrentQuestionIndex), map(index => index + 1));\n    this.totalQuestions$ = this.store.pipe(select(selectTotalQuestions));\n    this.currentQuestion$ = this.store.pipe(select(selectCurrentQuestion));\n    this.totalQuestions$ = this.store.pipe(select(selectTotalQuestions));\n    this.correctAnswer$ = this.store.pipe(select(selectCorrectAnswer));\n    this.currentScore$ = this.store.pipe(select(selectCurrentScore));\n    // for previous question\n    this.isFirstQuestion$ = this.currentQuestionIndex$.pipe(map(index => index === 1));\n    this.userResponses$ = this.store.pipe(select(selectUserResponses));\n    this.isLastQuestion$ = combineLatest([this.currentQuestionIndex$, this.totalQuestions$]).pipe(map(([index, totalQuestions]) => {\n      console.log('Total Questions:', totalQuestions);\n      const lastQuestion = (index ?? 0) > (totalQuestions ?? 0);\n      return lastQuestion;\n    }));\n    // ===============================\n    this.store.pipe(select(selectSelectedOption)).subscribe(selectedOption => {\n      this.selectedOption = selectedOption;\n    });\n    this.selectedOptionIndex$ = this.currentQuestion$.pipe(map(currentQuestion => {\n      if (currentQuestion) {\n        return currentQuestion.options.indexOf(this.selectedOption || '');\n      }\n      return null;\n    }));\n    //this is only to show in console and otherwise not working at all\n    this.correctAnswer$.subscribe(correctAnswer => console.log('Correct Answer:', correctAnswer));\n    this.currentQuestionIndex$.subscribe(index => {\n      console.log('Current Question Index:', index);\n    });\n    this.currentQuestionIndex$.subscribe(index => {\n      if (index && index === 10) {\n        this.nextBtn = 'Complete';\n      }\n    });\n  }\n  // setCurrentQuestion(index: number) {\n  //   this.quizText = 'Redux Angular Quiz';\n  //   this.store.dispatch(QuizActions.setCurrentQuestionIndex({ index }));\n  // }\n  skipQuestion() {\n    console.log('skip');\n    this.store.dispatch(QuizActions.skipQuestion());\n    this.currentQuestionIndex$.subscribe(index => {\n      if (index && index > 10) {\n        this.router.navigate(['/skip']);\n      }\n    });\n  }\n  nextQuestion() {\n    this.store.dispatch(QuizActions.nextQuestion());\n    // reset styling\n    this.selectedOption = null;\n    this.selectedOptionClass = null;\n    this.correctAnswerClass = null;\n    this.isOptionSelected = false;\n    this.currentQuestionIndex$.subscribe(index => {\n      if (index && index > 10) {\n        this.router.navigate(['/result']);\n      }\n    });\n  }\n  previousQuestion() {\n    this.store.dispatch(QuizActions.previousQuestion());\n    this.userResponses$.pipe(take(1)).subscribe(userResponses => {\n      console.log('Selected Responses:', userResponses);\n    });\n    // this.store\n    //   .pipe(select(selectSelectedOption))\n    //   .subscribe((selectedOption: string | null) => {\n    //     console.log('Selected Option:', selectedOption);\n    //     this.store.dispatch(QuizActions.previousQuestion());\n    //   });\n    // const correct = this.correctAnswer$.subscribe((correctAnswer) =>\n    //   console.log('Correct one:', correctAnswer)\n    // );\n    this.isOptionSelected = true;\n  }\n  isCorrectAnswer(option) {\n    let correctAnswer;\n    this.store.pipe(select(selectCurrentQuestion)).subscribe(currentQuestion => {\n      if (currentQuestion) {\n        correctAnswer = currentQuestion.correctAnswer;\n      }\n    });\n    return !!correctAnswer && correctAnswer === option;\n  }\n  // Function to handle option selection\n  selectOption(option) {\n    if (!this.selectedOption) {\n      this.selectedOption = option;\n      console.log('Selected Option:', this.selectedOption);\n      const isCorrect = this.isCorrectAnswer(option);\n      this.store.dispatch(QuizActions.selectOption({\n        option,\n        isCorrect\n      }));\n      if (isCorrect) {\n        this.store.dispatch(QuizActions.updateScore({\n          score: 1\n        }));\n      }\n      this.selectedOptionClass = isCorrect ? 'correct-answer' : 'incorrect-answer';\n      this.correctAnswerClass = 'correct-answer';\n      this.isOptionSelected = true;\n    }\n  }\n};\nQuizComponent = __decorate([Component({\n  selector: 'quiz-app-quiz',\n  templateUrl: './quiz.component.html',\n  styleUrls: ['./quiz.component.scss']\n}), __metadata(\"design:paramtypes\", [Store, Router])], QuizComponent);\nexport { QuizComponent };","map":{"version":3,"mappings":"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","names":["Component","Store","select","QuizActions","combineLatest","map","take","Router","selectCorrectAnswer","selectCurrentQuestion","selectCurrentQuestionIndex","selectCurrentScore","selectSelectedOption","selectTotalQuestions","selectUserResponses","QuizComponent","constructor","store","router","ngOnInit","dispatch","loadQuestions","currentQuestionIndex$","pipe","index","totalQuestions$","currentQuestion$","correctAnswer$","currentScore$","isFirstQuestion$","userResponses$","isLastQuestion$","totalQuestions","console","log","lastQuestion","subscribe","selectedOption","selectedOptionIndex$","currentQuestion","options","indexOf","correctAnswer","nextBtn","skipQuestion","navigate","nextQuestion","selectedOptionClass","correctAnswerClass","isOptionSelected","previousQuestion","userResponses","isCorrectAnswer","option","selectOption","isCorrect","updateScore","score","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/quiz/quiz.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Question, Quiz } from './quiz.interface';\nimport { Store, select } from '@ngrx/store';\nimport { QuizActions } from '../+state/quiz-app.actions';\nimport { Observable, combineLatest, map, take } from 'rxjs';\nimport { Router } from '@angular/router';\nimport {\n  selectCorrectAnswer,\n  selectCurrentQuestion,\n  selectCurrentQuestionIndex,\n  selectCurrentScore,\n  selectSelectedOption,\n  selectTotalQuestions,\n  selectUserResponses,\n} from '../+state/quiz-app.selectors';\n\n@Component({\n  selector: 'quiz-app-quiz',\n  templateUrl: './quiz.component.html',\n  styleUrls: ['./quiz.component.scss'],\n})\nexport class QuizComponent implements OnInit {\n  questions$!: Observable<Question[]>;\n  currentQuestionIndex$!: Observable<number | null>;\n  totalQuestions$!: Observable<number | null>;\n  currentQuestion$!: Observable<Question | undefined>;\n  correctAnswer$!: Observable<string>;\n  currentScore$!: Observable<number>;\n  isFirstQuestion$!: Observable<boolean>;\n  isLastQuestion$!: Observable<boolean>;\n  isOptionSelected = false;\n  quizText!: string;\n  selectedOption: string | null = null;\n  selectedOptionClass: string | null = null;\n  correctAnswerClass: string | null = null;\n  selectedOptionIndex$!: Observable<number | null>;\n  userResponses$!: Observable<(string | null)[]>;\n  nextBtn = 'Next';\n  // state: Quiz = {\n  //   totalQuestions: 0,\n  //   current_score: 0,\n  //   total_score: 0,\n  //   questions: [],\n  //   options: [],\n  //   currentQuestion: '',\n  //   current_Question_Index: 0,\n  // };\n\n  constructor(private store: Store, private router: Router) {}\n\n  ngOnInit(): void {\n    this.store.dispatch(QuizActions.loadQuestions());\n    this.currentQuestionIndex$ = this.store.pipe(\n      select(selectCurrentQuestionIndex),\n      map((index) => index + 1)\n    );\n    this.totalQuestions$ = this.store.pipe(select(selectTotalQuestions));\n    this.currentQuestion$ = this.store.pipe(select(selectCurrentQuestion));\n    this.totalQuestions$ = this.store.pipe(select(selectTotalQuestions));\n    this.correctAnswer$ = this.store.pipe(select(selectCorrectAnswer));\n    this.currentScore$ = this.store.pipe(select(selectCurrentScore));\n    // for previous question\n    this.isFirstQuestion$ = this.currentQuestionIndex$.pipe(\n      map((index) => index === 1)\n    );\n    this.userResponses$ = this.store.pipe(select(selectUserResponses));\n    this.isLastQuestion$ = combineLatest([\n      this.currentQuestionIndex$,\n      this.totalQuestions$,\n    ]).pipe(\n      map(([index, totalQuestions]) => {\n        console.log('Total Questions:', totalQuestions);\n        const lastQuestion = (index ?? 0) > (totalQuestions ?? 0);\n        return lastQuestion;\n      })\n    );\n    // ===============================\n    this.store\n      .pipe(select(selectSelectedOption))\n      .subscribe((selectedOption: string | null) => {\n        this.selectedOption = selectedOption;\n      });\n    this.selectedOptionIndex$ = this.currentQuestion$.pipe(\n      map((currentQuestion) => {\n        if (currentQuestion) {\n          return currentQuestion.options.indexOf(this.selectedOption || '');\n        }\n        return null;\n      })\n    );\n    //this is only to show in console and otherwise not working at all\n    this.correctAnswer$.subscribe((correctAnswer) =>\n      console.log('Correct Answer:', correctAnswer)\n    );\n    this.currentQuestionIndex$.subscribe((index) => {\n      console.log('Current Question Index:', index);\n    });\n    this.currentQuestionIndex$.subscribe((index) => {\n      if (index && index === 10) {\n        this.nextBtn = 'Complete';\n      }\n    });\n  }\n  // setCurrentQuestion(index: number) {\n  //   this.quizText = 'Redux Angular Quiz';\n  //   this.store.dispatch(QuizActions.setCurrentQuestionIndex({ index }));\n  // }\n\n  skipQuestion() {\n    console.log('skip');\n    this.store.dispatch(QuizActions.skipQuestion());\n    this.currentQuestionIndex$.subscribe((index) => {\n      if (index && index > 10) {\n        this.router.navigate(['/skip']);\n      }\n    });\n  }\n  nextQuestion() {\n    this.store.dispatch(QuizActions.nextQuestion());\n    // reset styling\n    this.selectedOption = null;\n    this.selectedOptionClass = null;\n    this.correctAnswerClass = null;\n    this.isOptionSelected = false;\n\n    this.currentQuestionIndex$.subscribe((index) => {\n      if (index && index > 10) {\n        this.router.navigate(['/result']);\n      }\n    });\n  }\n\n  previousQuestion() {\n    this.store.dispatch(QuizActions.previousQuestion());\n    this.userResponses$.pipe(take(1)).subscribe((userResponses) => {\n      console.log('Selected Responses:', userResponses);\n    });\n    // this.store\n    //   .pipe(select(selectSelectedOption))\n    //   .subscribe((selectedOption: string | null) => {\n    //     console.log('Selected Option:', selectedOption);\n    //     this.store.dispatch(QuizActions.previousQuestion());\n    //   });\n    // const correct = this.correctAnswer$.subscribe((correctAnswer) =>\n    //   console.log('Correct one:', correctAnswer)\n    // );\n    this.isOptionSelected = true;\n  }\n  isCorrectAnswer(option: string): boolean {\n    let correctAnswer: string | undefined;\n    this.store\n      .pipe(select(selectCurrentQuestion))\n      .subscribe((currentQuestion) => {\n        if (currentQuestion) {\n          correctAnswer = currentQuestion.correctAnswer;\n        }\n      });\n\n    return !!correctAnswer && correctAnswer === option;\n  }\n\n  // Function to handle option selection\n  selectOption(option: string) {\n    if (!this.selectedOption) {\n      this.selectedOption = option;\n      console.log('Selected Option:', this.selectedOption);\n      const isCorrect = this.isCorrectAnswer(option);\n\n      this.store.dispatch(QuizActions.selectOption({ option, isCorrect }));\n      if (isCorrect) {\n        this.store.dispatch(QuizActions.updateScore({ score: 1 }));\n      }\n\n      this.selectedOptionClass = isCorrect\n        ? 'correct-answer'\n        : 'incorrect-answer';\n      this.correctAnswerClass = 'correct-answer';\n      this.isOptionSelected = true;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}