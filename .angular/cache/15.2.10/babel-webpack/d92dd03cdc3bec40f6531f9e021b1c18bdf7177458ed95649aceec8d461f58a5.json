{"ast":null,"code":"import { createEffect, Actions, ofType } from '@ngrx/effects';\nimport { catchError, of, map, mergeMap, tap } from 'rxjs';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../quiz-redux.service\";\nexport class QuizAppEffects {\n  // constructor(\n  //   private actions$: Actions,\n  //   private triviaService: QuizReduxService,\n  //   private store: Store\n  // ) {}\n  // loadTrivia$ = createEffect(() =>\n  //   this.actions$.pipe(\n  //     ofType(QuizActions.loadQuestions),\n  //     mergeMap(() =>\n  //       this.triviaService.getTriviaQuestion().pipe(\n  //         map((questions: any) => {\n  //           console.log('Trivia questions received from Effects:', questions);\n  //           return QuizApiActions.loadQuestionsSuccess({ questions });\n  //         }),\n  //         catchError((error) => {\n  //           console.error('Error in loadTodos effect:', error);\n  //           return of(QuizApiActions.loadQuestionsFailure({ error }));\n  //         })\n  //       )\n  //     )\n  //   )\n  // );\n  // loadCategories$ = createEffect(() =>\n  //   this.actions$.pipe(\n  //     ofType(QuizActions.loadCategories),\n  //     tap(),\n  //     switchMap(() =>\n  //       this.triviaService.getcategories().pipe(\n  //         map((categories) => {\n  //           // console.log('Trivia categories received from Effects:', categories);\n  //           return QuizApiActions.loadCategoriesSuccess({ categories });\n  //         }),\n  //         catchError((error) =>\n  //           of(QuizApiActions.loadCategoriesFailure({ error }))\n  //         )\n  //       )\n  //     )\n  //   )\n  // );\n  constructor(actions$, quizService) {\n    this.actions$ = actions$;\n    this.quizService = quizService;\n    this.loadTrivia$ = createEffect(() => this.actions$.pipe(tap(() => console.log('Effect reached!')), ofType(QuizActions.submitForm), mergeMap(action => this.quizService.getTrivia(action.formValue).pipe(tap(data => {\n      console.log('Service Data:', data);\n    }), map(trivia => QuizApiActions.triviaLoadedSuccess({\n      trivia\n    })), catchError(error => {\n      console.error('Error in loadTodos effect:', error);\n      return of(QuizApiActions.loadQuizFailure({\n        error\n      }));\n    })))));\n    this.loadCategories$ = createEffect(() => this.actions$.pipe(ofType(QuizActions.loadCategories), mergeMap(() => this.quizService.getCategories().pipe(map(categories => QuizApiActions.loadCategoriesSuccess({\n      categories\n    })), catchError(error => of(QuizApiActions.loadCategoriesFailure({\n      error\n    })))))));\n  }\n  static #_ = this.ɵfac = function QuizAppEffects_Factory(t) {\n    return new (t || QuizAppEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.QuizReduxService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuizAppEffects,\n    factory: QuizAppEffects.ɵfac\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,OAAO,EAAEC,MAAM,QAAQ,eAAe;AAC7D,SAEEC,UAAU,EACVC,EAAE,EACFC,GAAG,EACHC,QAAQ,EACRC,GAAG,QAEE,MAAM;AACb,SAASC,WAAW,QAAQ,oBAAoB;AAChD,SAASC,cAAc,QAAQ,oBAAoB;AAEnD,SAASC,gBAAgB,QAAQ,uBAAuB;;;;AAMxD,OAAM,MAAOC,cAAc;EACzB;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,YACUC,QAAiB,EACjBC,WAA6B;IAD7B,aAAQ,GAARD,QAAQ;IACR,gBAAW,GAAXC,WAAW;IAGrB,gBAAW,GAAGd,YAAY,CAAC,MACzB,IAAI,CAACa,QAAQ,CAACE,IAAI,CAChBR,GAAG,CAAC,MAAMS,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC,CAAC,EACzCf,MAAM,CAACM,WAAW,CAACU,UAAU,CAAC,EAC9BZ,QAAQ,CAAEa,MAAM,IACd,IAAI,CAACL,WAAW,CAACM,SAAS,CAACD,MAAM,CAACE,SAAS,CAAC,CAACN,IAAI,CAC/CR,GAAG,CAAEe,IAAI,IAAI;MACXN,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEK,IAAI,CAAC;IACpC,CAAC,CAAC,EACFjB,GAAG,CAAEkB,MAAM,IAAKd,cAAc,CAACe,mBAAmB,CAAC;MAAED;IAAM,CAAE,CAAC,CAAC,EAC/DpB,UAAU,CAAEsB,KAAK,IAAI;MACnBT,OAAO,CAACS,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,OAAOrB,EAAE,CAACK,cAAc,CAACiB,eAAe,CAAC;QAAED;MAAK,CAAE,CAAC,CAAC;IACtD,CAAC,CAAC,CACH,CACF,CACF,CACF;IAED,oBAAe,GAAGzB,YAAY,CAAC,MAC7B,IAAI,CAACa,QAAQ,CAACE,IAAI,CAChBb,MAAM,CAACM,WAAW,CAACmB,cAAc,CAAC,EAClCrB,QAAQ,CAAC,MACP,IAAI,CAACQ,WAAW,CAACc,aAAa,EAAE,CAACb,IAAI,CACnCV,GAAG,CAAEwB,UAAU,IACbpB,cAAc,CAACqB,qBAAqB,CAAC;MAAED;IAAU,CAAE,CAAC,CACrD,EACD1B,UAAU,CAAEsB,KAAK,IACfrB,EAAE,CAACK,cAAc,CAACsB,qBAAqB,CAAC;MAAEN;IAAK,CAAE,CAAC,CAAC,CACpD,CACF,CACF,CACF,CACF;EAnCE;EAAC;qBA7COd,cAAc;EAAA;EAAA;WAAdA,cAAc;IAAAqB,SAAdrB,cAAc;EAAA","names":["createEffect","Actions","ofType","catchError","of","map","mergeMap","tap","QuizActions","QuizApiActions","QuizReduxService","QuizAppEffects","constructor","actions$","quizService","pipe","console","log","submitForm","action","getTrivia","formValue","data","trivia","triviaLoadedSuccess","error","loadQuizFailure","loadCategories","getCategories","categories","loadCategoriesSuccess","loadCategoriesFailure","factory"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/+state/quiz-app.effects.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport { createEffect, Actions, ofType } from '@ngrx/effects';\nimport {\n  switchMap,\n  catchError,\n  of,\n  map,\n  mergeMap,\n  tap,\n  withLatestFrom,\n} from 'rxjs';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport * as QuizAppFeature from './quiz-app.reducer';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport { Question } from '../quiz/quiz.interface';\nimport { Store, select } from '@ngrx/store';\nimport {} from './quiz-app.selectors';\n\n@Injectable()\nexport class QuizAppEffects {\n  // constructor(\n  //   private actions$: Actions,\n  //   private triviaService: QuizReduxService,\n  //   private store: Store\n  // ) {}\n\n  // loadTrivia$ = createEffect(() =>\n  //   this.actions$.pipe(\n  //     ofType(QuizActions.loadQuestions),\n  //     mergeMap(() =>\n  //       this.triviaService.getTriviaQuestion().pipe(\n  //         map((questions: any) => {\n  //           console.log('Trivia questions received from Effects:', questions);\n  //           return QuizApiActions.loadQuestionsSuccess({ questions });\n  //         }),\n  //         catchError((error) => {\n  //           console.error('Error in loadTodos effect:', error);\n  //           return of(QuizApiActions.loadQuestionsFailure({ error }));\n  //         })\n  //       )\n  //     )\n  //   )\n  // );\n\n  // loadCategories$ = createEffect(() =>\n  //   this.actions$.pipe(\n  //     ofType(QuizActions.loadCategories),\n  //     tap(),\n  //     switchMap(() =>\n  //       this.triviaService.getcategories().pipe(\n  //         map((categories) => {\n  //           // console.log('Trivia categories received from Effects:', categories);\n  //           return QuizApiActions.loadCategoriesSuccess({ categories });\n  //         }),\n  //         catchError((error) =>\n  //           of(QuizApiActions.loadCategoriesFailure({ error }))\n  //         )\n  //       )\n  //     )\n  //   )\n  // );\n  constructor(\n    private actions$: Actions,\n    private quizService: QuizReduxService\n  ) {}\n\n  loadTrivia$ = createEffect(() =>\n    this.actions$.pipe(\n      tap(() => console.log('Effect reached!')),\n      ofType(QuizActions.submitForm),\n      mergeMap((action) =>\n        this.quizService.getTrivia(action.formValue).pipe(\n          tap((data) => {\n            console.log('Service Data:', data);\n          }),\n          map((trivia) => QuizApiActions.triviaLoadedSuccess({ trivia })),\n          catchError((error) => {\n            console.error('Error in loadTodos effect:', error);\n            return of(QuizApiActions.loadQuizFailure({ error }));\n          })\n        )\n      )\n    )\n  );\n\n  loadCategories$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(QuizActions.loadCategories),\n      mergeMap(() =>\n        this.quizService.getCategories().pipe(\n          map((categories) =>\n            QuizApiActions.loadCategoriesSuccess({ categories })\n          ),\n          catchError((error) =>\n            of(QuizApiActions.loadCategoriesFailure({ error }))\n          )\n        )\n      )\n    )\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}