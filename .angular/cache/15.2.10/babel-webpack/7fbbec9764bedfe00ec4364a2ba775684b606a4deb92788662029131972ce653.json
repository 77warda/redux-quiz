{"ast":null,"code":"import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Categories, Question } from './quiz/quiz.interface';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class QuizReduxService {\n  constructor(http) {\n    this.http = http;\n    // private apiUrl = 'https://the-trivia-api.com/v2/questions';\n    // private apiCatUrl = ' https://the-trivia-api.com/v2/categories';\n    // constructor(private http: HttpClient) {}\n    // getTriviaQuestion(): Observable<Question> {\n    //   return this.http.get<Question>(this.apiUrl).pipe(\n    //     tap((data) => {\n    //       console.log('questions:', data);\n    //     }),\n    //     catchError((error) => {\n    //       console.error('Error fetching trivia question:', error);\n    //       return throwError(error);\n    //     })\n    //   );\n    // }\n    // getcategories(): Observable<any> {\n    //   return this.http.get<any>(this.apiCatUrl).pipe(\n    //     // tap((data) => {\n    //     //   console.log('Categories:', data);\n    //     // }),\n    //     catchError((error) => {\n    //       console.error('Error fetching trivia question:', error);\n    //       return throwError(error);\n    //     })\n    //   );\n    // }\n    this.apiUrl = 'https://the-trivia-api.com/v2/';\n  }\n  // getTrivia(): Observable<Question[]> {\n  //   return this.http.get<Question[]>('https://the-trivia-api.com/v2/questions');\n  // }\n  getCategories() {\n    return this.http.get(`${this.apiUrl}categories`);\n  }\n  getTrivia(formValue) {\n    let searchParams = new HttpParams();\n    const categories = formValue.category;\n    const difficulties = formValue.difficulty;\n    const type = formValue.type;\n    const totalQuestions = formValue.numberOfQuestions;\n    if (categories) {\n      searchParams = searchParams.append('categories', categories);\n    }\n    if (difficulties) {\n      searchParams = searchParams.append('difficulties', difficulties);\n    }\n    if (type) {\n      searchParams = searchParams.append('types', type);\n    }\n    if (totalQuestions) {\n      searchParams = searchParams.append('limit', totalQuestions.toString());\n    }\n    return this.http.get('https://the-trivia-api.com/v2/questions', {\n      params: searchParams\n    });\n  }\n  static #_ = this.ɵfac = function QuizReduxService_Factory(t) {\n    return new (t || QuizReduxService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuizReduxService,\n    factory: QuizReduxService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,EAAEC,UAAU,QAAQ,sBAAsB;AAE7D,SAASC,UAAU,QAAqC,MAAM;AAC9D,SAASC,UAAU,EAAEC,QAAQ,QAAc,uBAAuB;;;AAKlE,OAAM,MAAOC,gBAAgB;EA6B3BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IA5BxB;IACA;IAEA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACQ,WAAM,GAAG,gCAAgC;EACV;EACvC;EACA;EACA;EACAC,aAAa;IACX,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAa,GAAG,IAAI,CAACC,MAAM,YAAY,CAAC;EAC9D;EACAC,SAAS,CAACC,SAAc;IACtB,IAAIC,YAAY,GAAG,IAAIZ,UAAU,EAAE;IACnC,MAAMa,UAAU,GAAGF,SAAS,CAACG,QAAQ;IACrC,MAAMC,YAAY,GAAGJ,SAAS,CAACK,UAAU;IACzC,MAAMC,IAAI,GAAGN,SAAS,CAACM,IAAI;IAC3B,MAAMC,cAAc,GAAGP,SAAS,CAACQ,iBAAiB;IAElD,IAAIN,UAAU,EAAE;MACdD,YAAY,GAAGA,YAAY,CAACQ,MAAM,CAAC,YAAY,EAAEP,UAAU,CAAC;;IAE9D,IAAIE,YAAY,EAAE;MAChBH,YAAY,GAAGA,YAAY,CAACQ,MAAM,CAAC,cAAc,EAAEL,YAAY,CAAC;;IAElE,IAAIE,IAAI,EAAE;MACRL,YAAY,GAAGA,YAAY,CAACQ,MAAM,CAAC,OAAO,EAAEH,IAAI,CAAC;;IAEnD,IAAIC,cAAc,EAAE;MAClBN,YAAY,GAAGA,YAAY,CAACQ,MAAM,CAAC,OAAO,EAAEF,cAAc,CAACG,QAAQ,EAAE,CAAC;;IAExE,OAAO,IAAI,CAACf,IAAI,CAACE,GAAG,CAClB,yCAAyC,EACzC;MACEc,MAAM,EAAEV;KACT,CACF;EACH;EAAC;qBA7DUR,gBAAgB;EAAA;EAAA;WAAhBA,gBAAgB;IAAAmB,SAAhBnB,gBAAgB;IAAAoB,YAFf;EAAM","names":["HttpClient","HttpParams","Observable","Categories","Question","QuizReduxService","constructor","http","getCategories","get","apiUrl","getTrivia","formValue","searchParams","categories","category","difficulties","difficulty","type","totalQuestions","numberOfQuestions","append","toString","params","factory","providedIn"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/quiz-redux.service.ts"],"sourcesContent":["import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, catchError, tap, throwError } from 'rxjs';\nimport { Categories, Question, Quiz } from './quiz/quiz.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QuizReduxService {\n  // private apiUrl = 'https://the-trivia-api.com/v2/questions';\n  // private apiCatUrl = ' https://the-trivia-api.com/v2/categories';\n\n  // constructor(private http: HttpClient) {}\n\n  // getTriviaQuestion(): Observable<Question> {\n  //   return this.http.get<Question>(this.apiUrl).pipe(\n  //     tap((data) => {\n  //       console.log('questions:', data);\n  //     }),\n  //     catchError((error) => {\n  //       console.error('Error fetching trivia question:', error);\n  //       return throwError(error);\n  //     })\n  //   );\n  // }\n  // getcategories(): Observable<any> {\n  //   return this.http.get<any>(this.apiCatUrl).pipe(\n  //     // tap((data) => {\n  //     //   console.log('Categories:', data);\n  //     // }),\n  //     catchError((error) => {\n  //       console.error('Error fetching trivia question:', error);\n  //       return throwError(error);\n  //     })\n  //   );\n  // }\n  private apiUrl = 'https://the-trivia-api.com/v2/';\n  constructor(private http: HttpClient) {}\n  // getTrivia(): Observable<Question[]> {\n  //   return this.http.get<Question[]>('https://the-trivia-api.com/v2/questions');\n  // }\n  getCategories(): Observable<Categories> {\n    return this.http.get<Categories>(`${this.apiUrl}categories`);\n  }\n  getTrivia(formValue: any): Observable<Question[]> {\n    let searchParams = new HttpParams();\n    const categories = formValue.category;\n    const difficulties = formValue.difficulty;\n    const type = formValue.type;\n    const totalQuestions = formValue.numberOfQuestions;\n\n    if (categories) {\n      searchParams = searchParams.append('categories', categories);\n    }\n    if (difficulties) {\n      searchParams = searchParams.append('difficulties', difficulties);\n    }\n    if (type) {\n      searchParams = searchParams.append('types', type);\n    }\n    if (totalQuestions) {\n      searchParams = searchParams.append('limit', totalQuestions.toString());\n    }\n    return this.http.get<Question[]>(\n      'https://the-trivia-api.com/v2/questions',\n      {\n        params: searchParams,\n      }\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}