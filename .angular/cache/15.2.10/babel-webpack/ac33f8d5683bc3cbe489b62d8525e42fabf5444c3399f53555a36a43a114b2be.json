{"ast":null,"code":"import { createEffect, Actions, ofType } from '@ngrx/effects';\nimport { catchError, of, map, mergeMap, tap, switchMap, interval } from 'rxjs';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport { Store } from '@ngrx/store';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../quiz-redux.service\";\nimport * as i3 from \"@ngrx/store\";\nexport class QuizAppEffects {\n  constructor(actions$, quizService, store) {\n    this.actions$ = actions$;\n    this.quizService = quizService;\n    this.store = store;\n    this.loadTrivia$ = createEffect(() => this.actions$.pipe(ofType(QuizActions.submitForm), mergeMap(action => this.quizService.getTrivia(action.formValue).pipe(tap(data => {\n      console.log('Service Data:', data);\n    }), map(quizQuestions => QuizApiActions.loadQuestionsSuccess({\n      quizQuestions\n    })), catchError(error => {\n      console.error('Error in loadTodos effect:', error);\n      return of(QuizApiActions.loadQuestionsFailure({\n        error\n      }));\n    })))));\n    this.loadCategories$ = createEffect(() => this.actions$.pipe(ofType(QuizActions.loadCategories), mergeMap(() => this.quizService.getCategories().pipe(map(categories => QuizApiActions.loadCategoriesSuccess({\n      categories\n    })), catchError(error => of(QuizApiActions.loadCategoriesFailure({\n      error\n    })))))));\n  }\n  startTimer(duration) {\n    setTimeout(() => {\n      let timer = duration;\n      this.store.dispatch(QuizActions.startTimer());\n      this.store.pipe(ofType(QuizActions.startTimer), switchMap(() => interval(1000)), tap(() => {\n        if (timer >= 0) {\n          const minutes = Math.floor(timer / 60);\n          const seconds = timer % 60;\n          const formattedMinutes = minutes < 10 ? '0' + minutes : '' + minutes;\n          const formattedSeconds = seconds < 10 ? '0' + seconds : '' + seconds;\n          this.store.dispatch(QuizActions.updateTimer({\n            uiTimer: `${formattedMinutes}:${formattedSeconds}`\n          }));\n          if (timer === 0) {\n            this.store.dispatch(QuizActions.finishQuiz());\n          }\n          timer--;\n        }\n      })).subscribe();\n    }, 500);\n  }\n  calculateTimerDuration() {\n    console.log('timer');\n  }\n  static #_ = this.ɵfac = function QuizAppEffects_Factory(t) {\n    return new (t || QuizAppEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.QuizReduxService), i0.ɵɵinject(i3.Store));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuizAppEffects,\n    factory: QuizAppEffects.ɵfac\n  });\n}","map":{"version":3,"mappings":"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","names":["createEffect","Actions","ofType","catchError","of","map","mergeMap","tap","switchMap","interval","QuizActions","QuizApiActions","QuizReduxService","Store","QuizAppEffects","constructor","actions$","quizService","store","pipe","submitForm","action","getTrivia","formValue","data","console","log","quizQuestions","loadQuestionsSuccess","error","loadQuestionsFailure","loadCategories","getCategories","categories","loadCategoriesSuccess","loadCategoriesFailure","startTimer","duration","setTimeout","timer","dispatch","minutes","Math","floor","seconds","formattedMinutes","formattedSeconds","updateTimer","uiTimer","finishQuiz","subscribe","calculateTimerDuration","factory"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/+state/quiz-app.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { createEffect, Actions, ofType } from '@ngrx/effects';\nimport { catchError, of, map, mergeMap, tap, switchMap, interval } from 'rxjs';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport { Store } from '@ngrx/store';\n\n@Injectable()\nexport class QuizAppEffects {\n  constructor(\n    private actions$: Actions,\n    private quizService: QuizReduxService,\n    private store: Store\n  ) {}\n\n  startTimer(duration: number): void {\n    setTimeout(() => {\n      let timer = duration;\n\n      this.store.dispatch(QuizActions.startTimer());\n\n      this.store\n        .pipe(\n          ofType(QuizActions.startTimer),\n          switchMap(() => interval(1000)),\n          tap(() => {\n            if (timer >= 0) {\n              const minutes = Math.floor(timer / 60);\n              const seconds = timer % 60;\n\n              const formattedMinutes =\n                minutes < 10 ? '0' + minutes : '' + minutes;\n              const formattedSeconds =\n                seconds < 10 ? '0' + seconds : '' + seconds;\n\n              this.store.dispatch(\n                QuizActions.updateTimer({\n                  uiTimer: `${formattedMinutes}:${formattedSeconds}`,\n                })\n              );\n\n              if (timer === 0) {\n                this.store.dispatch(QuizActions.finishQuiz());\n              }\n              timer--;\n            }\n          })\n        )\n        .subscribe();\n    }, 500);\n  }\n\n  loadTrivia$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(QuizActions.submitForm),\n      mergeMap((action) =>\n        this.quizService.getTrivia(action.formValue).pipe(\n          tap((data) => {\n            console.log('Service Data:', data);\n          }),\n          map((quizQuestions) =>\n            QuizApiActions.loadQuestionsSuccess({ quizQuestions })\n          ),\n          catchError((error) => {\n            console.error('Error in loadTodos effect:', error);\n            return of(QuizApiActions.loadQuestionsFailure({ error }));\n          })\n        )\n      )\n    )\n  );\n\n  loadCategories$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(QuizActions.loadCategories),\n      mergeMap(() =>\n        this.quizService.getCategories().pipe(\n          map((categories) =>\n            QuizApiActions.loadCategoriesSuccess({ categories })\n          ),\n          catchError((error) =>\n            of(QuizApiActions.loadCategoriesFailure({ error }))\n          )\n        )\n      )\n    )\n  );\n  calculateTimerDuration() {\n    console.log('timer');\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}