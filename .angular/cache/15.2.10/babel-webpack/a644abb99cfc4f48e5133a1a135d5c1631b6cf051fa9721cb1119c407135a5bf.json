{"ast":null,"code":"import { Store, select } from '@ngrx/store';\nimport { QuizActions } from '../+state/quiz-app.actions';\nimport { Observable } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { selectCurrentQuestion, selectCurrentQuestionNumber, selectQuestions, selectTriviaState } from '../+state/quiz-app.selectors';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../quiz-redux.service\";\nimport * as i4 from \"@angular/common\";\nfunction QuizComponent_section_0_div_5_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"h3\", 2);\n    i0.ɵɵlistener(\"click\", function QuizComponent_section_0_div_5_div_2_Template_h3_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const i_r8 = restoredCtx.index;\n      const ctx_r9 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r9.setCurrentQuestion(i_r8));\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 14);\n    i0.ɵɵelement(4, \"i\", 15);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const question_r7 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", question_r7.question.text, \" \");\n  }\n}\nfunction QuizComponent_section_0_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10)(1, \"div\", 11);\n    i0.ɵɵlistener(\"click\", function QuizComponent_section_0_div_5_Template_div_click_1_listener($event) {\n      return $event.stopPropagation();\n    });\n    i0.ɵɵtemplate(2, QuizComponent_section_0_div_5_div_2_Template, 5, 1, \"div\", 12);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const trivia_r1 = i0.ɵɵnextContext().ngIf;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", trivia_r1.questions);\n  }\n}\nfunction QuizComponent_section_0_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 16)(1, \"div\", 17)(2, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function QuizComponent_section_0_div_6_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.previousQuestion());\n    });\n    i0.ɵɵelement(3, \"i\", 19);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 20);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"button\", 21);\n    i0.ɵɵlistener(\"click\", function QuizComponent_section_0_div_6_Template_button_click_6_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.nextQuestion());\n    });\n    i0.ɵɵelement(7, \"i\", 3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"button\", 22);\n    i0.ɵɵlistener(\"click\", function QuizComponent_section_0_div_6_Template_button_click_8_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r17 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r17.toggleOptionWindow());\n    });\n    i0.ɵɵelement(9, \"i\", 23);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const trivia_r13 = ctx.ngIf;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", !ctx_r3.previousAllowed);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate2(\" Question \", trivia_r13.currentQuestionNumber, \"/\", trivia_r13.totalQuestions, \" \");\n  }\n}\nfunction QuizComponent_section_0_li_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r18 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r18, \" \");\n  }\n}\nfunction QuizComponent_section_0_div_15_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"input\", 29);\n    i0.ɵɵlistener(\"click\", function QuizComponent_section_0_div_15_div_2_Template_input_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r24);\n      const option_r21 = restoredCtx.$implicit;\n      const ctx_r23 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r23.handleOption(option_r21));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"label\", 30);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const option_r21 = ctx.$implicit;\n    const i_r22 = ctx.index;\n    const ctx_r20 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"id\", \"option\" + i_r22);\n    i0.ɵɵproperty(\"disabled\", ctx_r20.response);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(option_r21);\n  }\n}\nfunction QuizComponent_section_0_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r26 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 24)(1, \"div\", 25);\n    i0.ɵɵtemplate(2, QuizComponent_section_0_div_15_div_2_Template, 4, 3, \"div\", 8);\n    i0.ɵɵelementStart(3, \"div\", 26)(4, \"button\", 27);\n    i0.ɵɵlistener(\"click\", function QuizComponent_section_0_div_15_Template_button_click_4_listener() {\n      i0.ɵɵrestoreView(_r26);\n      const ctx_r25 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r25.previousQuestion());\n    });\n    i0.ɵɵtext(5, \" Previous \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"button\", 28);\n    i0.ɵɵlistener(\"click\", function QuizComponent_section_0_div_15_Template_button_click_6_listener() {\n      i0.ɵɵrestoreView(_r26);\n      const ctx_r27 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r27.nextQuestion());\n    });\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const trivia_r1 = i0.ɵɵnextContext().ngIf;\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", trivia_r1.options);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", !ctx_r5.previousAllowed);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r5.nextBtn, \" \");\n  }\n}\nfunction QuizComponent_section_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r30 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"section\")(1, \"div\", 1)(2, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function QuizComponent_section_0_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r30);\n      const ctx_r29 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r29.openSideWindow());\n    });\n    i0.ɵɵelement(3, \"i\", 3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 2);\n    i0.ɵɵlistener(\"click\", function QuizComponent_section_0_Template_div_click_4_listener() {\n      i0.ɵɵrestoreView(_r30);\n      const ctx_r31 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r31.closeSideWindow());\n    });\n    i0.ɵɵtemplate(5, QuizComponent_section_0_div_5_Template, 3, 1, \"div\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, QuizComponent_section_0_div_6_Template, 10, 3, \"div\", 5);\n    i0.ɵɵpipe(7, \"async\");\n    i0.ɵɵelementStart(8, \"div\", 6)(9, \"div\", 7)(10, \"h3\");\n    i0.ɵɵtext(11);\n    i0.ɵɵpipe(12, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"ul\");\n    i0.ɵɵtemplate(14, QuizComponent_section_0_li_14_Template, 2, 1, \"li\", 8);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵtemplate(15, QuizComponent_section_0_div_15_Template, 8, 3, \"div\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const trivia_r1 = ctx.ngIf;\n    const ctx_r0 = i0.ɵɵnextContext();\n    let tmp_2_0;\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.sideWindowVisible);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(7, 5, ctx_r0.triviaState$));\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", (tmp_2_0 = i0.ɵɵpipeBind1(12, 7, ctx_r0.selectCurrentQuestion$)) == null ? null : tmp_2_0.question == null ? null : tmp_2_0.question.text, \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", trivia_r1.options);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.optionWindowVisible);\n  }\n}\n// export class QuizComponent implements OnInit {\n//   questions$!: Observable<Question[]>;\n//   currentQuestionIndex$!: Observable<number | null>;\n//   totalQuestions$!: Observable<number | null>;\n//   currentQuestion$!: Observable<Question | undefined>;\n//   correctAnswer$!: Observable<string>;\n//   currentScore$!: Observable<number>;\n//   isFirstQuestion$!: Observable<boolean>;\n//   isLastQuestion$!: Observable<boolean>;\n//   isOptionSelected = false;\n//   quizText!: string;\n//   selectedOption: string | null = null;\n//   selectedOptionClass: string | null = null;\n//   correctAnswerClass: string | null = null;\n//   selectedOptionIndex$!: Observable<number | null>;\n//   userResponses$!: Observable<(string | null)[]>;\n//   nextBtn = 'Next';\n//   optionWindowVisible = false;\n//   sideWindowVisible = false;\n//   currentQuestion: any;\n//   selectedOption$!: Observable<string | null>;\n//   isOptionSelected$!: Observable<boolean>;\n//   isOptionCorrect$!: Observable<boolean>;\n//   isOptionIncorrect$!: Observable<boolean>;\n//   filteredQuestions$!: Observable<Question[]>;\n//   constructor(private store: Store, private router: Router) {}\n//   ngOnInit(): void {\n//     this.store.dispatch(QuizActions.loadQuestions());\n//     this.currentQuestionIndex$ = this.store.pipe(\n//       select(selectCurrentQuestionIndex),\n//       map((index) => index + 1)\n//     );\n//     this.questions$ = this.store.pipe(select(selectQuestions));\n//     this.filteredQuestions$ = this.store.pipe(select(selectFilteredQuestions));\n//     this.totalQuestions$ = this.store.pipe(select(selectTotalQuestions));\n//     this.currentQuestion$ = this.store.pipe(select(selectCurrentQuestion));\n//     this.correctAnswer$ = this.store.pipe(select(selectCorrectAnswer));\n//     this.currentScore$ = this.store.pipe(select(selectCurrentScore));\n//     // ===================== new work ==============\n//     this.selectedOption$ = this.store.select(selectSelectedOption);\n//     this.isOptionSelected$ = this.store.select(selectIsOptionSelected);\n//     // for previous question\n//     this.isFirstQuestion$ = this.currentQuestionIndex$.pipe(\n//       map((index) => index === 1)\n//     );\n//     this.userResponses$ = this.store.pipe(select(selectUserResponses));\n//     this.isLastQuestion$ = combineLatest([\n//       this.currentQuestionIndex$,\n//       this.totalQuestions$,\n//     ]).pipe(\n//       map(([index, totalQuestions]) => {\n//         console.log('Total Questions:', totalQuestions);\n//         const lastQuestion = (index ?? 0) > (totalQuestions ?? 0);\n//         return lastQuestion;\n//       })\n//     );\n//     this.store\n//       .pipe(select(selectFilteredQuestions))\n//       .subscribe((filteredQuestions) => {\n//         console.log('Filtered Questions in Component:', filteredQuestions);\n//       });\n//     // ===============================\n//     this.store\n//       .pipe(select(selectSelectedOption))\n//       .subscribe((selectedOption: string | null) => {\n//         this.selectedOption = selectedOption;\n//       });\n//     // ================================================================\n//     //this is only to show in console and otherwise not working at all\n//     this.correctAnswer$.subscribe((correctAnswer) =>\n//       console.log('Correct Answer:', correctAnswer)\n//     );\n//     this.currentQuestionIndex$.subscribe((index) => {\n//       console.log('Current Question Index:', index);\n//     });\n//     this.currentQuestionIndex$.subscribe((index) => {\n//       if (index && index === 10) {\n//         this.nextBtn = 'Complete';\n//       }\n//     });\n//   }\n//   toggleOptionWindow() {\n//     this.optionWindowVisible = !this.optionWindowVisible;\n//   }\n//   openSideWindow() {\n//     this.sideWindowVisible = true;\n//     this.optionWindowVisible = false;\n//   }\n//   closeSideWindow() {\n//     this.sideWindowVisible = false;\n//   }\n//   setCurrentQuestion(question: any, index: number) {\n//     this.currentQuestion = question;\n//     this.store.dispatch(QuizActions.setCurrentQuestion({ question, index }));\n//   }\n//   skipQuestion() {\n//     console.log('skip');\n//     this.store.dispatch(QuizActions.skipQuestion());\n//     this.currentQuestionIndex$.subscribe((index) => {\n//       if (index && index > 10) {\n//         this.router.navigate(['/skip']);\n//       }\n//     });\n//   }\n//   updateStylesForUserResponse(responseForCurrentQuestion: string | null) {\n//     if (responseForCurrentQuestion) {\n//       this.selectedOption = responseForCurrentQuestion;\n//       this.selectedOptionClass = 'incorrect-answer';\n//       this.correctAnswerClass = 'correct-answer';\n//       this.isOptionSelected = true;\n//     } else {\n//       // Reset styles if there is no user response\n//       this.selectedOption = null;\n//       this.selectedOptionClass = null;\n//       this.correctAnswerClass = null;\n//       this.isOptionSelected = false;\n//     }\n//   }\n//   previousQuestion() {\n//     this.store.dispatch(QuizActions.previousQuestion());\n//     this.currentQuestionIndex$\n//       .pipe(take(1))\n//       .subscribe((currentQuestionIndex) => {\n//         combineLatest([this.currentQuestion$, this.userResponses$])\n//           .pipe(take(1))\n//           .subscribe(([currentQuestion, userResponses]) => {\n//             console.log('Current Question:', currentQuestion);\n//             if (currentQuestionIndex !== null) {\n//               const responseForCurrentQuestion =\n//                 userResponses[currentQuestionIndex - 1];\n//               console.log('Response for Current Question:', userResponses);\n//               // Update styles here\n//               this.updateStylesForUserResponse(responseForCurrentQuestion);\n//             }\n//           });\n//       });\n//   }\n//   nextQuestion() {\n//     this.store.dispatch(QuizActions.nextQuestion());\n//     this.currentQuestionIndex$\n//       .pipe(take(1))\n//       .subscribe((currentQuestionIndex) => {\n//         combineLatest([this.currentQuestion$, this.userResponses$])\n//           .pipe(take(1))\n//           .subscribe(([currentQuestion, userResponses]) => {\n//             console.log('Current Question:', currentQuestion);\n//             if (currentQuestionIndex !== null) {\n//               const responseForCurrentQuestion =\n//                 userResponses[currentQuestionIndex - 1];\n//               console.log(\n//                 'Response for Current Question:',\n//                 responseForCurrentQuestion\n//               );\n//               // Update styles here\n//               this.updateStylesForUserResponse(responseForCurrentQuestion);\n//             }\n//           });\n//       });\n//   }\n//   isCorrectAnswer(option: string): boolean {\n//     let correctAnswer: string | undefined;\n//     this.store\n//       .pipe(select(selectCurrentQuestion))\n//       .subscribe((currentQuestion) => {\n//         if (currentQuestion) {\n//           correctAnswer = currentQuestion.correctAnswer;\n//         }\n//       });\n//     return !!correctAnswer && correctAnswer === option;\n//   }\n//   selectOption(option: string) {\n//     if (!this.selectedOption) {\n//       this.selectedOption = option;\n//       this.isOptionSelected = false;\n//       console.log('Selected Option:', this.selectedOption);\n//       const isCorrect = this.isCorrectAnswer(option);\n//       this.store.dispatch(QuizActions.selectOption({ option, isCorrect }));\n//       if (isCorrect) {\n//         this.store.dispatch(QuizActions.updateScore({ score: 1 }));\n//       }\n//       this.selectedOptionClass = isCorrect\n//         ? 'correct-answer'\n//         : 'incorrect-answer';\n//       this.correctAnswerClass = 'correct-answer';\n//       this.isOptionSelected = true;\n//       this.userResponses$.pipe(take(1)).subscribe((userResponses) => {\n//         const userResponseIndex = userResponses.findIndex(\n//           (response) => response === option\n//         );\n//         if (userResponseIndex !== -1) {\n//           this.selectedOptionIndex$ = new Observable((observer) => {\n//             observer.next(userResponseIndex);\n//             observer.complete();\n//           });\n//         }\n//       });\n//     }\n//   }\n// }\nexport class QuizComponent {\n  // constructor(private triviaQuizService: QuizAppService) {}\n  constructor(store, router, quizService) {\n    this.store = store;\n    this.router = router;\n    this.quizService = quizService;\n    this.quizStarted = false;\n    this.score = 0;\n    this.isOptionSelected = false;\n    this.previousAllowed = true;\n    this.answered = false;\n    this.showFooter = true;\n    this.finalScoreMessage = null;\n    this.showFinalScore = false;\n    this.selectedButton = false;\n    this.imgOptions = [];\n    this.optionWindowVisible = false;\n    this.sideWindowVisible = false;\n    this.nextBtn = 'Next';\n  }\n  ngOnInit() {\n    this.store.dispatch(QuizActions.loadTrivia());\n    this.questions$ = this.store.pipe(select(selectQuestions));\n    this.selectCurrentQuestion$ = this.store.pipe(select(selectCurrentQuestion));\n    this.triviaState$ = this.store.select(selectTriviaState);\n    this.currentQuestionNumber$ = this.store.pipe(select(selectCurrentQuestionNumber));\n    this.lastQuestion$ = this.store.select('lastQuestion');\n  }\n  openSideWindow() {\n    this.sideWindowVisible = true;\n  }\n  closeSideWindow() {\n    this.sideWindowVisible = false;\n  }\n  toggleOptionWindow() {\n    this.optionWindowVisible = !this.optionWindowVisible;\n  }\n  setCurrentQuestion(index) {\n    this.store.dispatch(QuizActions.setCurrentQuestion({\n      currentQuestionNumber: index + 1\n    }));\n  }\n  triviaSubscribe() {\n    this.store.dispatch(QuizActions.loadTrivia());\n  }\n  // Replace nextQuestion, skipQuestion, and handleOption methods\n  nextQuestion() {\n    this.store.dispatch(QuizActions.nextQuestion());\n    this.isOptionSelected = false;\n    this.currentQuestionNumber$.subscribe(index => {\n      if (index && index > this.totalQuestions) {\n        this.router.navigate(['/result']);\n      }\n    });\n  }\n  skipQuestion() {\n    this.store.dispatch(QuizActions.skipQuestion());\n  }\n  handleOption(guess) {\n    this.store.dispatch(QuizActions.answerQuestion({\n      guess\n    }));\n    this.isOptionSelected = true;\n  }\n  // Restart quiz method\n  restartQuiz() {\n    this.triviaSubscribe();\n    this.store.dispatch(QuizActions.restartQuiz());\n  }\n  previousQuestion() {\n    this.store.dispatch(QuizActions.previousQuestion());\n  }\n  static #_ = this.ɵfac = function QuizComponent_Factory(t) {\n    return new (t || QuizComponent)(i0.ɵɵdirectiveInject(i1.Store), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.QuizReduxService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: QuizComponent,\n    selectors: [[\"quiz-app-quiz\"]],\n    decls: 2,\n    vars: 3,\n    consts: [[4, \"ngIf\"], [1, \"side-btn\"], [3, \"click\"], [1, \"fa\", \"fa-angle-right\"], [\"class\", \"side-window-container\", 4, \"ngIf\"], [\"class\", \"nav\", 4, \"ngIf\"], [1, \"container\"], [1, \"quiz-flex\"], [4, \"ngFor\", \"ngForOf\"], [\"class\", \"option-window\", 4, \"ngIf\"], [1, \"side-window-container\"], [1, \"side-window\", 3, \"click\"], [\"class\", \"window-flex\", 4, \"ngFor\", \"ngForOf\"], [1, \"window-flex\"], [1, \"attempted-question\"], [1, \"fa\", \"fa-check-circle\"], [1, \"nav\"], [1, \"navbar\"], [1, \"icon-button\", 3, \"disabled\", \"click\"], [1, \"fa\", \"fa-angle-left\"], [1, \"ques-btn\"], [1, \"icon-button\", 3, \"click\"], [1, \"option-panel\", 3, \"click\"], [1, \"fas\", \"fa-check-square\"], [1, \"option-window\"], [1, \"radio-btns\"], [1, \"btn-flex\"], [1, \"next-btn\", 3, \"disabled\", \"click\"], [1, \"next-btn\", 3, \"click\"], [\"type\", \"radio\", \"type\", \"radio\", \"name\", \"options\", 3, \"id\", \"disabled\", \"click\"], [\"for\", \"\", 1, \"correct\"]],\n    template: function QuizComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, QuizComponent_section_0_Template, 16, 9, \"section\", 0);\n        i0.ɵɵpipe(1, \"async\");\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 1, ctx.triviaState$));\n      }\n    },\n    dependencies: [i4.NgForOf, i4.NgIf, i4.AsyncPipe],\n    styles: [\".nav[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: space-around;\\n  align-items: center;\\n  border-bottom: 1px solid #ccc;\\n}\\n\\n.navbar[_ngcontent-%COMP%] {\\n  padding: 10px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n}\\n\\nbutton[_ngcontent-%COMP%] {\\n  padding: 10px;\\n  cursor: pointer;\\n  border: none;\\n  background-color: transparent;\\n  font-size: 16px;\\n  margin: 0 0.3rem;\\n}\\n\\n.icon-button[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  background-color: #0abab5;\\n  padding: 0.2rem 0.6rem;\\n  border-radius: 5px;\\n  margin: 0.5rem;\\n  color: #fff;\\n}\\n.icon-button[_ngcontent-%COMP%]:disabled {\\n  opacity: 0.8;\\n  cursor: not-allowed;\\n}\\n\\n.ques-btn[_ngcontent-%COMP%] {\\n  background-color: #eee;\\n  padding: 0.4rem 0.6rem;\\n  border-radius: 5px;\\n}\\n\\n.option-panel[_ngcontent-%COMP%] {\\n  border: 1px solid #999;\\n  padding: 0.35rem 0.5rem;\\n  border-radius: 5px;\\n  margin-left: 2rem;\\n}\\n\\n.container[_ngcontent-%COMP%] {\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  margin: 20px;\\n  height: 60vh;\\n}\\n.container[_ngcontent-%COMP%]   .quiz-flex[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%] {\\n  width: 35rem;\\n}\\n.container[_ngcontent-%COMP%]   .quiz-flex[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%] {\\n  list-style-type: upper-alpha;\\n  padding: 1.4rem;\\n}\\n.container[_ngcontent-%COMP%]   .quiz-flex[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%] {\\n  margin-bottom: 10px;\\n}\\n\\n.side-btn[_ngcontent-%COMP%] {\\n  position: fixed;\\n  left: 0;\\n  top: 50%;\\n  transform: translateY(-50%);\\n  background-color: #0abab5;\\n  border-radius: 0 5px 5px 0;\\n}\\n.side-btn[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\\n  border: none;\\n  color: #fff;\\n  background-color: inherit;\\n  cursor: pointer;\\n  font-size: 30px;\\n  padding: 25px 3px;\\n}\\n\\n.side-window-container[_ngcontent-%COMP%] {\\n  position: fixed;\\n  left: 0;\\n  top: 0;\\n  height: 100%;\\n  width: 100%;\\n  background-color: rgba(0, 0, 0, 0.5);\\n  z-index: 2;\\n}\\n.side-window-container[_ngcontent-%COMP%]   .side-window[_ngcontent-%COMP%] {\\n  position: fixed;\\n  left: 0;\\n  top: 0;\\n  height: 100%;\\n  width: 24rem;\\n  background-color: #fff;\\n  transition: all 0.3s ease-in-out;\\n  overflow-y: auto;\\n  animation: _ngcontent-%COMP%_righttransition 0.5s linear;\\n}\\n.side-window-container[_ngcontent-%COMP%]   .side-window[_ngcontent-%COMP%]   .window-flex[_ngcontent-%COMP%] {\\n  padding: 20px;\\n  display: flex;\\n  align-items: flex-start;\\n  justify-content: space-between;\\n  border-bottom: 1px solid #999;\\n}\\n.side-window-container[_ngcontent-%COMP%]   .side-window[_ngcontent-%COMP%]   .window-flex[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%] {\\n  color: #999;\\n  font-weight: 400;\\n  font-size: 1.1rem;\\n  width: 85%;\\n  cursor: pointer;\\n}\\n.side-window-container[_ngcontent-%COMP%]   .side-window[_ngcontent-%COMP%]   .window-flex[_ngcontent-%COMP%]   .attempted-question[_ngcontent-%COMP%] {\\n  color: #2ecc71;\\n}\\n\\n.option-window[_ngcontent-%COMP%] {\\n  position: absolute;\\n  bottom: 5px;\\n  left: 25%;\\n  display: flex;\\n  justify-content: flex-start;\\n  align-items: center;\\n  box-shadow: 0 19px 38px rgba(0, 0, 0, 0.3), 0 15px 12px rgba(0, 0, 0, 0.22);\\n  width: 25rem;\\n  height: 28vh;\\n  overflow-y: auto;\\n  animation: _ngcontent-%COMP%_uptransition 0.5s linear;\\n}\\n.option-window[_ngcontent-%COMP%]   .radio-btns[_ngcontent-%COMP%] {\\n  padding-top: 2rem;\\n}\\n.option-window[_ngcontent-%COMP%]   .radio-btns[_ngcontent-%COMP%]   div[_ngcontent-%COMP%] {\\n  padding: 0.4rem 0.9rem;\\n  font-size: 19px;\\n}\\n.option-window[_ngcontent-%COMP%]   .radio-btns[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\\n  margin-left: 0.8rem;\\n}\\n\\n@keyframes _ngcontent-%COMP%_uptransition {\\n  0% {\\n    transform: translateY(100%);\\n  }\\n  100% {\\n    transform: translateY(0);\\n  }\\n}\\n@keyframes _ngcontent-%COMP%_righttransition {\\n  0% {\\n    transform: translateX(-100%);\\n  }\\n  100% {\\n    transform: translateX(0);\\n  }\\n}\\n.selected-option[_ngcontent-%COMP%] {\\n  color: red;\\n}\\n\\n.correct[_ngcontent-%COMP%] {\\n  color: green !important;\\n}\\n\\n.inCorrect[_ngcontent-%COMP%] {\\n  color: red !important;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["Store","select","QuizActions","Observable","Router","selectCurrentQuestion","selectCurrentQuestionNumber","selectQuestions","selectTriviaState","QuizReduxService","i0","$event","QuizComponent","constructor","store","router","quizService","ngOnInit","dispatch","loadTrivia","questions$","pipe","selectCurrentQuestion$","triviaState$","currentQuestionNumber$","lastQuestion$","openSideWindow","sideWindowVisible","closeSideWindow","toggleOptionWindow","optionWindowVisible","setCurrentQuestion","index","currentQuestionNumber","triviaSubscribe","nextQuestion","isOptionSelected","subscribe","totalQuestions","navigate","skipQuestion","handleOption","guess","answerQuestion","restartQuiz","previousQuestion","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/quiz/quiz.component.ts","/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/quiz/quiz.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Question, Quiz } from './quiz.interface';\nimport { Store, select } from '@ngrx/store';\nimport { QuizActions } from '../+state/quiz-app.actions';\nimport { Observable, combineLatest, map, take } from 'rxjs';\nimport { Router } from '@angular/router';\nimport {\n  selectCurrentQuestion,\n  selectCurrentQuestionNumber,\n  selectQuestions,\n  selectTriviaState,\n} from '../+state/quiz-app.selectors';\nimport { QuizReduxService } from '../quiz-redux.service';\n\n@Component({\n  selector: 'quiz-app-quiz',\n  templateUrl: './quiz.component.html',\n  styleUrls: ['./quiz.component.scss'],\n})\n// export class QuizComponent implements OnInit {\n//   questions$!: Observable<Question[]>;\n//   currentQuestionIndex$!: Observable<number | null>;\n//   totalQuestions$!: Observable<number | null>;\n//   currentQuestion$!: Observable<Question | undefined>;\n//   correctAnswer$!: Observable<string>;\n//   currentScore$!: Observable<number>;\n//   isFirstQuestion$!: Observable<boolean>;\n//   isLastQuestion$!: Observable<boolean>;\n//   isOptionSelected = false;\n//   quizText!: string;\n//   selectedOption: string | null = null;\n//   selectedOptionClass: string | null = null;\n//   correctAnswerClass: string | null = null;\n//   selectedOptionIndex$!: Observable<number | null>;\n//   userResponses$!: Observable<(string | null)[]>;\n\n//   nextBtn = 'Next';\n//   optionWindowVisible = false;\n//   sideWindowVisible = false;\n//   currentQuestion: any;\n//   selectedOption$!: Observable<string | null>;\n//   isOptionSelected$!: Observable<boolean>;\n//   isOptionCorrect$!: Observable<boolean>;\n//   isOptionIncorrect$!: Observable<boolean>;\n//   filteredQuestions$!: Observable<Question[]>;\n//   constructor(private store: Store, private router: Router) {}\n\n//   ngOnInit(): void {\n//     this.store.dispatch(QuizActions.loadQuestions());\n//     this.currentQuestionIndex$ = this.store.pipe(\n//       select(selectCurrentQuestionIndex),\n//       map((index) => index + 1)\n//     );\n//     this.questions$ = this.store.pipe(select(selectQuestions));\n//     this.filteredQuestions$ = this.store.pipe(select(selectFilteredQuestions));\n//     this.totalQuestions$ = this.store.pipe(select(selectTotalQuestions));\n//     this.currentQuestion$ = this.store.pipe(select(selectCurrentQuestion));\n//     this.correctAnswer$ = this.store.pipe(select(selectCorrectAnswer));\n//     this.currentScore$ = this.store.pipe(select(selectCurrentScore));\n\n//     // ===================== new work ==============\n//     this.selectedOption$ = this.store.select(selectSelectedOption);\n//     this.isOptionSelected$ = this.store.select(selectIsOptionSelected);\n//     // for previous question\n//     this.isFirstQuestion$ = this.currentQuestionIndex$.pipe(\n//       map((index) => index === 1)\n//     );\n//     this.userResponses$ = this.store.pipe(select(selectUserResponses));\n//     this.isLastQuestion$ = combineLatest([\n//       this.currentQuestionIndex$,\n//       this.totalQuestions$,\n//     ]).pipe(\n//       map(([index, totalQuestions]) => {\n//         console.log('Total Questions:', totalQuestions);\n//         const lastQuestion = (index ?? 0) > (totalQuestions ?? 0);\n//         return lastQuestion;\n//       })\n//     );\n\n//     this.store\n//       .pipe(select(selectFilteredQuestions))\n//       .subscribe((filteredQuestions) => {\n//         console.log('Filtered Questions in Component:', filteredQuestions);\n//       });\n//     // ===============================\n//     this.store\n//       .pipe(select(selectSelectedOption))\n//       .subscribe((selectedOption: string | null) => {\n//         this.selectedOption = selectedOption;\n//       });\n\n//     // ================================================================\n//     //this is only to show in console and otherwise not working at all\n//     this.correctAnswer$.subscribe((correctAnswer) =>\n//       console.log('Correct Answer:', correctAnswer)\n//     );\n//     this.currentQuestionIndex$.subscribe((index) => {\n//       console.log('Current Question Index:', index);\n//     });\n//     this.currentQuestionIndex$.subscribe((index) => {\n//       if (index && index === 10) {\n//         this.nextBtn = 'Complete';\n//       }\n//     });\n//   }\n\n//   toggleOptionWindow() {\n//     this.optionWindowVisible = !this.optionWindowVisible;\n//   }\n//   openSideWindow() {\n//     this.sideWindowVisible = true;\n//     this.optionWindowVisible = false;\n//   }\n//   closeSideWindow() {\n//     this.sideWindowVisible = false;\n//   }\n//   setCurrentQuestion(question: any, index: number) {\n//     this.currentQuestion = question;\n//     this.store.dispatch(QuizActions.setCurrentQuestion({ question, index }));\n//   }\n//   skipQuestion() {\n//     console.log('skip');\n//     this.store.dispatch(QuizActions.skipQuestion());\n//     this.currentQuestionIndex$.subscribe((index) => {\n//       if (index && index > 10) {\n//         this.router.navigate(['/skip']);\n//       }\n//     });\n//   }\n\n//   updateStylesForUserResponse(responseForCurrentQuestion: string | null) {\n//     if (responseForCurrentQuestion) {\n//       this.selectedOption = responseForCurrentQuestion;\n//       this.selectedOptionClass = 'incorrect-answer';\n//       this.correctAnswerClass = 'correct-answer';\n//       this.isOptionSelected = true;\n//     } else {\n//       // Reset styles if there is no user response\n//       this.selectedOption = null;\n//       this.selectedOptionClass = null;\n//       this.correctAnswerClass = null;\n//       this.isOptionSelected = false;\n//     }\n//   }\n\n//   previousQuestion() {\n//     this.store.dispatch(QuizActions.previousQuestion());\n\n//     this.currentQuestionIndex$\n//       .pipe(take(1))\n//       .subscribe((currentQuestionIndex) => {\n//         combineLatest([this.currentQuestion$, this.userResponses$])\n//           .pipe(take(1))\n//           .subscribe(([currentQuestion, userResponses]) => {\n//             console.log('Current Question:', currentQuestion);\n//             if (currentQuestionIndex !== null) {\n//               const responseForCurrentQuestion =\n//                 userResponses[currentQuestionIndex - 1];\n//               console.log('Response for Current Question:', userResponses);\n\n//               // Update styles here\n//               this.updateStylesForUserResponse(responseForCurrentQuestion);\n//             }\n//           });\n//       });\n//   }\n\n//   nextQuestion() {\n//     this.store.dispatch(QuizActions.nextQuestion());\n\n//     this.currentQuestionIndex$\n//       .pipe(take(1))\n//       .subscribe((currentQuestionIndex) => {\n//         combineLatest([this.currentQuestion$, this.userResponses$])\n//           .pipe(take(1))\n//           .subscribe(([currentQuestion, userResponses]) => {\n//             console.log('Current Question:', currentQuestion);\n//             if (currentQuestionIndex !== null) {\n//               const responseForCurrentQuestion =\n//                 userResponses[currentQuestionIndex - 1];\n//               console.log(\n//                 'Response for Current Question:',\n//                 responseForCurrentQuestion\n//               );\n\n//               // Update styles here\n//               this.updateStylesForUserResponse(responseForCurrentQuestion);\n//             }\n//           });\n//       });\n//   }\n\n//   isCorrectAnswer(option: string): boolean {\n//     let correctAnswer: string | undefined;\n//     this.store\n//       .pipe(select(selectCurrentQuestion))\n//       .subscribe((currentQuestion) => {\n//         if (currentQuestion) {\n//           correctAnswer = currentQuestion.correctAnswer;\n//         }\n//       });\n\n//     return !!correctAnswer && correctAnswer === option;\n//   }\n\n//   selectOption(option: string) {\n//     if (!this.selectedOption) {\n//       this.selectedOption = option;\n//       this.isOptionSelected = false;\n//       console.log('Selected Option:', this.selectedOption);\n//       const isCorrect = this.isCorrectAnswer(option);\n\n//       this.store.dispatch(QuizActions.selectOption({ option, isCorrect }));\n//       if (isCorrect) {\n//         this.store.dispatch(QuizActions.updateScore({ score: 1 }));\n//       }\n\n//       this.selectedOptionClass = isCorrect\n//         ? 'correct-answer'\n//         : 'incorrect-answer';\n//       this.correctAnswerClass = 'correct-answer';\n//       this.isOptionSelected = true;\n\n//       this.userResponses$.pipe(take(1)).subscribe((userResponses) => {\n//         const userResponseIndex = userResponses.findIndex(\n//           (response) => response === option\n//         );\n//         if (userResponseIndex !== -1) {\n//           this.selectedOptionIndex$ = new Observable((observer) => {\n//             observer.next(userResponseIndex);\n//             observer.complete();\n//           });\n//         }\n//       });\n//     }\n//   }\n// }\nexport class QuizComponent implements OnInit {\n  // constructor(private triviaQuizService: QuizAppService) {}\n  constructor(\n    private store: Store<Quiz>,\n    private router: Router,\n    private quizService: QuizReduxService\n  ) {}\n\n  quizStarted = false;\n  // currentQuestionNumber!: number;\n  currentQuestionNumber$!: Observable<number | null>;\n  isFirstQuestion$!: Observable<boolean>;\n  totalQuestions!: number;\n  score = 0;\n  isOptionSelected = false;\n  lastQuestion$!: Observable<boolean>;\n  previousAllowed = true;\n  answered = false;\n  selectedOption: string | undefined;\n  showFooter = true;\n  // questions!: Question[];\n  questions$!: Observable<Question[]>;\n  finalScoreMessage: string | null = null;\n  showFinalScore = false;\n  selectedButton = false;\n  correctAnswer!: string;\n  imgOptions: any[] = [];\n  choice: any;\n  types!: string;\n  optionWindowVisible = false;\n  sideWindowVisible = false;\n  response!: string;\n  triviaState$!: Observable<Quiz>;\n  selectCurrentQuestion$!: Observable<Question>;\n  nextBtn = 'Next';\n\n  ngOnInit(): void {\n    this.store.dispatch(QuizActions.loadTrivia());\n\n    this.questions$ = this.store.pipe(select(selectQuestions));\n    this.selectCurrentQuestion$ = this.store.pipe(\n      select(selectCurrentQuestion)\n    );\n    this.triviaState$ = this.store.select(selectTriviaState);\n    this.currentQuestionNumber$ = this.store.pipe(\n      select(selectCurrentQuestionNumber)\n    );\n    this.lastQuestion$ = this.store.select('lastQuestion');\n  }\n\n  openSideWindow() {\n    this.sideWindowVisible = true;\n  }\n  closeSideWindow() {\n    this.sideWindowVisible = false;\n  }\n  toggleOptionWindow() {\n    this.optionWindowVisible = !this.optionWindowVisible;\n  }\n\n  setCurrentQuestion(index: number) {\n    this.store.dispatch(\n      QuizActions.setCurrentQuestion({ currentQuestionNumber: index + 1 })\n    );\n  }\n\n  triviaSubscribe() {\n    this.store.dispatch(QuizActions.loadTrivia());\n  }\n\n  // Replace nextQuestion, skipQuestion, and handleOption methods\n  nextQuestion(): void {\n    this.store.dispatch(QuizActions.nextQuestion());\n    this.isOptionSelected = false;\n    this.currentQuestionNumber$.subscribe((index) => {\n      if (index && index > this.totalQuestions) {\n        this.router.navigate(['/result']);\n      }\n    });\n  }\n\n  skipQuestion() {\n    this.store.dispatch(QuizActions.skipQuestion());\n  }\n\n  handleOption(guess: string) {\n    this.store.dispatch(QuizActions.answerQuestion({ guess }));\n    this.isOptionSelected = true;\n  }\n\n  // Restart quiz method\n  restartQuiz() {\n    this.triviaSubscribe();\n    this.store.dispatch(QuizActions.restartQuiz());\n  }\n  previousQuestion() {\n    this.store.dispatch(QuizActions.previousQuestion());\n  }\n}\n","<!-- <section class=\"section-1\" id=\"section-1\">\n  <main>\n    <ng-container>\n      <div\n        *ngIf=\"{\n          currentQuestion: currentQuestion$ | async,\n          totalQuestions: totalQuestions$ | async\n        } as data\"\n      >\n        <div *ngIf=\"data.currentQuestion\">\n          <h3 class=\"text-container\">Redux Angular Quiz</h3>\n          <div class=\"flex\">\n            <p>\n              {{ currentQuestionIndex$ | async }}/{{ totalQuestions$ | async }}\n            </p>\n            <p>\n              Score: {{ currentScore$ | async }}/{{ totalQuestions$ | async }}\n            </p>\n          </div>\n          <p class=\"question-style\">\n            {{ data.currentQuestion.question.text }}\n          </p>\n          <div class=\"quiz-options\">\n            <button\n              class=\"option-btn\"\n              [ngClass]=\"{\n                'selected-option': selectedOption === option,\n                'correct-answer':\n                  correctAnswerClass === 'correct-answer' &&\n                  isCorrectAnswer(option)\n              }\"\n              *ngFor=\"let option of data.currentQuestion.options; let i = index\"\n              (click)=\"selectOption(option)\"\n            >\n              <span class=\"alphabet\">{{ i + 1 }}</span>\n              {{ option }}\n            </button>\n          </div>\n          <div class=\"btn-flex\">\n            <button\n              class=\"next-btn\"\n              (click)=\"previousQuestion()\"\n              [disabled]=\"isFirstQuestion$ | async\"\n            >\n              Previous\n            </button>\n            <button class=\"next-btn\" (click)=\"skipQuestion()\">Skip</button>\n           <button\n        class=\"next-btn\"\n        (click)=\"nextQuestion()\"\n        [disabled]=\"!isOptionSelected\"\n      >\n        {{ nextBtn }}\n      </button>\n          </div>\n        </div>\n      </div>\n    </ng-container>\n  </main>\n</section> -->\n<!-- <section\n  *ngIf=\"{\n    currentQuestion: currentQuestion$ | async,\n    totalQuestions: totalQuestions$ | async\n  } as data\"\n>\n  <div class=\"side-btn\">\n    <button (click)=\"openSideWindow()\">\n      <i class=\"fa fa-angle-right\"></i>\n    </button>\n  </div>\n  <div (click)=\"closeSideWindow()\">\n    <div *ngIf=\"sideWindowVisible\" class=\"side-window-container\">\n      <div class=\"side-window\" (click)=\"$event.stopPropagation()\">\n        <div\n          *ngFor=\"let question of questions$ | async; let i = index\"\n          class=\"window-flex\"\n        >\n          <h3 (click)=\"setCurrentQuestion(question, i)\">\n            {{ question.question.text }}\n          </h3>\n          <div class=\"attempted-question\">\n            <i class=\"fa fa-check-circle\"></i>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"nav\" *ngIf=\"triviaState$ | async as trivia\">\n    <div class=\"navbar\">\n      <button\n        class=\"icon-button\"\n        (click)=\"previousQuestion()\"\n        [disabled]=\"isFirstQuestion$ | async\"\n      >\n        <i class=\"fa fa-angle-left\"></i>\n      </button>\n      <button class=\"ques-btn\">\n        Question {{ currentQuestionIndex$ | async }}/{{\n          totalQuestions$ | async\n        }}\n      </button>\n      <button class=\"icon-button\" (click)=\"nextQuestion()\">\n        <i class=\"fa fa-angle-right\"></i>\n      </button>\n\n      <button class=\"option-panel\" (click)=\"toggleOptionWindow()\">\n        <i class=\"fas fa-check-square\"></i>\n      </button>\n    </div>\n  </div>\n  <div class=\"container\">\n    <div class=\"quiz-flex\">\n      <h3>\n        {{ data.currentQuestion?.question?.text }}\n      </h3>\n      <ul>\n        <li *ngFor=\"let option of data.currentQuestion?.options; let i = index\">\n          {{ option }}\n        </li>\n      </ul>\n    </div>\n  </div>\n  <div *ngIf=\"optionWindowVisible\" class=\"option-window\">\n    <div class=\"radio-btns\">\n      <div *ngFor=\"let option of data.currentQuestion?.options; let i = index\">\n        <input\n          type=\"radio\"\n          type=\"radio\"\n          name=\"options\"\n          id=\"{{ 'option' + i }}\"\n          (click)=\"selectOption(option)\"\n          [checked]=\"selectedOption === option\"\n          [disabled]=\"isOptionSelected\"\n        />\n        <label\n          [ngClass]=\"{\n            'selected-option': selectedOption === option,\n            'correct-answer':\n              correctAnswerClass === 'correct-answer' && isCorrectAnswer(option)\n          }\"\n          [for]=\"'option' + i\"\n          >{{ option }}</label\n        >\n      </div>\n      <div class=\"btn-flex\">\n        <button\n          class=\"next-btn\"\n          (click)=\"previousQuestion()\"\n          [disabled]=\"isFirstQuestion$ | async\"\n        >\n          Previous\n        </button>\n        <button\n          class=\"next-btn\"\n          (click)=\"nextQuestion()\"\n          [disabled]=\"(isOptionSelected$ | async) === false\"\n        >\n          {{ nextBtn }}\n        </button>\n      </div>\n    </div>\n  </div>\n</section> -->\n\n<section *ngIf=\"triviaState$ | async as trivia\">\n  <div class=\"side-btn\">\n    <button (click)=\"openSideWindow()\">\n      <i class=\"fa fa-angle-right\"></i>\n    </button>\n  </div>\n  <div (click)=\"closeSideWindow()\">\n    <div *ngIf=\"sideWindowVisible\" class=\"side-window-container\">\n      <div class=\"side-window\" (click)=\"$event.stopPropagation()\">\n        <div\n          *ngFor=\"let question of trivia.questions; let i = index\"\n          class=\"window-flex\"\n        >\n          <h3 (click)=\"setCurrentQuestion(i)\">\n            {{ question.question.text }}\n          </h3>\n          <div class=\"attempted-question\">\n            <i class=\"fa fa-check-circle\"></i>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"nav\" *ngIf=\"triviaState$ | async as trivia\">\n    <div class=\"navbar\">\n      <button\n        class=\"icon-button\"\n        (click)=\"previousQuestion()\"\n        [disabled]=\"!previousAllowed\"\n      >\n        <i class=\"fa fa-angle-left\"></i>\n      </button>\n      <button class=\"ques-btn\">\n        Question {{ trivia.currentQuestionNumber }}/{{ trivia.totalQuestions }}\n      </button>\n      <button class=\"icon-button\" (click)=\"nextQuestion()\">\n        <i class=\"fa fa-angle-right\"></i>\n      </button>\n\n      <button class=\"option-panel\" (click)=\"toggleOptionWindow()\">\n        <i class=\"fas fa-check-square\"></i>\n      </button>\n    </div>\n  </div>\n  <div class=\"container\">\n    <div class=\"quiz-flex\">\n      <h3>\n        {{ (selectCurrentQuestion$ | async)?.question?.text }}\n      </h3>\n      <ul>\n        <li *ngFor=\"let option of trivia.options; let i = index\">\n          {{ option }}\n        </li>\n      </ul>\n    </div>\n  </div>\n  <div *ngIf=\"optionWindowVisible\" class=\"option-window\">\n    <div class=\"radio-btns\">\n      <div *ngFor=\"let option of trivia.options; let i = index\">\n        <input\n          type=\"radio\"\n          type=\"radio\"\n          name=\"options\"\n          id=\"{{ 'option' + i }}\"\n          (click)=\"handleOption(option)\"\n          [disabled]=\"response\"\n        />\n        <label class=\"correct\" for=\"\">{{ option }}</label>\n      </div>\n      <div class=\"btn-flex\">\n        <button\n          class=\"next-btn\"\n          (click)=\"previousQuestion()\"\n          [disabled]=\"!previousAllowed\"\n        >\n          Previous\n        </button>\n        <button class=\"next-btn\" (click)=\"nextQuestion()\">\n          {{ nextBtn }}\n        </button>\n      </div>\n    </div>\n  </div>\n</section>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}