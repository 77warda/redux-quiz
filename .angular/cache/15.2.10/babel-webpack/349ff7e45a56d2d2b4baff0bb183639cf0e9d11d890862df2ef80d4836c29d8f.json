{"ast":null,"code":"import { createReducer, on } from '@ngrx/store';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nexport const QUIZ_APP_FEATURE_KEY = 'quizApp';\nexport const initialState = {\n  currentQuestionNumber: 1,\n  totalQuestions: 1,\n  score: 0,\n  currentQuestion: '',\n  options: [],\n  selectedOption: undefined,\n  correctAnswer: '',\n  response: '',\n  questions: [],\n  lastQuestion: false,\n  userResponses: [],\n  categories: {},\n  timer: 0,\n  timerInterval: null\n};\nexport const quizReducer = createReducer(initialState, on(QuizApiActions.loadQuestionsSuccess, (state, {\n  quizQuestions\n}) => ({\n  ...state,\n  questions: quizQuestions,\n  totalQuestions: quizQuestions.length,\n  currentQuestion: quizQuestions[state.currentQuestionNumber - 1].question.text,\n  options: quizQuestions[state.currentQuestionNumber - 1].incorrectAnswers.concat(quizQuestions[state.currentQuestionNumber - 1].correctAnswer).sort(),\n  lastQuestion: quizQuestions.length === state.totalQuestions\n})), on(QuizActions.nextQuestion, state => {\n  const currentQuestionIndex = state.currentQuestionNumber;\n  const nextQuestion = state.questions[currentQuestionIndex];\n  const currentResponse = state.userResponses[currentQuestionIndex] || '';\n  const correctAnswer = nextQuestion.correctAnswer;\n  if (state.currentQuestionNumber < state.totalQuestions) {\n    const nextQuestion = state.questions[state.currentQuestionNumber];\n    console.log('Last Question in reducer:', nextQuestion);\n    // Save the response before moving to the next question\n    const updatedUserResponses = [...state.userResponses];\n    updatedUserResponses[currentQuestionIndex] = currentResponse;\n    return {\n      ...state,\n      currentQuestionNumber: state.currentQuestionNumber + 1,\n      options: nextQuestion.incorrectAnswers.concat(nextQuestion.correctAnswer).sort(),\n      selectedOption: undefined,\n      lastQuestion: false,\n      response: currentResponse,\n      userResponses: updatedUserResponses,\n      correctAnswer\n    };\n  } else {\n    console.log('Setting lastQuestion to true in reducer');\n    return {\n      ...state,\n      showFooter: false,\n      lastQuestion: true,\n      response: currentResponse,\n      correctAnswer: ''\n    };\n  }\n}), on(QuizActions.skipQuestion, state => {\n  if (state.currentQuestionNumber < state.totalQuestions) {\n    const nextQuestion = state.questions[state.currentQuestionNumber];\n    return {\n      ...state,\n      currentQuestionNumber: state.currentQuestionNumber + 1,\n      options: nextQuestion.incorrectAnswers.concat(nextQuestion.correctAnswer).sort(),\n      selectedOption: undefined\n    };\n  } else {\n    return {\n      ...state,\n      showFooter: false\n    };\n  }\n}), on(QuizActions.previousQuestion, state => {\n  if (state.currentQuestionNumber > 1) {\n    const previousQuestionIndex = state.currentQuestionNumber - 2;\n    const previousQuestion = state.questions[previousQuestionIndex];\n    const response = state.userResponses[previousQuestionIndex] || '';\n    const correctAnswer = previousQuestion.correctAnswer;\n    console.log(previousQuestionIndex);\n    return {\n      ...state,\n      currentQuestionNumber: state.currentQuestionNumber - 1,\n      options: previousQuestion.incorrectAnswers.concat(previousQuestion.correctAnswer).sort(),\n      selectedOption: response || undefined,\n      response,\n      correctAnswer\n    };\n  } else {\n    return {\n      ...state\n    };\n  }\n}), on(QuizActions.selectedOption, (state, {\n  selectedOption\n}) => {\n  const correctAnswer = state.questions[state.currentQuestionNumber - 1].correctAnswer;\n  const updatedResponses = [...state.userResponses];\n  updatedResponses[state.currentQuestionNumber - 1] = selectedOption;\n  if (!state.response) {\n    const score = selectedOption === correctAnswer ? state.score + 1 : state.score;\n    return {\n      ...state,\n      score,\n      response: selectedOption,\n      correctAnswer,\n      userResponses: updatedResponses\n    };\n  } else {\n    return {\n      ...state,\n      response: '',\n      userResponses: updatedResponses\n    };\n  }\n}), on(QuizActions.restartQuiz, state => ({\n  ...state,\n  ...initialState\n})), on(QuizApiActions.loadCategoriesSuccess, (state, {\n  categories\n}) => ({\n  ...state,\n  categories\n})), on(QuizActions.setCurrentQuestion, (state, {\n  currentQuestionNumber\n}) => {\n  if (currentQuestionNumber > 0 && currentQuestionNumber <= state.questions.length) {\n    const currentQuestion = state.questions[currentQuestionNumber - 1];\n    return {\n      ...state,\n      currentQuestion: currentQuestion.question.text,\n      options: currentQuestion.incorrectAnswers.concat(currentQuestion.correctAnswer).sort(),\n      currentQuestionNumber: currentQuestionNumber\n    };\n  }\n  return state;\n}));","map":{"version":3,"mappings":"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","names":["createReducer","on","QuizActions","QuizApiActions","QUIZ_APP_FEATURE_KEY","initialState","currentQuestionNumber","totalQuestions","score","currentQuestion","options","selectedOption","undefined","correctAnswer","response","questions","lastQuestion","userResponses","categories","timer","timerInterval","quizReducer","loadQuestionsSuccess","state","quizQuestions","length","question","text","incorrectAnswers","concat","sort","nextQuestion","currentQuestionIndex","currentResponse","console","log","updatedUserResponses","showFooter","skipQuestion","previousQuestion","previousQuestionIndex","updatedResponses","restartQuiz","loadCategoriesSuccess","setCurrentQuestion"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/+state/quiz-app.reducer.ts"],"sourcesContent":["import { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { createReducer, on } from '@ngrx/store';\n\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport { QuizAppEntity } from './quiz-app.models';\nimport { Quiz } from '../quiz/quiz.interface';\n\nexport const QUIZ_APP_FEATURE_KEY = 'quizApp';\n\nexport const initialState: Quiz = {\n  currentQuestionNumber: 1,\n  totalQuestions: 1,\n  score: 0,\n  currentQuestion: '',\n  options: [],\n  selectedOption: undefined,\n  correctAnswer: '',\n  response: '',\n  questions: [],\n  lastQuestion: false,\n  userResponses: [],\n  categories: {},\n  timer: 0,\n  timerInterval: null,\n};\n\nexport const quizReducer = createReducer(\n  initialState,\n  on(QuizApiActions.loadQuestionsSuccess, (state, { quizQuestions }) => ({\n    ...state,\n    questions: quizQuestions,\n    totalQuestions: quizQuestions.length,\n    currentQuestion:\n      quizQuestions[state.currentQuestionNumber - 1].question.text,\n    options: quizQuestions[state.currentQuestionNumber - 1].incorrectAnswers\n      .concat(quizQuestions[state.currentQuestionNumber - 1].correctAnswer)\n      .sort(),\n    lastQuestion: quizQuestions.length === state.totalQuestions,\n  })),\n  on(QuizActions.nextQuestion, (state) => {\n    const currentQuestionIndex = state.currentQuestionNumber;\n    const nextQuestion = state.questions[currentQuestionIndex];\n    const currentResponse = state.userResponses[currentQuestionIndex] || '';\n    const correctAnswer = nextQuestion.correctAnswer;\n    if (state.currentQuestionNumber < state.totalQuestions) {\n      const nextQuestion = state.questions[state.currentQuestionNumber];\n      console.log('Last Question in reducer:', nextQuestion);\n\n      // Save the response before moving to the next question\n      const updatedUserResponses = [...state.userResponses];\n      updatedUserResponses[currentQuestionIndex] = currentResponse;\n      return {\n        ...state,\n        currentQuestionNumber: state.currentQuestionNumber + 1,\n        options: nextQuestion.incorrectAnswers\n          .concat(nextQuestion.correctAnswer)\n          .sort(),\n        selectedOption: undefined,\n        lastQuestion: false,\n        response: currentResponse,\n        userResponses: updatedUserResponses,\n        correctAnswer,\n      };\n    } else {\n      console.log('Setting lastQuestion to true in reducer');\n      return {\n        ...state,\n        showFooter: false,\n        lastQuestion: true,\n        response: currentResponse,\n        correctAnswer: '',\n      };\n    }\n  }),\n  on(QuizActions.skipQuestion, (state) => {\n    if (state.currentQuestionNumber < state.totalQuestions) {\n      const nextQuestion = state.questions[state.currentQuestionNumber];\n      return {\n        ...state,\n        currentQuestionNumber: state.currentQuestionNumber + 1,\n        options: nextQuestion.incorrectAnswers\n          .concat(nextQuestion.correctAnswer)\n          .sort(),\n        selectedOption: undefined,\n      };\n    } else {\n      return { ...state, showFooter: false };\n    }\n  }),\n  on(QuizActions.previousQuestion, (state) => {\n    if (state.currentQuestionNumber > 1) {\n      const previousQuestionIndex = state.currentQuestionNumber - 2;\n      const previousQuestion = state.questions[previousQuestionIndex];\n      const response = state.userResponses[previousQuestionIndex] || '';\n      const correctAnswer = previousQuestion.correctAnswer;\n      console.log(previousQuestionIndex);\n      return {\n        ...state,\n        currentQuestionNumber: state.currentQuestionNumber - 1,\n        options: previousQuestion.incorrectAnswers\n          .concat(previousQuestion.correctAnswer)\n          .sort(),\n        selectedOption: response || undefined,\n        response,\n        correctAnswer,\n      };\n    } else {\n      return { ...state };\n    }\n  }),\n  on(QuizActions.selectedOption, (state, { selectedOption }) => {\n    const correctAnswer =\n      state.questions[state.currentQuestionNumber - 1].correctAnswer;\n    const updatedResponses = [...state.userResponses];\n    updatedResponses[state.currentQuestionNumber - 1] = selectedOption;\n    if (!state.response) {\n      const score =\n        selectedOption === correctAnswer ? state.score + 1 : state.score;\n      return {\n        ...state,\n        score,\n        response: selectedOption,\n        correctAnswer,\n        userResponses: updatedResponses,\n      };\n    } else {\n      return {\n        ...state,\n        response: '',\n        userResponses: updatedResponses,\n      };\n    }\n  }),\n  on(QuizActions.restartQuiz, (state) => ({\n    ...state,\n    ...initialState,\n  })),\n  on(QuizApiActions.loadCategoriesSuccess, (state, { categories }) => ({\n    ...state,\n    categories,\n  })),\n  on(QuizActions.setCurrentQuestion, (state, { currentQuestionNumber }) => {\n    if (\n      currentQuestionNumber > 0 &&\n      currentQuestionNumber <= state.questions.length\n    ) {\n      const currentQuestion = state.questions[currentQuestionNumber - 1];\n      return {\n        ...state,\n        currentQuestion: currentQuestion.question.text,\n        options: currentQuestion.incorrectAnswers\n          .concat(currentQuestion.correctAnswer)\n          .sort(),\n        currentQuestionNumber: currentQuestionNumber,\n      };\n    }\n    return state;\n  })\n);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}