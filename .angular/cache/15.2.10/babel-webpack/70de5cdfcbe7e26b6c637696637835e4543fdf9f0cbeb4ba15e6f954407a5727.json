{"ast":null,"code":"import { createEffect, Actions, ofType } from '@ngrx/effects';\nimport { catchError, of, mergeMap } from 'rxjs';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../quiz-redux.service\";\nexport class QuizAppEffects {\n  constructor(actions$, triviaService // Inject your trivia service\n  ) {\n    this.actions$ = actions$;\n    this.triviaService = triviaService;\n    // loadQuestions$ = createEffect(() =>\n    //   this.actions$.pipe(\n    //     ofType(QuizActions.loadQuestions),\n    //     // tap(() => console.log('Fetching trivia questions...')),\n    //     switchMap(() =>\n    //       this.triviaService.getTriviaQuestion().pipe(\n    //         map((triviaResponse: any) => {\n    //           console.log(\n    //             'Trivia questions received from Effects:',\n    //             triviaResponse\n    //           );\n    //           if (triviaResponse) {\n    //             const questions: Question[] = triviaResponse.map(\n    //               (questionItem: any) => ({\n    //                 question: questionItem.question.text,\n    //                 options: this.shuffleArray([\n    //                   ...questionItem.incorrectAnswers,\n    //                   questionItem.correctAnswer,\n    //                 ]),\n    //                 correctAnswer: questionItem.correctAnswer,\n    //               })\n    //             );\n    //             // Dispatch the loadQuestionsSuccess action with the correct payload\n    //             return QuizActions.loadQuestionsSuccess({ questions });\n    //           } else {\n    //             console.error('Invalid response structure');\n    //             return QuizActions.loadQuestionsFailure({\n    //               error: 'Invalid response structure',\n    //             });\n    //           }\n    //         }),\n    //         catchError((error) => of(QuizActions.loadQuestionsFailure({ error })))\n    //       )\n    //     )\n    //   )\n    // );\n    // shuffleArray(array: string[]): string[] {\n    //   return array.sort(() => Math.random() - 0.6);\n    // }\n    this.loadTrivia$ = createEffect(() => this.actions$.pipe(ofType(QuizActions.loadQuestionsSuccess), mergeMap(() => this.triviaService.getTriviaQuestion().pipe())));\n    this.questions = triviaResponse.map(questionItem => ({\n      question: questionItem.question.text,\n      options: this.shuffleArray([...questionItem.incorrectAnswers, questionItem.correctAnswer]),\n      correctAnswer: questionItem.correctAnswer\n    }));\n  }\n  map() {}\n  static #_ = this.ɵfac = function QuizAppEffects_Factory(t) {\n    return new (t || QuizAppEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.QuizReduxService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuizAppEffects,\n    factory: QuizAppEffects.ɵfac\n  });\n}\nquestions => QuizActions.loadQuestionsSuccess({\n  questions\n});\ncatchError(error => {\n  console.error('Error in loadTodos effect:', error);\n  return of(QuizApiActions.loadQuizFailure({\n    error\n  }));\n});\n;","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,OAAO,EAAEC,MAAM,QAAQ,eAAe;AAC7D,SAAoBC,UAAU,EAAEC,EAAE,EAAOC,QAAQ,QAAa,MAAM;AACpE,SAASC,WAAW,QAAQ,oBAAoB;AAEhD,SAASC,gBAAgB,QAAQ,uBAAuB;;;;AAIxD,OAAM,MAAOC,cAAc;EACzBC,YACUC,QAAiB,EACjBC,aAA+B,CAAC;EAAA;IADhC,aAAQ,GAARD,QAAQ;IACR,kBAAa,GAAbC,aAAa;IAGvB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA,gBAAW,GAAGX,YAAY,CAAC,MACzB,IAAI,CAACU,QAAQ,CAACE,IAAI,CAChBV,MAAM,CAACI,WAAW,CAACO,oBAAoB,CAAC,EACxCR,QAAQ,CAAC,MACP,IAAI,CAACM,aAAa,CAACG,iBAAiB,EAAE,CAACF,IAAI,EAAC;IACpC,cAAS,GAAeG,cAAc,CAACC,GAAG,CAC/BC,YAAiB,KAAM;MACtBC,QAAQ,EAAED,YAAY,CAACC,QAAQ,CAACC,IAAI;MACpCC,OAAO,EAAE,IAAI,CAACC,YAAY,CAAC,CACzB,GAAGJ,YAAY,CAACK,gBAAgB,EAChCL,YAAY,CAACM,aAAa,CAC3B,CAAC;MACFA,aAAa,EAAEN,YAAY,CAACM;KAC7B,CAAC,CACH;EA1DpB;EA2DKP,GAAG,IAAC;EAAC;qBA/DFR,cAAc;EAAA;EAAA;WAAdA,cAAc;IAAAgB,SAAdhB,cAAc;EAAA;;AA+DZiB,SAAS,IAAKnB,WAAW,CAACO,oBAAoB,CAAC;EAAEY;AAAS,CAAE,CAAC;AAClEtB,UAAU,CAAEuB,KAAK,IAAI;EACnBC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;EAClD,OAAOtB,EAAE,CAACwB,cAAc,CAACC,eAAe,CAAC;IAAEH;EAAK,CAAE,CAAC,CAAC;AACtD,CAAC,CAAC;AAIT","names":["createEffect","Actions","ofType","catchError","of","mergeMap","QuizActions","QuizReduxService","QuizAppEffects","constructor","actions$","triviaService","pipe","loadQuestionsSuccess","getTriviaQuestion","triviaResponse","map","questionItem","question","text","options","shuffleArray","incorrectAnswers","correctAnswer","factory","questions","error","console","QuizApiActions","loadQuizFailure"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/+state/quiz-app.effects.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport { createEffect, Actions, ofType } from '@ngrx/effects';\nimport { switchMap, catchError, of, map, mergeMap, tap } from 'rxjs';\nimport { QuizActions } from './quiz-app.actions';\nimport * as QuizAppFeature from './quiz-app.reducer';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport { Question } from '../quiz/quiz.interface';\n\n@Injectable()\nexport class QuizAppEffects {\n  constructor(\n    private actions$: Actions,\n    private triviaService: QuizReduxService // Inject your trivia service\n  ) {}\n\n  // loadQuestions$ = createEffect(() =>\n  //   this.actions$.pipe(\n  //     ofType(QuizActions.loadQuestions),\n  //     // tap(() => console.log('Fetching trivia questions...')),\n  //     switchMap(() =>\n  //       this.triviaService.getTriviaQuestion().pipe(\n  //         map((triviaResponse: any) => {\n  //           console.log(\n  //             'Trivia questions received from Effects:',\n  //             triviaResponse\n  //           );\n\n  //           if (triviaResponse) {\n  //             const questions: Question[] = triviaResponse.map(\n  //               (questionItem: any) => ({\n  //                 question: questionItem.question.text,\n  //                 options: this.shuffleArray([\n  //                   ...questionItem.incorrectAnswers,\n  //                   questionItem.correctAnswer,\n  //                 ]),\n  //                 correctAnswer: questionItem.correctAnswer,\n  //               })\n  //             );\n\n  //             // Dispatch the loadQuestionsSuccess action with the correct payload\n  //             return QuizActions.loadQuestionsSuccess({ questions });\n  //           } else {\n  //             console.error('Invalid response structure');\n  //             return QuizActions.loadQuestionsFailure({\n  //               error: 'Invalid response structure',\n  //             });\n  //           }\n  //         }),\n  //         catchError((error) => of(QuizActions.loadQuestionsFailure({ error })))\n  //       )\n  //     )\n  //   )\n  // );\n\n  // shuffleArray(array: string[]): string[] {\n  //   return array.sort(() => Math.random() - 0.6);\n  // }\n  loadTrivia$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(QuizActions.loadQuestionsSuccess),\n      mergeMap(() =>\n        this.triviaService.getTriviaQuestion().pipe(\n          const questions: Question[] = triviaResponse.map(\n                          (questionItem: any) => ({\n                            question: questionItem.question.text,\n                            options: this.shuffleArray([\n                              ...questionItem.incorrectAnswers,\n                              questionItem.correctAnswer,\n                            ]),\n                            correctAnswer: questionItem.correctAnswer,\n                          })\n                        );\n          map((questions) => QuizActions.loadQuestionsSuccess({ questions })),\n          catchError((error) => {\n            console.error('Error in loadTodos effect:', error);\n            return of(QuizApiActions.loadQuizFailure({ error }));\n          })\n        )\n      )\n    )\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}