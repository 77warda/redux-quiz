{"ast":null,"code":"import { createEffect, Actions, ofType } from '@ngrx/effects';\nimport { catchError, of, map, mergeMap, tap } from 'rxjs';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport { Store } from '@ngrx/store';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../quiz-redux.service\";\nimport * as i3 from \"@ngrx/store\";\nexport class QuizAppEffects {\n  constructor(actions$, triviaService, store) {\n    this.actions$ = actions$;\n    this.triviaService = triviaService;\n    this.store = store;\n    // loadTrivia$ = createEffect(() =>\n    //   this.actions$.pipe(\n    //     ofType(QuizActions.loadQuestions),\n    //     mergeMap(() =>\n    //       this.triviaService.getTriviaQuestion().pipe(\n    //         map((questions: any) => {\n    //           console.log('Trivia questions received from Effects:', questions);\n    //           return QuizApiActions.loadQuestionsSuccess({ questions });\n    //         }),\n    //         catchError((error) => {\n    //           console.error('Error in loadTodos effect:', error);\n    //           return of(QuizApiActions.loadQuestionsFailure({ error }));\n    //         })\n    //       )\n    //     )\n    //   )\n    // );\n    // loadCategories$ = createEffect(() =>\n    //   this.actions$.pipe(\n    //     ofType(QuizActions.loadCategories),\n    //     tap(),\n    //     switchMap(() =>\n    //       this.triviaService.getcategories().pipe(\n    //         map((categories) => {\n    //           // console.log('Trivia categories received from Effects:', categories);\n    //           return QuizApiActions.loadCategoriesSuccess({ categories });\n    //         }),\n    //         catchError((error) =>\n    //           of(QuizApiActions.loadCategoriesFailure({ error }))\n    //         )\n    //       )\n    //     )\n    //   )\n    // );\n    this.loadTrivia$ = createEffect(() => this.actions$.pipe(ofType(QuizActions.submitForm), mergeMap(action => this.triviaService.getTrivia(action.formValue).pipe(tap(data => {\n      console.log('questions:', data);\n    }), map(questions => QuizApiActions.loadQuestionsSuccess({\n      questions\n    })), catchError(error => {\n      console.error('Error in loadTodos effect:', error);\n      return of(QuizApiActions.loadQuestionsFailure({\n        error\n      }));\n    })))));\n    this.loadCategories$ = createEffect(() => this.actions$.pipe(ofType(QuizActions.loadCategories), mergeMap(() => this.triviaService.getcategories().pipe(map(categories => QuizApiActions.loadCategoriesSuccess({\n      categories\n    })), catchError(error => of(QuizApiActions.loadCategoriesFailure({\n      error\n    })))))));\n  }\n  static #_ = this.ɵfac = function QuizAppEffects_Factory(t) {\n    return new (t || QuizAppEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.QuizReduxService), i0.ɵɵinject(i3.Store));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuizAppEffects,\n    factory: QuizAppEffects.ɵfac\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,OAAO,EAAEC,MAAM,QAAQ,eAAe;AAC7D,SAEEC,UAAU,EACVC,EAAE,EACFC,GAAG,EACHC,QAAQ,EACRC,GAAG,QAEE,MAAM;AACb,SAASC,WAAW,QAAQ,oBAAoB;AAChD,SAASC,cAAc,QAAQ,oBAAoB;AAEnD,SAASC,gBAAgB,QAAQ,uBAAuB;AAExD,SAASC,KAAK,QAAgB,aAAa;;;;;AAO3C,OAAM,MAAOC,cAAc;EACzBC,YACUC,QAAiB,EACjBC,aAA+B,EAC/BC,KAAY;IAFZ,aAAQ,GAARF,QAAQ;IACR,kBAAa,GAAbC,aAAa;IACb,UAAK,GAALC,KAAK;IAGf;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,gBAAW,GAAGhB,YAAY,CAAC,MACzB,IAAI,CAACc,QAAQ,CAACG,IAAI,CAChBf,MAAM,CAACM,WAAW,CAACU,UAAU,CAAC,EAC9BZ,QAAQ,CAAEa,MAAM,IACd,IAAI,CAACJ,aAAa,CAACK,SAAS,CAACD,MAAM,CAACE,SAAS,CAAC,CAACJ,IAAI,CACjDV,GAAG,CAAEe,IAAI,IAAI;MACXC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEF,IAAI,CAAC;IACjC,CAAC,CAAC,EACFjB,GAAG,CAAEoB,SAAS,IACZhB,cAAc,CAACiB,oBAAoB,CAAC;MAAED;IAAS,CAAE,CAAC,CACnD,EACDtB,UAAU,CAAEwB,KAAK,IAAI;MACnBJ,OAAO,CAACI,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,OAAOvB,EAAE,CAACK,cAAc,CAACmB,oBAAoB,CAAC;QAAED;MAAK,CAAE,CAAC,CAAC;IAC3D,CAAC,CAAC,CACH,CACF,CACF,CACF;IACD,oBAAe,GAAG3B,YAAY,CAAC,MAC7B,IAAI,CAACc,QAAQ,CAACG,IAAI,CAChBf,MAAM,CAACM,WAAW,CAACqB,cAAc,CAAC,EAClCvB,QAAQ,CAAC,MACP,IAAI,CAACS,aAAa,CAACe,aAAa,EAAE,CAACb,IAAI,CACrCZ,GAAG,CAAE0B,UAAU,IACbtB,cAAc,CAACuB,qBAAqB,CAAC;MAAED;IAAU,CAAE,CAAC,CACrD,EACD5B,UAAU,CAAEwB,KAAK,IACfvB,EAAE,CAACK,cAAc,CAACwB,qBAAqB,CAAC;MAAEN;IAAK,CAAE,CAAC,CAAC,CACpD,CACF,CACF,CACF,CACF;EAtEE;EAAC;qBALOf,cAAc;EAAA;EAAA;WAAdA,cAAc;IAAAsB,SAAdtB,cAAc;EAAA","names":["createEffect","Actions","ofType","catchError","of","map","mergeMap","tap","QuizActions","QuizApiActions","QuizReduxService","Store","QuizAppEffects","constructor","actions$","triviaService","store","pipe","submitForm","action","getTrivia","formValue","data","console","log","questions","loadQuestionsSuccess","error","loadQuestionsFailure","loadCategories","getcategories","categories","loadCategoriesSuccess","loadCategoriesFailure","factory"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/+state/quiz-app.effects.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport { createEffect, Actions, ofType } from '@ngrx/effects';\nimport {\n  switchMap,\n  catchError,\n  of,\n  map,\n  mergeMap,\n  tap,\n  withLatestFrom,\n} from 'rxjs';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport * as QuizAppFeature from './quiz-app.reducer';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport { Question } from '../quiz/quiz.interface';\nimport { Store, select } from '@ngrx/store';\nimport {\n  selectSelectedCategory,\n  selectSelectedDifficulty,\n} from './quiz-app.selectors';\n\n@Injectable()\nexport class QuizAppEffects {\n  constructor(\n    private actions$: Actions,\n    private triviaService: QuizReduxService,\n    private store: Store\n  ) {}\n\n  // loadTrivia$ = createEffect(() =>\n  //   this.actions$.pipe(\n  //     ofType(QuizActions.loadQuestions),\n  //     mergeMap(() =>\n  //       this.triviaService.getTriviaQuestion().pipe(\n  //         map((questions: any) => {\n  //           console.log('Trivia questions received from Effects:', questions);\n  //           return QuizApiActions.loadQuestionsSuccess({ questions });\n  //         }),\n  //         catchError((error) => {\n  //           console.error('Error in loadTodos effect:', error);\n  //           return of(QuizApiActions.loadQuestionsFailure({ error }));\n  //         })\n  //       )\n  //     )\n  //   )\n  // );\n\n  // loadCategories$ = createEffect(() =>\n  //   this.actions$.pipe(\n  //     ofType(QuizActions.loadCategories),\n  //     tap(),\n  //     switchMap(() =>\n  //       this.triviaService.getcategories().pipe(\n  //         map((categories) => {\n  //           // console.log('Trivia categories received from Effects:', categories);\n  //           return QuizApiActions.loadCategoriesSuccess({ categories });\n  //         }),\n  //         catchError((error) =>\n  //           of(QuizApiActions.loadCategoriesFailure({ error }))\n  //         )\n  //       )\n  //     )\n  //   )\n  // );\n  loadTrivia$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(QuizActions.submitForm),\n      mergeMap((action) =>\n        this.triviaService.getTrivia(action.formValue).pipe(\n          tap((data) => {\n            console.log('questions:', data);\n          }),\n          map((questions) =>\n            QuizApiActions.loadQuestionsSuccess({ questions })\n          ),\n          catchError((error) => {\n            console.error('Error in loadTodos effect:', error);\n            return of(QuizApiActions.loadQuestionsFailure({ error }));\n          })\n        )\n      )\n    )\n  );\n  loadCategories$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(QuizActions.loadCategories),\n      mergeMap(() =>\n        this.triviaService.getcategories().pipe(\n          map((categories) =>\n            QuizApiActions.loadCategoriesSuccess({ categories })\n          ),\n          catchError((error) =>\n            of(QuizApiActions.loadCategoriesFailure({ error }))\n          )\n        )\n      )\n    )\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}