{"ast":null,"code":"import { createReducer, on } from '@ngrx/store';\nimport { QuizActions } from './quiz-app.actions';\nexport const QUIZ_APP_FEATURE_KEY = 'quizApp';\nexport const initialState = {\n  totalQuestions: 0,\n  current_score: 0,\n  total_score: 0,\n  questions: [],\n  options: [],\n  currentQuestion: '',\n  current_Question_Index: 0,\n  selectedOption: '',\n  isOptionSelected: false,\n  selectedOptionClass: '',\n  correctAnswerClass: '',\n  userResponses: [],\n  isFirstQuestion$: false\n};\nexport const quizAppReducer = createReducer(initialState, on(QuizActions.loadQuestionsSuccess, (state, {\n  questions\n}) => ({\n  ...state,\n  questions\n})),\n// on(QuizActions.selectOption, (state, { option }) => ({\n//   ...state,\n//   selectedOption: option,\n//   isOptionSelected: true,\n//   selectedOptionClass:\n//     state.questions[state.current_Question_Index].correctAnswer === option\n//       ? 'correct-answer'\n//       : 'incorrect-answer',\n//   correctAnswerClass: 'correct-answer',\n// })),\non(QuizActions.selectOption, (state, {\n  option\n}) => {\n  const userResponses = [...state.userResponses];\n  userResponses[state.current_Question_Index] = option;\n  return {\n    ...state,\n    selectedOption: option,\n    isOptionSelected: true,\n    selectedOptionClass: state.questions[state.current_Question_Index].correctAnswer === option ? 'correct-answer' : 'incorrect-answer',\n    correctAnswerClass: 'correct-answer',\n    userResponses\n  };\n}), on(QuizActions.nextQuestion, state => {\n  const nextIndex = state.current_Question_Index + 1;\n  return {\n    ...state,\n    current_Question_Index: nextIndex,\n    currentQuestion: state.questions[nextIndex]?.question,\n    options: state.questions[nextIndex]?.options\n  };\n}), on(QuizActions.skipQuestion, state => {\n  const nextIndex = state.current_Question_Index + 1;\n  return {\n    ...state,\n    current_Question_Index: nextIndex,\n    currentQuestion: state.questions[nextIndex]?.question,\n    options: state.questions[nextIndex]?.options\n  };\n}), on(QuizActions.previousQuestion, state => {\n  const newIndex = state.current_Question_Index - 1;\n  // add\n  if (state.current_Question_Index > 1) {\n    const previousQuestionIndex = state.current_Question_Index - 2;\n    const previousQuestion = state.questions[previousQuestionIndex];\n    console.log(previousQuestionIndex);\n    return {\n      ...state,\n      currentQuestionNumber: state.current_Question_Index - 1,\n      currentQuestion: previousQuestion.question,\n      options: state.questions[newIndex]?.options,\n      selectedOption: state.userResponses[previousQuestionIndex] || undefined,\n      response: state.userResponses[previousQuestionIndex] || ''\n    };\n  } else {\n    console.log('previous allowed');\n    return {\n      ...state,\n      isFirstQuestion$: true\n    };\n  }\n  // return { ...state, current_Question_Index: newIndex };\n}), on(QuizActions.updateScore, (state, {\n  score\n}) => {\n  return {\n    ...state,\n    current_score: state.current_score + score\n  };\n}), on(QuizActions.restartQuiz, () => initialState));","map":{"version":3,"mappings":"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","names":["createReducer","on","QuizActions","QUIZ_APP_FEATURE_KEY","initialState","totalQuestions","current_score","total_score","questions","options","currentQuestion","current_Question_Index","selectedOption","isOptionSelected","selectedOptionClass","correctAnswerClass","userResponses","isFirstQuestion$","quizAppReducer","loadQuestionsSuccess","state","selectOption","option","correctAnswer","nextQuestion","nextIndex","question","skipQuestion","previousQuestion","newIndex","previousQuestionIndex","console","log","currentQuestionNumber","undefined","response","updateScore","score","restartQuiz"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/+state/quiz-app.reducer.ts"],"sourcesContent":["import { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { createReducer, on } from '@ngrx/store';\n\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizAppEntity } from './quiz-app.models';\nimport { Quiz } from '../quiz/quiz.interface';\n\nexport const QUIZ_APP_FEATURE_KEY = 'quizApp';\n\nexport const initialState: Quiz = {\n  totalQuestions: 0,\n  current_score: 0,\n  total_score: 0,\n  questions: [],\n  options: [],\n  currentQuestion: '',\n  current_Question_Index: 0,\n  selectedOption: '',\n  isOptionSelected: false,\n  selectedOptionClass: '',\n  correctAnswerClass: '',\n  userResponses: [],\n  isFirstQuestion$: false,\n};\n\nexport const quizAppReducer = createReducer(\n  initialState,\n  on(QuizActions.loadQuestionsSuccess, (state, { questions }) => ({\n    ...state,\n    questions,\n  })),\n\n  // on(QuizActions.selectOption, (state, { option }) => ({\n  //   ...state,\n  //   selectedOption: option,\n  //   isOptionSelected: true,\n  //   selectedOptionClass:\n  //     state.questions[state.current_Question_Index].correctAnswer === option\n  //       ? 'correct-answer'\n  //       : 'incorrect-answer',\n  //   correctAnswerClass: 'correct-answer',\n  // })),\n  on(QuizActions.selectOption, (state, { option }) => {\n    const userResponses = [...state.userResponses];\n    userResponses[state.current_Question_Index] = option;\n\n    return {\n      ...state,\n      selectedOption: option,\n      isOptionSelected: true,\n      selectedOptionClass:\n        state.questions[state.current_Question_Index].correctAnswer === option\n          ? 'correct-answer'\n          : 'incorrect-answer',\n      correctAnswerClass: 'correct-answer',\n      userResponses,\n    };\n  }),\n\n  on(QuizActions.nextQuestion, (state) => {\n    const nextIndex = state.current_Question_Index + 1;\n\n    return {\n      ...state,\n      current_Question_Index: nextIndex,\n      currentQuestion: state.questions[nextIndex]?.question,\n      options: state.questions[nextIndex]?.options,\n    };\n  }),\n  on(QuizActions.skipQuestion, (state) => {\n    const nextIndex = state.current_Question_Index + 1;\n\n    return {\n      ...state,\n      current_Question_Index: nextIndex,\n      currentQuestion: state.questions[nextIndex]?.question,\n      options: state.questions[nextIndex]?.options,\n    };\n  }),\n  on(QuizActions.previousQuestion, (state) => {\n    const newIndex = state.current_Question_Index - 1;\n    // add\n    if (state.current_Question_Index > 1) {\n      const previousQuestionIndex = state.current_Question_Index - 2;\n      const previousQuestion = state.questions[previousQuestionIndex];\n      console.log(previousQuestionIndex);\n      return {\n        ...state,\n        currentQuestionNumber: state.current_Question_Index - 1,\n        currentQuestion: previousQuestion.question,\n        options: state.questions[newIndex]?.options,\n        selectedOption: state.userResponses[previousQuestionIndex] || undefined,\n        response: state.userResponses[previousQuestionIndex] || '',\n      };\n    } else {\n      console.log('previous allowed');\n      return { ...state, isFirstQuestion$: true };\n    }\n    // return { ...state, current_Question_Index: newIndex };\n  }),\n\n  on(QuizActions.updateScore, (state, { score }) => {\n    return { ...state, current_score: state.current_score + score };\n  }),\n\n  on(QuizActions.restartQuiz, () => initialState)\n);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}