{"ast":null,"code":"import { createEffect, Actions, ofType } from '@ngrx/effects';\nimport { switchMap, catchError, of, map } from 'rxjs';\nimport * as QuizAppActions from './quiz-app.actions';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../quiz-redux.service\";\nexport class QuizAppEffects {\n  constructor(actions$, triviaService // Inject your trivia service\n  ) {\n    this.actions$ = actions$;\n    this.triviaService = triviaService;\n    this.loadQuestions$ = createEffect(() => this.actions$.pipe(ofType(QuizAppActions.loadQuestions), switchMap(() => this.triviaService.getTriviaQuestion().pipe(map(triviaResponse => {\n      if (triviaResponse) {\n        const questions = triviaResponse.map(questionItem => ({\n          question: questionItem.question.text,\n          options: this.shuffleArray([...questionItem.incorrectAnswers, questionItem.correctAnswer]),\n          correctAnswer: questionItem.correctAnswer\n        }));\n        // Dispatch the loadQuestionsSuccess action with the correct payload\n        return QuizAppActions.loadQuestionsSuccess({\n          questions\n        });\n      } else {\n        console.error('Invalid response structure');\n        return QuizAppActions.loadQuestionsFailure({\n          error: 'Invalid response structure'\n        });\n      }\n    }), catchError(error => of(QuizAppActions.loadQuestionsFailure({\n      error\n    })))))));\n  }\n  shuffleArray(array) {\n    return array.sort(() => Math.random() - 0.6);\n  }\n  static #_ = this.ɵfac = function QuizAppEffects_Factory(t) {\n    return new (t || QuizAppEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.QuizReduxService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuizAppEffects,\n    factory: QuizAppEffects.ɵfac\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,OAAO,EAAEC,MAAM,QAAQ,eAAe;AAC7D,SAASC,SAAS,EAAEC,UAAU,EAAEC,EAAE,EAAEC,GAAG,QAAkB,MAAM;AAC/D,OAAO,KAAKC,cAAc,MAAM,oBAAoB;AAEpD,SAASC,gBAAgB,QAAQ,uBAAuB;;;;AAIxD,OAAM,MAAOC,cAAc;EACzBC,YACUC,QAAiB,EACjBC,aAA+B,CAAC;EAAA;IADhC,aAAQ,GAARD,QAAQ;IACR,kBAAa,GAAbC,aAAa;IAMvB,mBAAc,GAAGZ,YAAY,CAAC,MAC5B,IAAI,CAACW,QAAQ,CAACE,IAAI,CAChBX,MAAM,CAACK,cAAc,CAACO,aAAa,CAAC,EACpCX,SAAS,CAAC,MACR,IAAI,CAACS,aAAa,CAACG,iBAAiB,EAAE,CAACF,IAAI,CACzCP,GAAG,CAAEU,cAAmB,IAAI;MAC1B,IAAIA,cAAc,EAAE;QAClB,MAAMC,SAAS,GAAeD,cAAc,CAACV,GAAG,CAC7CY,YAAiB,KAAM;UACtBC,QAAQ,EAAED,YAAY,CAACC,QAAQ,CAACC,IAAI;UACpCC,OAAO,EAAE,IAAI,CAACC,YAAY,CAAC,CACzB,GAAGJ,YAAY,CAACK,gBAAgB,EAChCL,YAAY,CAACM,aAAa,CAC3B,CAAC;UACFA,aAAa,EAAEN,YAAY,CAACM;SAC7B,CAAC,CACH;QAED;QACA,OAAOjB,cAAc,CAACkB,oBAAoB,CAAC;UAAER;QAAS,CAAE,CAAC;OAC1D,MAAM;QACLS,OAAO,CAACC,KAAK,CAAC,4BAA4B,CAAC;QAC3C,OAAOpB,cAAc,CAACqB,oBAAoB,CAAC;UACzCD,KAAK,EAAE;SACR,CAAC;;IAEN,CAAC,CAAC,EACFvB,UAAU,CAAEuB,KAAK,IACftB,EAAE,CAACE,cAAc,CAACqB,oBAAoB,CAAC;MAAED;IAAK,CAAE,CAAC,CAAC,CACnD,CACF,CACF,CACF,CACF;EAtCE;EAEHL,YAAY,CAACO,KAAe;IAC1B,OAAOA,KAAK,CAACC,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG,CAAC;EAC9C;EAAC;qBARUvB,cAAc;EAAA;EAAA;WAAdA,cAAc;IAAAwB,SAAdxB,cAAc;EAAA","names":["createEffect","Actions","ofType","switchMap","catchError","of","map","QuizAppActions","QuizReduxService","QuizAppEffects","constructor","actions$","triviaService","pipe","loadQuestions","getTriviaQuestion","triviaResponse","questions","questionItem","question","text","options","shuffleArray","incorrectAnswers","correctAnswer","loadQuestionsSuccess","console","error","loadQuestionsFailure","array","sort","Math","random","factory"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/Angular apps/quiz-app/apps/quiz-redux-app/src/app/+state/quiz-app.effects.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport { createEffect, Actions, ofType } from '@ngrx/effects';\nimport { switchMap, catchError, of, map, mergeMap } from 'rxjs';\nimport * as QuizAppActions from './quiz-app.actions';\nimport * as QuizAppFeature from './quiz-app.reducer';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport { Question } from '../quiz/quiz.interface';\n\n@Injectable()\nexport class QuizAppEffects {\n  constructor(\n    private actions$: Actions,\n    private triviaService: QuizReduxService // Inject your trivia service\n  ) {}\n\n  shuffleArray(array: string[]): string[] {\n    return array.sort(() => Math.random() - 0.6);\n  }\n  loadQuestions$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(QuizAppActions.loadQuestions),\n      switchMap(() =>\n        this.triviaService.getTriviaQuestion().pipe(\n          map((triviaResponse: any) => {\n            if (triviaResponse) {\n              const questions: Question[] = triviaResponse.map(\n                (questionItem: any) => ({\n                  question: questionItem.question.text,\n                  options: this.shuffleArray([\n                    ...questionItem.incorrectAnswers,\n                    questionItem.correctAnswer,\n                  ]),\n                  correctAnswer: questionItem.correctAnswer,\n                })\n              );\n\n              // Dispatch the loadQuestionsSuccess action with the correct payload\n              return QuizAppActions.loadQuestionsSuccess({ questions });\n            } else {\n              console.error('Invalid response structure');\n              return QuizAppActions.loadQuestionsFailure({\n                error: 'Invalid response structure',\n              });\n            }\n          }),\n          catchError((error) =>\n            of(QuizAppActions.loadQuestionsFailure({ error }))\n          )\n        )\n      )\n    )\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}