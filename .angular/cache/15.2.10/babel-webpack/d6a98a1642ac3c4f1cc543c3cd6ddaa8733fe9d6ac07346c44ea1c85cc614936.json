{"ast":null,"code":"import { createEffect, Actions, ofType } from '@ngrx/effects';\nimport { catchError, of, map, mergeMap, tap } from 'rxjs';\nimport { QuizApiActions } from './quiz-app.actions';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport { Store } from '@ngrx/store';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../quiz-redux.service\";\nimport * as i3 from \"@ngrx/store\";\nexport class QuizAppEffects {\n  constructor(actions$, triviaService, store) {\n    this.actions$ = actions$;\n    this.triviaService = triviaService;\n    this.store = store;\n    // loadTrivia$ = createEffect(() =>\n    //   this.actions$.pipe(\n    //     ofType(QuizActions.loadQuestions),\n    //     mergeMap(() =>\n    //       this.triviaService.getTriviaQuestion().pipe(\n    //         map((questions: any) => {\n    //           console.log('Trivia questions received from Effects:', questions);\n    //           return QuizApiActions.loadQuestionsSuccess({ questions });\n    //         }),\n    //         catchError((error) => {\n    //           console.error('Error in loadTodos effect:', error);\n    //           return of(QuizApiActions.loadQuestionsFailure({ error }));\n    //         })\n    //       )\n    //     )\n    //   )\n    // );\n    // loadCategories$ = createEffect(() =>\n    //   this.actions$.pipe(\n    //     ofType(QuizActions.loadCategories),\n    //     tap(),\n    //     switchMap(() =>\n    //       this.triviaService.getcategories().pipe(\n    //         map((categories) => {\n    //           // console.log('Trivia categories received from Effects:', categories);\n    //           return QuizApiActions.loadCategoriesSuccess({ categories });\n    //         }),\n    //         catchError((error) =>\n    //           of(QuizApiActions.loadCategoriesFailure({ error }))\n    //         )\n    //       )\n    //     )\n    //   )\n    // );\n    this.loadTrivia$ = createEffect(() => this.actions$.pipe(ofType(QuizPageActions.submitForm), mergeMap(action => this.quizService.getTrivia(action.formValue).pipe(tap(data => {\n      console.log('questions:', data);\n    }), map(trivia => QuizApiActions.triviaLoadedSuccess({\n      trivia\n    })), catchError(error => {\n      console.error('Error in loadTodos effect:', error);\n      return of(QuizApiActions.loadQuizFailure({\n        error\n      }));\n    })))));\n    this.loadCategories$ = createEffect(() => this.actions$.pipe(ofType(QuizPageActions.loadCategories), mergeMap(() => this.quizService.getCategories().pipe(map(categories => QuizApiActions.loadCategoriesSuccess({\n      categories\n    })), catchError(error => of(QuizApiActions.loadCategoriesFailure({\n      error\n    })))))));\n  }\n  static #_ = this.ɵfac = function QuizAppEffects_Factory(t) {\n    return new (t || QuizAppEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.QuizReduxService), i0.ɵɵinject(i3.Store));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuizAppEffects,\n    factory: QuizAppEffects.ɵfac\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,OAAO,EAAEC,MAAM,QAAQ,eAAe;AAC7D,SAEEC,UAAU,EACVC,EAAE,EACFC,GAAG,EACHC,QAAQ,EACRC,GAAG,QAEE,MAAM;AAEb,SAASC,cAAc,QAAQ,oBAAoB;AAEnD,SAASC,gBAAgB,QAAQ,uBAAuB;AAExD,SAASC,KAAK,QAAgB,aAAa;;;;;AAO3C,OAAM,MAAOC,cAAc;EACzBC,YACUC,QAAiB,EACjBC,aAA+B,EAC/BC,KAAY;IAFZ,aAAQ,GAARF,QAAQ;IACR,kBAAa,GAAbC,aAAa;IACb,UAAK,GAALC,KAAK;IAGf;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,gBAAW,GAAGf,YAAY,CAAC,MACzB,IAAI,CAACa,QAAQ,CAACG,IAAI,CAChBd,MAAM,CAACe,eAAe,CAACC,UAAU,CAAC,EAClCZ,QAAQ,CAAEa,MAAM,IACd,IAAI,CAACC,WAAW,CAACC,SAAS,CAACF,MAAM,CAACG,SAAS,CAAC,CAACN,IAAI,CAC/CT,GAAG,CAAEgB,IAAI,IAAI;MACXC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEF,IAAI,CAAC;IACjC,CAAC,CAAC,EACFlB,GAAG,CAAEqB,MAAM,IAAKlB,cAAc,CAACmB,mBAAmB,CAAC;MAAED;IAAM,CAAE,CAAC,CAAC,EAC/DvB,UAAU,CAAEyB,KAAK,IAAI;MACnBJ,OAAO,CAACI,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,OAAOxB,EAAE,CAACI,cAAc,CAACqB,eAAe,CAAC;QAAED;MAAK,CAAE,CAAC,CAAC;IACtD,CAAC,CAAC,CACH,CACF,CACF,CACF;IACD,oBAAe,GAAG5B,YAAY,CAAC,MAC7B,IAAI,CAACa,QAAQ,CAACG,IAAI,CAChBd,MAAM,CAACe,eAAe,CAACa,cAAc,CAAC,EACtCxB,QAAQ,CAAC,MACP,IAAI,CAACc,WAAW,CAACW,aAAa,EAAE,CAACf,IAAI,CACnCX,GAAG,CAAE2B,UAAU,IACbxB,cAAc,CAACyB,qBAAqB,CAAC;MAAED;IAAU,CAAE,CAAC,CACrD,EACD7B,UAAU,CAAEyB,KAAK,IACfxB,EAAE,CAACI,cAAc,CAAC0B,qBAAqB,CAAC;MAAEN;IAAK,CAAE,CAAC,CAAC,CACpD,CACF,CACF,CACF,CACF;EApEE;EAAC;qBALOjB,cAAc;EAAA;EAAA;WAAdA,cAAc;IAAAwB,SAAdxB,cAAc;EAAA","names":["createEffect","Actions","ofType","catchError","of","map","mergeMap","tap","QuizApiActions","QuizReduxService","Store","QuizAppEffects","constructor","actions$","triviaService","store","pipe","QuizPageActions","submitForm","action","quizService","getTrivia","formValue","data","console","log","trivia","triviaLoadedSuccess","error","loadQuizFailure","loadCategories","getCategories","categories","loadCategoriesSuccess","loadCategoriesFailure","factory"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/+state/quiz-app.effects.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport { createEffect, Actions, ofType } from '@ngrx/effects';\nimport {\n  switchMap,\n  catchError,\n  of,\n  map,\n  mergeMap,\n  tap,\n  withLatestFrom,\n} from 'rxjs';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport * as QuizAppFeature from './quiz-app.reducer';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport { Question } from '../quiz/quiz.interface';\nimport { Store, select } from '@ngrx/store';\nimport {\n  selectSelectedCategory,\n  selectSelectedDifficulty,\n} from './quiz-app.selectors';\n\n@Injectable()\nexport class QuizAppEffects {\n  constructor(\n    private actions$: Actions,\n    private triviaService: QuizReduxService,\n    private store: Store\n  ) {}\n\n  // loadTrivia$ = createEffect(() =>\n  //   this.actions$.pipe(\n  //     ofType(QuizActions.loadQuestions),\n  //     mergeMap(() =>\n  //       this.triviaService.getTriviaQuestion().pipe(\n  //         map((questions: any) => {\n  //           console.log('Trivia questions received from Effects:', questions);\n  //           return QuizApiActions.loadQuestionsSuccess({ questions });\n  //         }),\n  //         catchError((error) => {\n  //           console.error('Error in loadTodos effect:', error);\n  //           return of(QuizApiActions.loadQuestionsFailure({ error }));\n  //         })\n  //       )\n  //     )\n  //   )\n  // );\n\n  // loadCategories$ = createEffect(() =>\n  //   this.actions$.pipe(\n  //     ofType(QuizActions.loadCategories),\n  //     tap(),\n  //     switchMap(() =>\n  //       this.triviaService.getcategories().pipe(\n  //         map((categories) => {\n  //           // console.log('Trivia categories received from Effects:', categories);\n  //           return QuizApiActions.loadCategoriesSuccess({ categories });\n  //         }),\n  //         catchError((error) =>\n  //           of(QuizApiActions.loadCategoriesFailure({ error }))\n  //         )\n  //       )\n  //     )\n  //   )\n  // );\n  loadTrivia$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(QuizPageActions.submitForm),\n      mergeMap((action) =>\n        this.quizService.getTrivia(action.formValue).pipe(\n          tap((data) => {\n            console.log('questions:', data);\n          }),\n          map((trivia) => QuizApiActions.triviaLoadedSuccess({ trivia })),\n          catchError((error) => {\n            console.error('Error in loadTodos effect:', error);\n            return of(QuizApiActions.loadQuizFailure({ error }));\n          })\n        )\n      )\n    )\n  );\n  loadCategories$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(QuizPageActions.loadCategories),\n      mergeMap(() =>\n        this.quizService.getCategories().pipe(\n          map((categories) =>\n            QuizApiActions.loadCategoriesSuccess({ categories })\n          ),\n          catchError((error) =>\n            of(QuizApiActions.loadCategoriesFailure({ error }))\n          )\n        )\n      )\n    )\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}