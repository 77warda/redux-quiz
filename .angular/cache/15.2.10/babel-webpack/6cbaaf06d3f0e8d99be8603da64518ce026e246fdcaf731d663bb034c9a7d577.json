{"ast":null,"code":"import { createEffect, Actions, ofType } from '@ngrx/effects';\nimport { switchMap, catchError, of, map, mergeMap, tap, take, takeUntil, interval } from 'rxjs';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport { Store } from '@ngrx/store';\nimport { selectTotalQuestions } from './quiz-app.selectors';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../quiz-redux.service\";\nimport * as i3 from \"@ngrx/store\";\nexport class QuizAppEffects {\n  constructor(actions$, quizService, store) {\n    this.actions$ = actions$;\n    this.quizService = quizService;\n    this.store = store;\n    this.startTimer$ = createEffect(() => this.actions$.pipe(ofType(QuizActions.startTimer), switchMap(() => {\n      return this.store.select(selectTotalQuestions).pipe(take(1), map(totalQuestions => totalQuestions * 10),\n      // Assuming 10 seconds per question\n      switchMap(timerDuration => interval(1000).pipe(map(() => QuizActions.updateTimer()), takeUntil(this.actions$.pipe(ofType(QuizActions.finishQuiz))), take(timerDuration) // Limit timer to total questions * 10 seconds\n      )));\n    })));\n\n    this.loadTrivia$ = createEffect(() => this.actions$.pipe(ofType(QuizActions.submitForm), mergeMap(action => this.quizService.getTrivia(action.formValue).pipe(tap(data => {\n      console.log('Service Data:', data);\n    }), map(quizQuestions => QuizApiActions.loadQuestionsSuccess({\n      quizQuestions\n    })), catchError(error => {\n      console.error('Error in loadTodos effect:', error);\n      return of(QuizApiActions.loadQuestionsFailure({\n        error\n      }));\n    })))));\n    this.loadCategories$ = createEffect(() => this.actions$.pipe(ofType(QuizActions.loadCategories), mergeMap(() => this.quizService.getCategories().pipe(map(categories => QuizApiActions.loadCategoriesSuccess({\n      categories\n    })), catchError(error => of(QuizApiActions.loadCategoriesFailure({\n      error\n    })))))));\n  }\n  static #_ = this.ɵfac = function QuizAppEffects_Factory(t) {\n    return new (t || QuizAppEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.QuizReduxService), i0.ɵɵinject(i3.Store));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuizAppEffects,\n    factory: QuizAppEffects.ɵfac\n  });\n}","map":{"version":3,"mappings":"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","names":["createEffect","Actions","ofType","switchMap","catchError","of","map","mergeMap","tap","take","takeUntil","interval","QuizActions","QuizApiActions","QuizReduxService","Store","selectTotalQuestions","QuizAppEffects","constructor","actions$","quizService","store","pipe","startTimer","select","totalQuestions","timerDuration","updateTimer","finishQuiz","submitForm","action","getTrivia","formValue","data","console","log","quizQuestions","loadQuestionsSuccess","error","loadQuestionsFailure","loadCategories","getCategories","categories","loadCategoriesSuccess","loadCategoriesFailure","factory"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/+state/quiz-app.effects.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport { createEffect, Actions, ofType } from '@ngrx/effects';\nimport {\n  switchMap,\n  catchError,\n  of,\n  map,\n  mergeMap,\n  tap,\n  withLatestFrom,\n  take,\n  takeUntil,\n  interval,\n} from 'rxjs';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport * as QuizAppFeature from './quiz-app.reducer';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport { Question } from '../quiz/quiz.interface';\nimport { Store, select } from '@ngrx/store';\nimport { selectTotalQuestions } from './quiz-app.selectors';\n\n@Injectable()\nexport class QuizAppEffects {\n  constructor(\n    private actions$: Actions,\n    private quizService: QuizReduxService,\n    private store: Store\n  ) {}\n\n  startTimer$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(QuizActions.startTimer),\n      switchMap(() => {\n        return this.store.select(selectTotalQuestions).pipe(\n          take(1),\n          map((totalQuestions) => totalQuestions * 10), // Assuming 10 seconds per question\n          switchMap((timerDuration) =>\n            interval(1000).pipe(\n              map(() => QuizActions.updateTimer()),\n              takeUntil(this.actions$.pipe(ofType(QuizActions.finishQuiz))),\n              take(timerDuration) // Limit timer to total questions * 10 seconds\n            )\n          )\n        );\n      })\n    )\n  );\n\n  loadTrivia$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(QuizActions.submitForm),\n      mergeMap((action) =>\n        this.quizService.getTrivia(action.formValue).pipe(\n          tap((data) => {\n            console.log('Service Data:', data);\n          }),\n          map((quizQuestions) =>\n            QuizApiActions.loadQuestionsSuccess({ quizQuestions })\n          ),\n          catchError((error) => {\n            console.error('Error in loadTodos effect:', error);\n            return of(QuizApiActions.loadQuestionsFailure({ error }));\n          })\n        )\n      )\n    )\n  );\n\n  loadCategories$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(QuizActions.loadCategories),\n      mergeMap(() =>\n        this.quizService.getCategories().pipe(\n          map((categories) =>\n            QuizApiActions.loadCategoriesSuccess({ categories })\n          ),\n          catchError((error) =>\n            of(QuizApiActions.loadCategoriesFailure({ error }))\n          )\n        )\n      )\n    )\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}