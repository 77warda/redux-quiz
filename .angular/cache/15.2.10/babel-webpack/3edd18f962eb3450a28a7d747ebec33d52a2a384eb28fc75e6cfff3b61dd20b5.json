{"ast":null,"code":"import { createEffect, Actions, ofType } from '@ngrx/effects';\nimport { catchError, of, map, mergeMap, tap, Observable } from 'rxjs';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../quiz-redux.service\";\nexport class QuizAppEffects {\n  constructor(actions$, quizService) {\n    this.actions$ = actions$;\n    this.quizService = quizService;\n    this.loadTrivia$ = createEffect(() => this.actions$.pipe(ofType(QuizActions.submitForm), mergeMap(action => this.quizService.getTrivia(action.formValue).pipe(tap(data => {\n      console.log('Service Data:', data);\n    }), map(quizQuestions => QuizApiActions.loadQuestionsSuccess({\n      quizQuestions\n    })), catchError(error => {\n      console.error('Error in loadTodos effect:', error);\n      return of(QuizApiActions.loadQuestionsFailure({\n        error\n      }));\n    })))));\n    this.loadCategories$ = createEffect(() => this.actions$.pipe(ofType(QuizActions.loadCategories), mergeMap(() => this.quizService.getCategories().pipe(map(categories => QuizApiActions.loadCategoriesSuccess({\n      categories\n    })), catchError(error => of(QuizApiActions.loadCategoriesFailure({\n      error\n    })))))));\n  }\n  static #_ = this.ɵfac = function QuizAppEffects_Factory(t) {\n    return new (t || QuizAppEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.QuizReduxService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuizAppEffects,\n    factory: QuizAppEffects.ɵfac\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,OAAO,EAAEC,MAAM,QAAQ,eAAe;AAC7D,SAEEC,UAAU,EACVC,EAAE,EACFC,GAAG,EACHC,QAAQ,EACRC,GAAG,EAEHC,UAAU,QACL,MAAM;AACb,SAASC,WAAW,QAAQ,oBAAoB;AAChD,SAASC,cAAc,QAAQ,oBAAoB;AAEnD,SAASC,gBAAgB,QAAQ,uBAAuB;;;;AAMxD,OAAM,MAAOC,cAAc;EAIzBC,YACUC,QAAiB,EACjBC,WAA6B;IAD7B,aAAQ,GAARD,QAAQ;IACR,gBAAW,GAAXC,WAAW;IAGrB,gBAAW,GAAGf,YAAY,CAAC,MACzB,IAAI,CAACc,QAAQ,CAACE,IAAI,CAChBd,MAAM,CAACO,WAAW,CAACQ,UAAU,CAAC,EAC9BX,QAAQ,CAAEY,MAAM,IACd,IAAI,CAACH,WAAW,CAACI,SAAS,CAACD,MAAM,CAACE,SAAS,CAAC,CAACJ,IAAI,CAC/CT,GAAG,CAAEc,IAAI,IAAI;MACXC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,IAAI,CAAC;IACpC,CAAC,CAAC,EACFhB,GAAG,CAAEmB,aAAa,IAChBd,cAAc,CAACe,oBAAoB,CAAC;MAAED;IAAa,CAAE,CAAC,CACvD,EACDrB,UAAU,CAAEuB,KAAK,IAAI;MACnBJ,OAAO,CAACI,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,OAAOtB,EAAE,CAACM,cAAc,CAACiB,oBAAoB,CAAC;QAAED;MAAK,CAAE,CAAC,CAAC;IAC3D,CAAC,CAAC,CACH,CACF,CACF,CACF;IAED,oBAAe,GAAG1B,YAAY,CAAC,MAC7B,IAAI,CAACc,QAAQ,CAACE,IAAI,CAChBd,MAAM,CAACO,WAAW,CAACmB,cAAc,CAAC,EAClCtB,QAAQ,CAAC,MACP,IAAI,CAACS,WAAW,CAACc,aAAa,EAAE,CAACb,IAAI,CACnCX,GAAG,CAAEyB,UAAU,IACbpB,cAAc,CAACqB,qBAAqB,CAAC;MAAED;IAAU,CAAE,CAAC,CACrD,EACD3B,UAAU,CAAEuB,KAAK,IACftB,EAAE,CAACM,cAAc,CAACsB,qBAAqB,CAAC;MAAEN;IAAK,CAAE,CAAC,CAAC,CACpD,CACF,CACF,CACF,CACF;EApCE;EAAC;qBAPOd,cAAc;EAAA;EAAA;WAAdA,cAAc;IAAAqB,SAAdrB,cAAc;EAAA","names":["createEffect","Actions","ofType","catchError","of","map","mergeMap","tap","Observable","QuizActions","QuizApiActions","QuizReduxService","QuizAppEffects","constructor","actions$","quizService","pipe","submitForm","action","getTrivia","formValue","data","console","log","quizQuestions","loadQuestionsSuccess","error","loadQuestionsFailure","loadCategories","getCategories","categories","loadCategoriesSuccess","loadCategoriesFailure","factory"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/+state/quiz-app.effects.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport { createEffect, Actions, ofType } from '@ngrx/effects';\nimport {\n  switchMap,\n  catchError,\n  of,\n  map,\n  mergeMap,\n  tap,\n  withLatestFrom,\n  Observable,\n} from 'rxjs';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport * as QuizAppFeature from './quiz-app.reducer';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport { Question } from '../quiz/quiz.interface';\nimport { Store, select } from '@ngrx/store';\nimport {} from './quiz-app.selectors';\n\n@Injectable()\nexport class QuizAppEffects {\n  currentQuestionNumber$!: Observable<number | null>;\n  totalQuestions$!: Observable<number>;\n\n  constructor(\n    private actions$: Actions,\n    private quizService: QuizReduxService\n  ) {}\n\n  loadTrivia$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(QuizActions.submitForm),\n      mergeMap((action) =>\n        this.quizService.getTrivia(action.formValue).pipe(\n          tap((data) => {\n            console.log('Service Data:', data);\n          }),\n          map((quizQuestions) =>\n            QuizApiActions.loadQuestionsSuccess({ quizQuestions })\n          ),\n          catchError((error) => {\n            console.error('Error in loadTodos effect:', error);\n            return of(QuizApiActions.loadQuestionsFailure({ error }));\n          })\n        )\n      )\n    )\n  );\n\n  loadCategories$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(QuizActions.loadCategories),\n      mergeMap(() =>\n        this.quizService.getCategories().pipe(\n          map((categories) =>\n            QuizApiActions.loadCategoriesSuccess({ categories })\n          ),\n          catchError((error) =>\n            of(QuizApiActions.loadCategoriesFailure({ error }))\n          )\n        )\n      )\n    )\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}