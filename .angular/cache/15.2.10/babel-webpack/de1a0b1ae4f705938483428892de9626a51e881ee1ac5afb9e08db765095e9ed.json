{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { catchError, map, tap, throwError } from 'rxjs';\nimport { Quiz } from './quiz/quiz.interface';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class QuizReduxService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://the-trivia-api.com/v2/questions';\n  }\n  mapApiResponseToQuiz(apiResponse) {\n    return {\n      totalQuestions: apiResponse.length,\n      current_score: 0,\n      total_score: apiResponse.length,\n      current_Question_Index: 0,\n      currentQuestion: '',\n      questions: apiResponse.map(questionItem => {\n        const incorrectAnswers = questionItem.incorrectAnswers;\n        const correctAnswer = questionItem.correctAnswer;\n        return {\n          question: questionItem.question.text,\n          options: this.shuffleArray([...incorrectAnswers, correctAnswer]),\n          correctAnswer: correctAnswer\n        };\n      }),\n      options: [] // Empty options array initially\n    };\n  }\n\n  getTriviaQuestion() {\n    return this.http.get(this.apiUrl).pipe(tap(apiResponse => console.log('API Response:', apiResponse)), map(apiResponse => this.mapApiResponseToQuiz(apiResponse)), catchError(error => {\n      console.error('Error fetching trivia question:', error);\n      return throwError(error);\n    }));\n  }\n  shuffleArray(array) {\n    return array.sort(() => Math.random() - 0.6);\n  }\n  static #_ = this.ɵfac = function QuizReduxService_Factory(t) {\n    return new (t || QuizReduxService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuizReduxService,\n    factory: QuizReduxService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,QAAQ,sBAAsB;AAEjD,SAAqBC,UAAU,EAAEC,GAAG,EAAEC,GAAG,EAAEC,UAAU,QAAQ,MAAM;AACnE,SAAmBC,IAAI,QAAQ,uBAAuB;;;AAKtD,OAAM,MAAOC,gBAAgB;EAG3BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,yCAAyC;EAEnB;EAE/BC,oBAAoB,CAACC,WAAgB;IAC3C,OAAO;MACLC,cAAc,EAAED,WAAW,CAACE,MAAM;MAClCC,aAAa,EAAE,CAAC;MAChBC,WAAW,EAAEJ,WAAW,CAACE,MAAM;MAC/BG,sBAAsB,EAAE,CAAC;MACzBC,eAAe,EAAE,EAAE;MACnBC,SAAS,EAAEP,WAAW,CAACR,GAAG,CAAEgB,YAAiB,IAAI;QAC/C,MAAMC,gBAAgB,GAAGD,YAAY,CAACC,gBAAgB;QACtD,MAAMC,aAAa,GAAGF,YAAY,CAACE,aAAa;QAEhD,OAAO;UACLC,QAAQ,EAAEH,YAAY,CAACG,QAAQ,CAACC,IAAI;UACpCC,OAAO,EAAE,IAAI,CAACC,YAAY,CAAC,CAAC,GAAGL,gBAAgB,EAAEC,aAAa,CAAC,CAAC;UAChEA,aAAa,EAAEA;SAChB;MACH,CAAC,CAAC;MACFG,OAAO,EAAE,EAAE,CAAE;KACd;EACH;;EAEAE,iBAAiB;IACf,OAAO,IAAI,CAACjB,IAAI,CAACkB,GAAG,CAAM,IAAI,CAACC,MAAM,CAAC,CAACC,IAAI,CACzCzB,GAAG,CAAEO,WAAW,IAAKmB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEpB,WAAW,CAAC,CAAC,EAC/DR,GAAG,CAAEQ,WAAW,IAAK,IAAI,CAACD,oBAAoB,CAACC,WAAW,CAAC,CAAC,EAC5DT,UAAU,CAAE8B,KAAK,IAAI;MACnBF,OAAO,CAACE,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,OAAO3B,UAAU,CAAC2B,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACH;EAEQP,YAAY,CAACQ,KAAe;IAClC,OAAOA,KAAK,CAACC,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG,CAAC;EAC9C;EAAC;qBAvCU7B,gBAAgB;EAAA;EAAA;WAAhBA,gBAAgB;IAAA8B,SAAhB9B,gBAAgB;IAAA+B,YAFf;EAAM","names":["HttpClient","catchError","map","tap","throwError","Quiz","QuizReduxService","constructor","http","mapApiResponseToQuiz","apiResponse","totalQuestions","length","current_score","total_score","current_Question_Index","currentQuestion","questions","questionItem","incorrectAnswers","correctAnswer","question","text","options","shuffleArray","getTriviaQuestion","get","apiUrl","pipe","console","log","error","array","sort","Math","random","factory","providedIn"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/Angular apps/quiz-app/apps/quiz-redux-app/src/app/quiz-redux.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, catchError, map, tap, throwError } from 'rxjs';\nimport { Question, Quiz } from './quiz/quiz.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QuizReduxService {\n  private apiUrl = 'https://the-trivia-api.com/v2/questions';\n\n  constructor(private http: HttpClient) {}\n\n  private mapApiResponseToQuiz(apiResponse: any): Quiz {\n    return {\n      totalQuestions: apiResponse.length,\n      current_score: 0,\n      total_score: apiResponse.length,\n      current_Question_Index: 0,\n      currentQuestion: '',\n      questions: apiResponse.map((questionItem: any) => {\n        const incorrectAnswers = questionItem.incorrectAnswers;\n        const correctAnswer = questionItem.correctAnswer;\n\n        return {\n          question: questionItem.question.text,\n          options: this.shuffleArray([...incorrectAnswers, correctAnswer]),\n          correctAnswer: correctAnswer,\n        };\n      }),\n      options: [], // Empty options array initially\n    };\n  }\n\n  getTriviaQuestion(): Observable<Quiz> {\n    return this.http.get<any>(this.apiUrl).pipe(\n      tap((apiResponse) => console.log('API Response:', apiResponse)),\n      map((apiResponse) => this.mapApiResponseToQuiz(apiResponse)),\n      catchError((error) => {\n        console.error('Error fetching trivia question:', error);\n        return throwError(error);\n      })\n    );\n  }\n\n  private shuffleArray(array: string[]): string[] {\n    return array.sort(() => Math.random() - 0.6);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}