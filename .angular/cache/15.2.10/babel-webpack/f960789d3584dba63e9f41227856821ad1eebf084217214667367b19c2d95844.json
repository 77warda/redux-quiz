{"ast":null,"code":"import { createReducer, on } from '@ngrx/store';\nimport { QuizActions } from './quiz-app.actions';\nexport const QUIZ_APP_FEATURE_KEY = 'quizApp';\nexport const initialState = {\n  totalQuestions: 0,\n  current_score: 0,\n  total_score: 0,\n  questions: [],\n  options: [],\n  currentQuestion: '',\n  current_Question_Index: 0,\n  selectedOption: '',\n  isOptionSelected: false,\n  selectedOptionClass: '',\n  correctAnswerClass: '',\n  selectedOptionsByQuestion: Array.from({\n    length: questions.length\n  }, () => '')\n};\nexport const quizAppReducer = createReducer(initialState, on(QuizActions.loadQuestionsSuccess, (state, {\n  questions\n}) => ({\n  ...state,\n  questions\n})),\n// on(QuizActions.selectOption, (state, { option }) => ({\n//   ...state,\n//   selectedOption: option,\n//   isOptionSelected: true,\n//   selectedOptionClass:\n//     state.questions[state.current_Question_Index].correctAnswer === option\n//       ? 'correct-answer'\n//       : 'incorrect-answer',\n//   correctAnswerClass: 'correct-answer',\n// })),\non(QuizActions.selectOption, (state, {\n  option\n}) => {\n  const selectedOptions = [...state.selectedOptionsByQuestion];\n  selectedOptions[state.current_Question_Index] = option;\n  return {\n    ...state,\n    selectedOptionsByQuestion: selectedOptions,\n    selectedOption: option,\n    isOptionSelected: true,\n    selectedOptionClass: state.questions[state.current_Question_Index].correctAnswer === option ? 'correct-answer' : 'incorrect-answer',\n    correctAnswerClass: 'correct-answer'\n  };\n}), on(QuizActions.nextQuestion, state => {\n  const nextIndex = state.current_Question_Index + 1;\n  return {\n    ...state,\n    current_Question_Index: nextIndex,\n    currentQuestion: state.questions[nextIndex]?.question,\n    options: state.questions[nextIndex]?.options\n  };\n}), on(QuizActions.skipQuestion, state => {\n  const nextIndex = state.current_Question_Index + 1;\n  return {\n    ...state,\n    current_Question_Index: nextIndex,\n    currentQuestion: state.questions[nextIndex]?.question,\n    options: state.questions[nextIndex]?.options\n  };\n}),\n// on(QuizActions.previousQuestion, (state) => {\n//   const newIndex = Math.max(0, state.current_Question_Index - 1);\n//   return { ...state, current_Question_Index: newIndex };\n// }),\non(QuizActions.previousQuestion, state => {\n  const newIndex = Math.max(0, state.current_Question_Index - 1);\n  const selectedOption = state.selectedOptionsByQuestion[newIndex];\n  return {\n    ...state,\n    current_Question_Index: newIndex,\n    currentQuestion: state.questions[newIndex]?.question,\n    options: state.questions[newIndex]?.options,\n    selectedOption: selectedOption || '' // Use the previously selected option\n  };\n}), on(QuizActions.updateScore, (state, {\n  score\n}) => {\n  return {\n    ...state,\n    current_score: state.current_score + score\n  };\n}), on(QuizActions.restartQuiz, () => initialState));","map":{"version":3,"mappings":"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","names":["createReducer","on","QuizActions","QUIZ_APP_FEATURE_KEY","initialState","totalQuestions","current_score","total_score","questions","options","currentQuestion","current_Question_Index","selectedOption","isOptionSelected","selectedOptionClass","correctAnswerClass","selectedOptionsByQuestion","Array","from","length","quizAppReducer","loadQuestionsSuccess","state","selectOption","option","selectedOptions","correctAnswer","nextQuestion","nextIndex","question","skipQuestion","previousQuestion","newIndex","Math","max","updateScore","score","restartQuiz"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/+state/quiz-app.reducer.ts"],"sourcesContent":["import { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { createReducer, on } from '@ngrx/store';\n\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizAppEntity } from './quiz-app.models';\nimport { Quiz } from '../quiz/quiz.interface';\n\nexport const QUIZ_APP_FEATURE_KEY = 'quizApp';\n\nexport const initialState: Quiz = {\n  totalQuestions: 0,\n  current_score: 0,\n  total_score: 0,\n  questions: [],\n  options: [],\n  currentQuestion: '',\n  current_Question_Index: 0,\n  selectedOption: '',\n  isOptionSelected: false,\n  selectedOptionClass: '',\n  correctAnswerClass: '',\n  selectedOptionsByQuestion: Array.from({ length: questions.length }, () => ''),\n};\n\nexport const quizAppReducer = createReducer(\n  initialState,\n  on(QuizActions.loadQuestionsSuccess, (state, { questions }) => ({\n    ...state,\n    questions,\n  })),\n\n  // on(QuizActions.selectOption, (state, { option }) => ({\n  //   ...state,\n  //   selectedOption: option,\n  //   isOptionSelected: true,\n  //   selectedOptionClass:\n  //     state.questions[state.current_Question_Index].correctAnswer === option\n  //       ? 'correct-answer'\n  //       : 'incorrect-answer',\n  //   correctAnswerClass: 'correct-answer',\n  // })),\n  on(QuizActions.selectOption, (state, { option }) => {\n    const selectedOptions = [...state.selectedOptionsByQuestion];\n    selectedOptions[state.current_Question_Index] = option;\n\n    return {\n      ...state,\n      selectedOptionsByQuestion: selectedOptions,\n      selectedOption: option,\n      isOptionSelected: true,\n      selectedOptionClass:\n        state.questions[state.current_Question_Index].correctAnswer === option\n          ? 'correct-answer'\n          : 'incorrect-answer',\n      correctAnswerClass: 'correct-answer',\n    };\n  }),\n\n  on(QuizActions.nextQuestion, (state) => {\n    const nextIndex = state.current_Question_Index + 1;\n\n    return {\n      ...state,\n      current_Question_Index: nextIndex,\n      currentQuestion: state.questions[nextIndex]?.question,\n      options: state.questions[nextIndex]?.options,\n    };\n  }),\n  on(QuizActions.skipQuestion, (state) => {\n    const nextIndex = state.current_Question_Index + 1;\n\n    return {\n      ...state,\n      current_Question_Index: nextIndex,\n      currentQuestion: state.questions[nextIndex]?.question,\n      options: state.questions[nextIndex]?.options,\n    };\n  }),\n  // on(QuizActions.previousQuestion, (state) => {\n  //   const newIndex = Math.max(0, state.current_Question_Index - 1);\n  //   return { ...state, current_Question_Index: newIndex };\n  // }),\n  on(QuizActions.previousQuestion, (state) => {\n    const newIndex = Math.max(0, state.current_Question_Index - 1);\n    const selectedOption = state.selectedOptionsByQuestion[newIndex];\n\n    return {\n      ...state,\n      current_Question_Index: newIndex,\n      currentQuestion: state.questions[newIndex]?.question,\n      options: state.questions[newIndex]?.options,\n      selectedOption: selectedOption || '', // Use the previously selected option\n    };\n  }),\n\n  on(QuizActions.updateScore, (state, { score }) => {\n    return { ...state, current_score: state.current_score + score };\n  }),\n\n  on(QuizActions.restartQuiz, () => initialState)\n);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}