{"ast":null,"code":"import { createReducer, on } from '@ngrx/store';\nimport { QuizActions } from './quiz-app.actions';\nexport const QUIZ_APP_FEATURE_KEY = 'quizApp';\nexport const initialState = {\n  totalQuestions: 0,\n  current_score: 0,\n  total_score: 0,\n  questions: [],\n  options: [],\n  currentQuestion: '',\n  current_Question_Index: 0,\n  selectedOption: '',\n  isOptionSelected: false,\n  selectedOptionClass: '',\n  correctAnswerClass: '',\n  userResponses: [],\n  isFirstQuestion$: false,\n  correctAnswer: ''\n};\nexport const quizAppReducer = createReducer(initialState,\n// on(QuizActions.loadQuestionsSuccess, (state, { questions }) => ({\n//   ...state,\n//   questions,\n// })),\n// on(QuizActions.loadQuestionsSuccess, (state, { questions }) => ({\n//   ...state,\n//   questions: questions,\n//   // totalQuestions: questions.length,\n//   // currentQuestion: questions[state.current_Question_Index - 1].question.text,\n//   // options: questions[state.current_Question_Index - 1].incorrectAnswers\n//   //   .concat(questions[state.current_Question_Index - 1].correctAnswer)\n//   //   .sort(),\n//   // lastQuestion: questions.length === state.totalQuestions,\n// }))\non(QuizActions.loadQuestionsSuccess, (state, {\n  questions\n}) => {\n  console.log('Questions:', questions); // Add this line to log the questions\n  return {\n    ...state,\n    questions: questions\n  };\n})\n// on(QuizActions.selectOption, (state, { option }) => {\n//   const userResponses = [...state.userResponses];\n//   userResponses[state.current_Question_Index] = option;\n//   return {\n//     ...state,\n//     selectedOption: option,\n//     isOptionSelected: true,\n//     selectedOptionClass:\n//       state.questions[state.current_Question_Index].correctAnswer === option\n//         ? 'correct-answer'\n//         : 'incorrect-answer',\n//     correctAnswerClass: 'correct-answer',\n//     userResponses,\n//   };\n// }),\n//   on(QuizActions.nextQuestion, (state) => {\n//     const nextIndex = state.current_Question_Index + 1;\n//     return {\n//       ...state,\n//       current_Question_Index: nextIndex,\n//       currentQuestion: state.questions[nextIndex]?.question.text,\n//       options: state.questions[nextIndex]?.options,\n//     };\n//   }),\n//   on(QuizActions.skipQuestion, (state) => {\n//     const nextIndex = state.current_Question_Index + 1;\n//     return {\n//       ...state,\n//       current_Question_Index: nextIndex,\n//       currentQuestion: state.questions[nextIndex]?.question,\n//       options: state.questions[nextIndex]?.options,\n//     };\n//   }),\n//   on(QuizActions.previousQuestion, (state) => {\n//     const newIndex = state.current_Question_Index - 1;\n//     // add\n//     if (state.current_Question_Index > 1) {\n//       const previousQuestionIndex = state.current_Question_Index - 1;\n//       const previousQuestion = state.questions[previousQuestionIndex];\n//       console.log(previousQuestionIndex);\n//       return {\n//         ...state,\n//         current_Question_Index: state.current_Question_Index - 1,\n//         currentQuestion: previousQuestion.question,\n//         options: state.questions[newIndex]?.options,\n//         selectedOption: state.userResponses[previousQuestionIndex] || null,\n//       };\n//     } else {\n//       console.log('previous allowed');\n//       return { ...state, isFirstQuestion$: true };\n//     }\n//     // return { ...state, current_Question_Index: newIndex };\n//   }),\n//   on(QuizActions.updateScore, (state, { score }) => {\n//     return { ...state, current_score: state.current_score + score };\n//   }),\n//   on(QuizActions.restartQuiz, () => initialState)\n);","map":{"version":3,"mappings":"AACA,SAASA,aAAa,EAAEC,EAAE,QAAQ,aAAa;AAE/C,SAASC,WAAW,QAAQ,oBAAoB;AAIhD,OAAO,MAAMC,oBAAoB,GAAG,SAAS;AAE7C,OAAO,MAAMC,YAAY,GAAS;EAChCC,cAAc,EAAE,CAAC;EACjBC,aAAa,EAAE,CAAC;EAChBC,WAAW,EAAE,CAAC;EACdC,SAAS,EAAE,EAAE;EACbC,OAAO,EAAE,EAAE;EACXC,eAAe,EAAE,EAAE;EACnBC,sBAAsB,EAAE,CAAC;EACzBC,cAAc,EAAE,EAAE;EAClBC,gBAAgB,EAAE,KAAK;EACvBC,mBAAmB,EAAE,EAAE;EACvBC,kBAAkB,EAAE,EAAE;EACtBC,aAAa,EAAE,EAAE;EACjBC,gBAAgB,EAAE,KAAK;EACvBC,aAAa,EAAE;CAChB;AAED,OAAO,MAAMC,cAAc,GAAGnB,aAAa,CACzCI,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,EAAE,CAACC,WAAW,CAACkB,oBAAoB,EAAE,CAACC,KAAK,EAAE;EAAEb;AAAS,CAAE,KAAI;EAC5Dc,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEf,SAAS,CAAC,CAAC,CAAC;EACtC,OAAO;IACL,GAAGa,KAAK;IACRb,SAAS,EAAEA;GACZ;AACH,CAAC;AAED;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA,CACD","names":["createReducer","on","QuizActions","QUIZ_APP_FEATURE_KEY","initialState","totalQuestions","current_score","total_score","questions","options","currentQuestion","current_Question_Index","selectedOption","isOptionSelected","selectedOptionClass","correctAnswerClass","userResponses","isFirstQuestion$","correctAnswer","quizAppReducer","loadQuestionsSuccess","state","console","log"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/+state/quiz-app.reducer.ts"],"sourcesContent":["import { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { createReducer, on } from '@ngrx/store';\n\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizAppEntity } from './quiz-app.models';\nimport { Quiz } from '../quiz/quiz.interface';\n\nexport const QUIZ_APP_FEATURE_KEY = 'quizApp';\n\nexport const initialState: Quiz = {\n  totalQuestions: 0,\n  current_score: 0,\n  total_score: 0,\n  questions: [],\n  options: [],\n  currentQuestion: '',\n  current_Question_Index: 0,\n  selectedOption: '',\n  isOptionSelected: false,\n  selectedOptionClass: '',\n  correctAnswerClass: '',\n  userResponses: [],\n  isFirstQuestion$: false,\n  correctAnswer: '',\n};\n\nexport const quizAppReducer = createReducer(\n  initialState,\n  // on(QuizActions.loadQuestionsSuccess, (state, { questions }) => ({\n  //   ...state,\n  //   questions,\n  // })),\n  // on(QuizActions.loadQuestionsSuccess, (state, { questions }) => ({\n  //   ...state,\n  //   questions: questions,\n\n  //   // totalQuestions: questions.length,\n  //   // currentQuestion: questions[state.current_Question_Index - 1].question.text,\n  //   // options: questions[state.current_Question_Index - 1].incorrectAnswers\n  //   //   .concat(questions[state.current_Question_Index - 1].correctAnswer)\n  //   //   .sort(),\n  //   // lastQuestion: questions.length === state.totalQuestions,\n  // }))\n  on(QuizActions.loadQuestionsSuccess, (state, { questions }) => {\n    console.log('Questions:', questions); // Add this line to log the questions\n    return {\n      ...state,\n      questions: questions,\n    };\n  })\n\n  // on(QuizActions.selectOption, (state, { option }) => {\n  //   const userResponses = [...state.userResponses];\n  //   userResponses[state.current_Question_Index] = option;\n\n  //   return {\n  //     ...state,\n  //     selectedOption: option,\n  //     isOptionSelected: true,\n  //     selectedOptionClass:\n  //       state.questions[state.current_Question_Index].correctAnswer === option\n  //         ? 'correct-answer'\n  //         : 'incorrect-answer',\n  //     correctAnswerClass: 'correct-answer',\n  //     userResponses,\n  //   };\n  // }),\n\n  //   on(QuizActions.nextQuestion, (state) => {\n  //     const nextIndex = state.current_Question_Index + 1;\n\n  //     return {\n  //       ...state,\n  //       current_Question_Index: nextIndex,\n  //       currentQuestion: state.questions[nextIndex]?.question.text,\n  //       options: state.questions[nextIndex]?.options,\n  //     };\n  //   }),\n  //   on(QuizActions.skipQuestion, (state) => {\n  //     const nextIndex = state.current_Question_Index + 1;\n\n  //     return {\n  //       ...state,\n  //       current_Question_Index: nextIndex,\n  //       currentQuestion: state.questions[nextIndex]?.question,\n  //       options: state.questions[nextIndex]?.options,\n  //     };\n  //   }),\n  //   on(QuizActions.previousQuestion, (state) => {\n  //     const newIndex = state.current_Question_Index - 1;\n  //     // add\n  //     if (state.current_Question_Index > 1) {\n  //       const previousQuestionIndex = state.current_Question_Index - 1;\n  //       const previousQuestion = state.questions[previousQuestionIndex];\n  //       console.log(previousQuestionIndex);\n  //       return {\n  //         ...state,\n  //         current_Question_Index: state.current_Question_Index - 1,\n  //         currentQuestion: previousQuestion.question,\n  //         options: state.questions[newIndex]?.options,\n  //         selectedOption: state.userResponses[previousQuestionIndex] || null,\n  //       };\n  //     } else {\n  //       console.log('previous allowed');\n  //       return { ...state, isFirstQuestion$: true };\n  //     }\n  //     // return { ...state, current_Question_Index: newIndex };\n  //   }),\n\n  //   on(QuizActions.updateScore, (state, { score }) => {\n  //     return { ...state, current_score: state.current_score + score };\n  //   }),\n\n  //   on(QuizActions.restartQuiz, () => initialState)\n);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}