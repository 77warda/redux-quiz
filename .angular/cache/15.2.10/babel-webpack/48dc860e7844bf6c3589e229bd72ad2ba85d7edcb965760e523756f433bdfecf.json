{"ast":null,"code":"import { createReducer, on } from '@ngrx/store';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nexport const QUIZ_APP_FEATURE_KEY = 'quizApp';\nexport const initialState = {\n  currentQuestionNumber: 1,\n  totalQuestions: 1,\n  score: 0,\n  currentQuestion: '',\n  options: [],\n  selectedOption: undefined,\n  correctAnswer: '',\n  response: '',\n  questions: [],\n  lastQuestion: false,\n  userResponses: [],\n  categories: {},\n  timer: 0\n};\nexport const quizReducer = createReducer(initialState, on(QuizApiActions.loadQuestionsSuccess, (state, {\n  quizQuestions\n}) => ({\n  ...state,\n  questions: quizQuestions,\n  totalQuestions: quizQuestions.length,\n  currentQuestion: quizQuestions[state.currentQuestionNumber - 1].question.text,\n  options: quizQuestions[state.currentQuestionNumber - 1].incorrectAnswers.concat(quizQuestions[state.currentQuestionNumber - 1].correctAnswer).sort(),\n  lastQuestion: quizQuestions.length === state.totalQuestions\n})), on(QuizActions.nextQuestion, state => {\n  const currentQuestionIndex = state.currentQuestionNumber;\n  const nextQuestion = state.questions[currentQuestionIndex];\n  const currentResponse = state.userResponses[currentQuestionIndex] || '';\n  const correctAnswer = nextQuestion.correctAnswer;\n  if (state.currentQuestionNumber > state.totalQuestions) {\n    const nextQuestion = state.questions[state.currentQuestionNumber];\n    // Save the response before moving to the next question\n    const updatedUserResponses = [...state.userResponses];\n    updatedUserResponses[currentQuestionIndex] = currentResponse;\n    return {\n      ...state,\n      currentQuestionNumber: state.currentQuestionNumber + 1,\n      options: nextQuestion.incorrectAnswers.concat(nextQuestion.correctAnswer).sort(),\n      selectedOption: undefined,\n      lastQuestion: false,\n      response: currentResponse,\n      userResponses: updatedUserResponses,\n      correctAnswer\n    };\n  } else {\n    return {\n      ...state,\n      showFooter: false,\n      lastQuestion: true,\n      response: currentResponse,\n      correctAnswer: ''\n    };\n  }\n}), on(QuizActions.skipQuestion, state => {\n  if (state.currentQuestionNumber < state.totalQuestions) {\n    const nextQuestion = state.questions[state.currentQuestionNumber];\n    return {\n      ...state,\n      currentQuestionNumber: state.currentQuestionNumber + 1,\n      options: nextQuestion.incorrectAnswers.concat(nextQuestion.correctAnswer).sort(),\n      selectedOption: undefined\n    };\n  } else {\n    return {\n      ...state\n    };\n  }\n}), on(QuizActions.previousQuestion, state => {\n  if (state.currentQuestionNumber > 1) {\n    const previousQuestionIndex = state.currentQuestionNumber - 2;\n    const previousQuestion = state.questions[previousQuestionIndex];\n    const response = state.userResponses[previousQuestionIndex] || '';\n    const correctAnswer = previousQuestion.correctAnswer;\n    console.log(previousQuestionIndex);\n    return {\n      ...state,\n      currentQuestionNumber: state.currentQuestionNumber - 1,\n      options: previousQuestion.incorrectAnswers.concat(previousQuestion.correctAnswer).sort(),\n      selectedOption: response || undefined,\n      response,\n      correctAnswer\n    };\n  } else {\n    return {\n      ...state\n    };\n  }\n}), on(QuizActions.selectedOption, (state, {\n  selectedOption\n}) => {\n  const correctAnswer = state.questions[state.currentQuestionNumber - 1].correctAnswer;\n  const updatedResponses = [...state.userResponses];\n  updatedResponses[state.currentQuestionNumber - 1] = selectedOption;\n  if (!state.response) {\n    const score = selectedOption === correctAnswer ? state.score + 1 : state.score;\n    return {\n      ...state,\n      score,\n      response: selectedOption,\n      correctAnswer,\n      userResponses: updatedResponses\n    };\n  } else {\n    return {\n      ...state,\n      response: '',\n      userResponses: updatedResponses\n    };\n  }\n}), on(QuizActions.restartQuiz, state => ({\n  ...state,\n  ...initialState\n})), on(QuizApiActions.loadCategoriesSuccess, (state, {\n  categories\n}) => ({\n  ...state,\n  categories\n})), on(QuizActions.setCurrentQuestion, (state, {\n  currentQuestionNumber\n}) => {\n  if (currentQuestionNumber > 0 && currentQuestionNumber <= state.questions.length) {\n    const currentQuestion = state.questions[currentQuestionNumber - 1];\n    return {\n      ...state,\n      currentQuestion: currentQuestion.question.text,\n      options: currentQuestion.incorrectAnswers.concat(currentQuestion.correctAnswer).sort(),\n      currentQuestionNumber: currentQuestionNumber\n    };\n  }\n  return state;\n}));","map":{"version":3,"mappings":"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","names":["createReducer","on","QuizActions","QuizApiActions","QUIZ_APP_FEATURE_KEY","initialState","currentQuestionNumber","totalQuestions","score","currentQuestion","options","selectedOption","undefined","correctAnswer","response","questions","lastQuestion","userResponses","categories","timer","quizReducer","loadQuestionsSuccess","state","quizQuestions","length","question","text","incorrectAnswers","concat","sort","nextQuestion","currentQuestionIndex","currentResponse","updatedUserResponses","showFooter","skipQuestion","previousQuestion","previousQuestionIndex","console","log","updatedResponses","restartQuiz","loadCategoriesSuccess","setCurrentQuestion"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/+state/quiz-app.reducer.ts"],"sourcesContent":["import { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { createReducer, on } from '@ngrx/store';\n\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport { QuizAppEntity } from './quiz-app.models';\nimport { Quiz } from '../quiz/quiz.interface';\nimport { Router } from '@angular/router';\n\nexport const QUIZ_APP_FEATURE_KEY = 'quizApp';\n\nexport const initialState: Quiz = {\n  currentQuestionNumber: 1,\n  totalQuestions: 1,\n  score: 0,\n  currentQuestion: '',\n  options: [],\n  selectedOption: undefined,\n  correctAnswer: '',\n  response: '',\n  questions: [],\n  lastQuestion: false,\n  userResponses: [],\n  categories: {},\n  timer: 0,\n};\n\nexport const quizReducer = createReducer(\n  initialState,\n  on(QuizApiActions.loadQuestionsSuccess, (state, { quizQuestions }) => ({\n    ...state,\n    questions: quizQuestions,\n    totalQuestions: quizQuestions.length,\n    currentQuestion:\n      quizQuestions[state.currentQuestionNumber - 1].question.text,\n    options: quizQuestions[state.currentQuestionNumber - 1].incorrectAnswers\n      .concat(quizQuestions[state.currentQuestionNumber - 1].correctAnswer)\n      .sort(),\n    lastQuestion: quizQuestions.length === state.totalQuestions,\n  })),\n  on(QuizActions.nextQuestion, (state) => {\n    const currentQuestionIndex = state.currentQuestionNumber;\n    const nextQuestion = state.questions[currentQuestionIndex];\n    const currentResponse = state.userResponses[currentQuestionIndex] || '';\n    const correctAnswer = nextQuestion.correctAnswer;\n    if (state.currentQuestionNumber > state.totalQuestions) {\n      const nextQuestion = state.questions[state.currentQuestionNumber];\n\n      // Save the response before moving to the next question\n      const updatedUserResponses = [...state.userResponses];\n      updatedUserResponses[currentQuestionIndex] = currentResponse;\n      return {\n        ...state,\n        currentQuestionNumber: state.currentQuestionNumber + 1,\n        options: nextQuestion.incorrectAnswers\n          .concat(nextQuestion.correctAnswer)\n          .sort(),\n        selectedOption: undefined,\n        lastQuestion: false,\n        response: currentResponse,\n        userResponses: updatedUserResponses,\n        correctAnswer,\n      };\n    } else {\n      return {\n        ...state,\n        showFooter: false,\n        lastQuestion: true,\n        response: currentResponse,\n        correctAnswer: '',\n      };\n    }\n  }),\n  on(QuizActions.skipQuestion, (state) => {\n    if (state.currentQuestionNumber < state.totalQuestions) {\n      const nextQuestion = state.questions[state.currentQuestionNumber];\n      return {\n        ...state,\n        currentQuestionNumber: state.currentQuestionNumber + 1,\n        options: nextQuestion.incorrectAnswers\n          .concat(nextQuestion.correctAnswer)\n          .sort(),\n        selectedOption: undefined,\n      };\n    } else {\n      return { ...state };\n    }\n  }),\n  on(QuizActions.previousQuestion, (state) => {\n    if (state.currentQuestionNumber > 1) {\n      const previousQuestionIndex = state.currentQuestionNumber - 2;\n      const previousQuestion = state.questions[previousQuestionIndex];\n      const response = state.userResponses[previousQuestionIndex] || '';\n      const correctAnswer = previousQuestion.correctAnswer;\n      console.log(previousQuestionIndex);\n      return {\n        ...state,\n        currentQuestionNumber: state.currentQuestionNumber - 1,\n        options: previousQuestion.incorrectAnswers\n          .concat(previousQuestion.correctAnswer)\n          .sort(),\n        selectedOption: response || undefined,\n        response,\n        correctAnswer,\n      };\n    } else {\n      return { ...state };\n    }\n  }),\n  on(QuizActions.selectedOption, (state, { selectedOption }) => {\n    const correctAnswer =\n      state.questions[state.currentQuestionNumber - 1].correctAnswer;\n    const updatedResponses = [...state.userResponses];\n    updatedResponses[state.currentQuestionNumber - 1] = selectedOption;\n    if (!state.response) {\n      const score =\n        selectedOption === correctAnswer ? state.score + 1 : state.score;\n      return {\n        ...state,\n        score,\n        response: selectedOption,\n        correctAnswer,\n        userResponses: updatedResponses,\n      };\n    } else {\n      return {\n        ...state,\n        response: '',\n        userResponses: updatedResponses,\n      };\n    }\n  }),\n  on(QuizActions.restartQuiz, (state) => ({\n    ...state,\n    ...initialState,\n  })),\n  on(QuizApiActions.loadCategoriesSuccess, (state, { categories }) => ({\n    ...state,\n    categories,\n  })),\n  on(QuizActions.setCurrentQuestion, (state, { currentQuestionNumber }) => {\n    if (\n      currentQuestionNumber > 0 &&\n      currentQuestionNumber <= state.questions.length\n    ) {\n      const currentQuestion = state.questions[currentQuestionNumber - 1];\n      return {\n        ...state,\n        currentQuestion: currentQuestion.question.text,\n        options: currentQuestion.incorrectAnswers\n          .concat(currentQuestion.correctAnswer)\n          .sort(),\n        currentQuestionNumber: currentQuestionNumber,\n      };\n    }\n    return state;\n  })\n);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}