{"ast":null,"code":"import { createEffect, Actions, ofType } from '@ngrx/effects';\nimport { catchError, of, map, mergeMap, tap } from 'rxjs';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport { Store } from '@ngrx/store';\nimport { Router } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../quiz-redux.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@ngrx/store\";\nexport class QuizAppEffects {\n  constructor(actions$, quizService, router, store) {\n    this.actions$ = actions$;\n    this.quizService = quizService;\n    this.router = router;\n    this.store = store;\n    // loadTrivia$ = createEffect(() =>\n    //   this.actions$.pipe(\n    //     ofType(QuizActions.submitForm),\n    //     mergeMap((action) =>\n    //       this.quizService.getTrivia(action.formValue).pipe(\n    //         tap(() => {\n    //           console.log('Form submitted successfully');\n    //           this.router.navigate(['/quizstart']);\n    //         }),\n    //         switchMap((quizQuestions) => {\n    //           const totalQuestions = action.formValue.numberOfQuestions;\n    //           const timerDuration = totalQuestions * 10;\n    //           console.log('Timer started');\n    //           interval(1000)\n    //             .pipe(\n    //               take(timerDuration + 1),\n    //               tap((timeElapsed) => {\n    //                 const remainingTime = timerDuration - timeElapsed;\n    //                 const minutes = Math.floor(remainingTime / 60);\n    //                 const seconds = remainingTime % 60;\n    //                 const formattedMinutes =\n    //                   minutes < 10 ? '0' + minutes : '' + minutes;\n    //                 const formattedSeconds =\n    //                   seconds < 10 ? '0' + seconds : '' + seconds;\n    //                 // console.log(\n    //                 //   'Time remaining:',\n    //                 //   `${formattedMinutes}:${formattedSeconds}`\n    //                 // );\n    //                 this.store.dispatch(\n    //                   QuizActions.updateTimer({\n    //                     timer: `${formattedMinutes}:${formattedSeconds}`,\n    //                   })\n    //                 );\n    //                 if (remainingTime === 0) {\n    //                   this.store.dispatch(QuizActions.finishQuiz());\n    //                 }\n    //               })\n    //             )\n    //             .subscribe();\n    //           return [QuizApiActions.loadQuestionsSuccess({ quizQuestions })];\n    //         }),\n    //         catchError((error) => {\n    //           console.error('Error in loadTrivia effect:', error);\n    //           return of(QuizApiActions.loadQuestionsFailure({ error }));\n    //         })\n    //       )\n    //     )\n    //   )\n    // );\n    this.loadCategories$ = createEffect(() => this.actions$.pipe(ofType(QuizActions.loadCategories), mergeMap(() => this.quizService.getCategories().pipe(map(categories => QuizApiActions.loadCategoriesSuccess({\n      categories\n    })), catchError(error => of(QuizApiActions.loadCategoriesFailure({\n      error\n    })))))));\n    this.finishQuiz$ = createEffect(() => this.actions$.pipe(ofType(QuizActions.finishQuiz), tap(() => {\n      this.router.navigate(['/result']);\n    })), {\n      dispatch: false\n    });\n  }\n  static #_ = this.ɵfac = function QuizAppEffects_Factory(t) {\n    return new (t || QuizAppEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.QuizReduxService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.Store));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuizAppEffects,\n    factory: QuizAppEffects.ɵfac\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,OAAO,EAAEC,MAAM,QAAQ,eAAe;AAC7D,SACEC,UAAU,EACVC,EAAE,EACFC,GAAG,EACHC,QAAQ,EACRC,GAAG,QAME,MAAM;AACb,SAASC,WAAW,QAAQ,oBAAoB;AAChD,SAASC,cAAc,QAAQ,oBAAoB;AACnD,SAASC,gBAAgB,QAAQ,uBAAuB;AACxD,SAASC,KAAK,QAAQ,aAAa;AAEnC,SAASC,MAAM,QAAQ,iBAAiB;;;;;;AAGxC,OAAM,MAAOC,cAAc;EACzBC,YACUC,QAAiB,EACjBC,WAA6B,EAC7BC,MAAc,EACdC,KAAY;IAHZ,aAAQ,GAARH,QAAQ;IACR,gBAAW,GAAXC,WAAW;IACX,WAAM,GAANC,MAAM;IACN,UAAK,GAALC,KAAK;IAGf;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA,oBAAe,GAAGlB,YAAY,CAAC,MAC7B,IAAI,CAACe,QAAQ,CAACI,IAAI,CAChBjB,MAAM,CAACM,WAAW,CAACY,cAAc,CAAC,EAClCd,QAAQ,CAAC,MACP,IAAI,CAACU,WAAW,CAACK,aAAa,EAAE,CAACF,IAAI,CACnCd,GAAG,CAAEiB,UAAU,IACbb,cAAc,CAACc,qBAAqB,CAAC;MAAED;IAAU,CAAE,CAAC,CACrD,EACDnB,UAAU,CAAEqB,KAAK,IACfpB,EAAE,CAACK,cAAc,CAACgB,qBAAqB,CAAC;MAAED;IAAK,CAAE,CAAC,CAAC,CACpD,CACF,CACF,CACF,CACF;IACD,gBAAW,GAAGxB,YAAY,CACxB,MACE,IAAI,CAACe,QAAQ,CAACI,IAAI,CAChBjB,MAAM,CAACM,WAAW,CAACkB,UAAU,CAAC,EAC9BnB,GAAG,CAAC,MAAK;MACP,IAAI,CAACU,MAAM,CAACU,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC,CAAC,CACH,EACH;MAAEC,QAAQ,EAAE;IAAK,CAAE,CACpB;EA9EE;EAAC;qBANOf,cAAc;EAAA;EAAA;WAAdA,cAAc;IAAAgB,SAAdhB,cAAc;EAAA","names":["createEffect","Actions","ofType","catchError","of","map","mergeMap","tap","QuizActions","QuizApiActions","QuizReduxService","Store","Router","QuizAppEffects","constructor","actions$","quizService","router","store","pipe","loadCategories","getCategories","categories","loadCategoriesSuccess","error","loadCategoriesFailure","finishQuiz","navigate","dispatch","factory"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/+state/quiz-app.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { createEffect, Actions, ofType } from '@ngrx/effects';\nimport {\n  catchError,\n  of,\n  map,\n  mergeMap,\n  tap,\n  switchMap,\n  interval,\n  takeUntil,\n  EMPTY,\n  take,\n} from 'rxjs';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport { Store } from '@ngrx/store';\nimport { selectTotalQuestions } from './quiz-app.selectors';\nimport { Router } from '@angular/router';\n\n@Injectable()\nexport class QuizAppEffects {\n  constructor(\n    private actions$: Actions,\n    private quizService: QuizReduxService,\n    private router: Router,\n    private store: Store\n  ) {}\n\n  // loadTrivia$ = createEffect(() =>\n  //   this.actions$.pipe(\n  //     ofType(QuizActions.submitForm),\n  //     mergeMap((action) =>\n  //       this.quizService.getTrivia(action.formValue).pipe(\n  //         tap(() => {\n  //           console.log('Form submitted successfully');\n  //           this.router.navigate(['/quizstart']);\n  //         }),\n  //         switchMap((quizQuestions) => {\n  //           const totalQuestions = action.formValue.numberOfQuestions;\n  //           const timerDuration = totalQuestions * 10;\n\n  //           console.log('Timer started');\n  //           interval(1000)\n  //             .pipe(\n  //               take(timerDuration + 1),\n  //               tap((timeElapsed) => {\n  //                 const remainingTime = timerDuration - timeElapsed;\n  //                 const minutes = Math.floor(remainingTime / 60);\n  //                 const seconds = remainingTime % 60;\n  //                 const formattedMinutes =\n  //                   minutes < 10 ? '0' + minutes : '' + minutes;\n  //                 const formattedSeconds =\n  //                   seconds < 10 ? '0' + seconds : '' + seconds;\n  //                 // console.log(\n  //                 //   'Time remaining:',\n  //                 //   `${formattedMinutes}:${formattedSeconds}`\n  //                 // );\n  //                 this.store.dispatch(\n  //                   QuizActions.updateTimer({\n  //                     timer: `${formattedMinutes}:${formattedSeconds}`,\n  //                   })\n  //                 );\n  //                 if (remainingTime === 0) {\n  //                   this.store.dispatch(QuizActions.finishQuiz());\n  //                 }\n  //               })\n  //             )\n  //             .subscribe();\n\n  //           return [QuizApiActions.loadQuestionsSuccess({ quizQuestions })];\n  //         }),\n  //         catchError((error) => {\n  //           console.error('Error in loadTrivia effect:', error);\n  //           return of(QuizApiActions.loadQuestionsFailure({ error }));\n  //         })\n  //       )\n  //     )\n  //   )\n  // );\n\n  loadCategories$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(QuizActions.loadCategories),\n      mergeMap(() =>\n        this.quizService.getCategories().pipe(\n          map((categories) =>\n            QuizApiActions.loadCategoriesSuccess({ categories })\n          ),\n          catchError((error) =>\n            of(QuizApiActions.loadCategoriesFailure({ error }))\n          )\n        )\n      )\n    )\n  );\n  finishQuiz$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(QuizActions.finishQuiz),\n        tap(() => {\n          this.router.navigate(['/result']);\n        })\n      ),\n    { dispatch: false }\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}