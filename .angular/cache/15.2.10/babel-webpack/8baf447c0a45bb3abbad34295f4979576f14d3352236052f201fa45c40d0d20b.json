{"ast":null,"code":"import { createEffect, Actions, ofType } from '@ngrx/effects';\nimport { switchMap, catchError, of, map, tap, withLatestFrom } from 'rxjs';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport { Store, select } from '@ngrx/store';\nimport { selectSelectedCategory, selectSelectedDifficulty } from './quiz-app.selectors';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../quiz-redux.service\";\nimport * as i3 from \"@ngrx/store\";\nexport class QuizAppEffects {\n  constructor(actions$, triviaService, store) {\n    this.actions$ = actions$;\n    this.triviaService = triviaService;\n    this.store = store;\n    // loadTrivia$ = createEffect(() =>\n    //   this.actions$.pipe(\n    //     ofType(QuizActions.loadQuestions),\n    //     mergeMap(() =>\n    //       this.triviaService.getTriviaQuestion().pipe(\n    //         map((questions: any) => {\n    //           console.log('Trivia questions received from Effects:', questions);\n    //           return QuizApiActions.loadQuestionsSuccess({ questions });\n    //         }),\n    //         catchError((error) => {\n    //           console.error('Error in loadTodos effect:', error);\n    //           return of(QuizApiActions.loadQuestionsFailure({ error }));\n    //         })\n    //       )\n    //     )\n    //   )\n    // );\n    this.loadQuestions$ = createEffect(() => this.actions$.pipe(ofType(QuizActions.loadQuestions), withLatestFrom(this.store.pipe(select(selectSelectedCategory)), this.store.pipe(select(selectSelectedDifficulty))), switchMap(([action, selectedCategory, selectedDifficulty]) => this.triviaService.getTriviaQuestion().pipe(map(questions => QuizApiActions.loadQuestionsSuccess({\n      questions\n    })), catchError(error => of(QuizApiActions.loadQuestionsFailure({\n      error\n    })))))));\n    this.loadCategories$ = createEffect(() => this.actions$.pipe(ofType(QuizActions.loadCategories), tap(), switchMap(() => this.triviaService.getcategories().pipe(map(categories => {\n      // console.log('Trivia categories received from Effects:', categories);\n      return QuizApiActions.loadCategoriesSuccess({\n        categories\n      });\n    }), catchError(error => of(QuizApiActions.loadCategoriesFailure({\n      error\n    })))))));\n  }\n  static #_ = this.ɵfac = function QuizAppEffects_Factory(t) {\n    return new (t || QuizAppEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.QuizReduxService), i0.ɵɵinject(i3.Store));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuizAppEffects,\n    factory: QuizAppEffects.ɵfac\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,OAAO,EAAEC,MAAM,QAAQ,eAAe;AAC7D,SACEC,SAAS,EACTC,UAAU,EACVC,EAAE,EACFC,GAAG,EAEHC,GAAG,EACHC,cAAc,QACT,MAAM;AACb,SAASC,WAAW,QAAQ,oBAAoB;AAChD,SAASC,cAAc,QAAQ,oBAAoB;AAEnD,SAASC,gBAAgB,QAAQ,uBAAuB;AAExD,SAASC,KAAK,EAAEC,MAAM,QAAQ,aAAa;AAC3C,SACEC,sBAAsB,EACtBC,wBAAwB,QACnB,sBAAsB;;;;;AAG7B,OAAM,MAAOC,cAAc;EACzBC,YACUC,QAAiB,EACjBC,aAA+B,EAC/BC,KAAY;IAFZ,aAAQ,GAARF,QAAQ;IACR,kBAAa,GAAbC,aAAa;IACb,UAAK,GAALC,KAAK;IAGf;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,mBAAc,GAAGpB,YAAY,CAAC,MAC5B,IAAI,CAACkB,QAAQ,CAACG,IAAI,CAChBnB,MAAM,CAACO,WAAW,CAACa,aAAa,CAAC,EACjCd,cAAc,CACZ,IAAI,CAACY,KAAK,CAACC,IAAI,CAACR,MAAM,CAACC,sBAAsB,CAAC,CAAC,EAC/C,IAAI,CAACM,KAAK,CAACC,IAAI,CAACR,MAAM,CAACE,wBAAwB,CAAC,CAAC,CAClD,EACDZ,SAAS,CAAC,CAAC,CAACoB,MAAM,EAAEC,gBAAgB,EAAEC,kBAAkB,CAAC,KACvD,IAAI,CAACN,aAAa,CAACO,iBAAiB,EAAE,CAACL,IAAI,CACzCf,GAAG,CAAEqB,SAAc,IACjBjB,cAAc,CAACkB,oBAAoB,CAAC;MAAED;IAAS,CAAE,CAAC,CACnD,EACDvB,UAAU,CAAEyB,KAAK,IACfxB,EAAE,CAACK,cAAc,CAACoB,oBAAoB,CAAC;MAAED;IAAK,CAAE,CAAC,CAAC,CACnD,CACF,CACF,CACF,CACF;IAED,oBAAe,GAAG7B,YAAY,CAAC,MAC7B,IAAI,CAACkB,QAAQ,CAACG,IAAI,CAChBnB,MAAM,CAACO,WAAW,CAACsB,cAAc,CAAC,EAClCxB,GAAG,EAAE,EACLJ,SAAS,CAAC,MACR,IAAI,CAACgB,aAAa,CAACa,aAAa,EAAE,CAACX,IAAI,CACrCf,GAAG,CAAE2B,UAAU,IAAI;MACjB;MACA,OAAOvB,cAAc,CAACwB,qBAAqB,CAAC;QAAED;MAAU,CAAE,CAAC;IAC7D,CAAC,CAAC,EACF7B,UAAU,CAAEyB,KAAK,IACfxB,EAAE,CAACK,cAAc,CAACyB,qBAAqB,CAAC;MAAEN;IAAK,CAAE,CAAC,CAAC,CACpD,CACF,CACF,CACF,CACF;EAvDE;EAAC;qBALOb,cAAc;EAAA;EAAA;WAAdA,cAAc;IAAAoB,SAAdpB,cAAc;EAAA","names":["createEffect","Actions","ofType","switchMap","catchError","of","map","tap","withLatestFrom","QuizActions","QuizApiActions","QuizReduxService","Store","select","selectSelectedCategory","selectSelectedDifficulty","QuizAppEffects","constructor","actions$","triviaService","store","pipe","loadQuestions","action","selectedCategory","selectedDifficulty","getTriviaQuestion","questions","loadQuestionsSuccess","error","loadQuestionsFailure","loadCategories","getcategories","categories","loadCategoriesSuccess","loadCategoriesFailure","factory"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/+state/quiz-app.effects.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport { createEffect, Actions, ofType } from '@ngrx/effects';\nimport {\n  switchMap,\n  catchError,\n  of,\n  map,\n  mergeMap,\n  tap,\n  withLatestFrom,\n} from 'rxjs';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport * as QuizAppFeature from './quiz-app.reducer';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport { Question } from '../quiz/quiz.interface';\nimport { Store, select } from '@ngrx/store';\nimport {\n  selectSelectedCategory,\n  selectSelectedDifficulty,\n} from './quiz-app.selectors';\n\n@Injectable()\nexport class QuizAppEffects {\n  constructor(\n    private actions$: Actions,\n    private triviaService: QuizReduxService,\n    private store: Store\n  ) {}\n\n  // loadTrivia$ = createEffect(() =>\n  //   this.actions$.pipe(\n  //     ofType(QuizActions.loadQuestions),\n  //     mergeMap(() =>\n  //       this.triviaService.getTriviaQuestion().pipe(\n  //         map((questions: any) => {\n  //           console.log('Trivia questions received from Effects:', questions);\n  //           return QuizApiActions.loadQuestionsSuccess({ questions });\n  //         }),\n  //         catchError((error) => {\n  //           console.error('Error in loadTodos effect:', error);\n  //           return of(QuizApiActions.loadQuestionsFailure({ error }));\n  //         })\n  //       )\n  //     )\n  //   )\n  // );\n  loadQuestions$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(QuizActions.loadQuestions),\n      withLatestFrom(\n        this.store.pipe(select(selectSelectedCategory)),\n        this.store.pipe(select(selectSelectedDifficulty))\n      ),\n      switchMap(([action, selectedCategory, selectedDifficulty]) =>\n        this.triviaService.getTriviaQuestion().pipe(\n          map((questions: any) =>\n            QuizApiActions.loadQuestionsSuccess({ questions })\n          ),\n          catchError((error) =>\n            of(QuizApiActions.loadQuestionsFailure({ error }))\n          )\n        )\n      )\n    )\n  );\n\n  loadCategories$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(QuizActions.loadCategories),\n      tap(),\n      switchMap(() =>\n        this.triviaService.getcategories().pipe(\n          map((categories) => {\n            // console.log('Trivia categories received from Effects:', categories);\n            return QuizApiActions.loadCategoriesSuccess({ categories });\n          }),\n          catchError((error) =>\n            of(QuizApiActions.loadCategoriesFailure({ error }))\n          )\n        )\n      )\n    )\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}