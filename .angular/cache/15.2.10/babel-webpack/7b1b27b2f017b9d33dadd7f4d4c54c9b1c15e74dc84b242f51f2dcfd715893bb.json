{"ast":null,"code":"import { createReducer, on } from '@ngrx/store';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nexport const QUIZ_APP_FEATURE_KEY = 'quizApp';\nexport const initialState = {\n  totalQuestions: 0,\n  current_score: 0,\n  total_score: 0,\n  questions: [],\n  options: [],\n  currentQuestion: '',\n  current_Question_Index: 0,\n  selectedOption: '',\n  isOptionSelected: false,\n  selectedOptionClass: '',\n  correctAnswerClass: '',\n  userResponses: [],\n  isFirstQuestion$: false,\n  correctAnswer: '',\n  categories: {},\n  selectedNumberOfQuestions: 0,\n  selectedCategory: ''\n};\nexport const quizAppReducer = createReducer(initialState, on(QuizApiActions.loadQuestionsSuccess, (state, {\n  questions\n}) => ({\n  ...state,\n  questions: questions,\n  totalQuestions: questions.length,\n  currentQuestion: questions[state.current_Question_Index].question.text,\n  options: questions[state.current_Question_Index].incorrectAnswers.concat(questions[state.current_Question_Index].correctAnswer).sort()\n})), on(QuizActions.setCurrentQuestion, (state, {\n  question,\n  index\n}) => ({\n  ...state,\n  current_Question_Index: index,\n  currentQuestion: question\n})), on(QuizActions.nextQuestion, state => {\n  const nextIndex = state.current_Question_Index + 1;\n  return {\n    ...state,\n    current_Question_Index: nextIndex,\n    currentQuestion: state.questions[nextIndex]?.question.text\n  };\n}), on(QuizActions.skipQuestion, state => {\n  const nextIndex = state.current_Question_Index + 1;\n  return {\n    ...state,\n    current_Question_Index: nextIndex,\n    currentQuestion: state.questions[nextIndex]?.question.text\n  };\n}), on(QuizActions.previousQuestion, state => {\n  const previousIndex = state.current_Question_Index - 1;\n  // const nextIndex = state.current_Question_Index + 1;\n  return {\n    ...state,\n    current_Question_Index: previousIndex,\n    currentQuestion: state.questions[previousIndex]?.question.text\n  };\n}), on(QuizActions.selectOption, (state, {\n  option\n}) => {\n  const userResponses = [...state.userResponses];\n  userResponses[state.current_Question_Index] = option;\n  return {\n    ...state,\n    selectedOption: option,\n    isOptionSelected: true,\n    selectedOptionClass: state.questions[state.current_Question_Index].correctAnswer === option ? 'correct-answer' : 'incorrect-answer',\n    correctAnswerClass: 'correct-answer',\n    userResponses\n  };\n}), on(QuizActions.updateScore, (state, {\n  score\n}) => {\n  return {\n    ...state,\n    current_score: state.current_score + score\n  };\n}), on(QuizActions.restartQuiz, () => initialState),\n//categories and all work related to form\non(QuizApiActions.loadCategoriesSuccess, (state, {\n  categories\n}) => {\n  // console.log('Categories received in reducer:', categories);\n  return {\n    ...state,\n    categories: categories\n  };\n}));","map":{"version":3,"mappings":"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","names":["createReducer","on","QuizActions","QuizApiActions","QUIZ_APP_FEATURE_KEY","initialState","totalQuestions","current_score","total_score","questions","options","currentQuestion","current_Question_Index","selectedOption","isOptionSelected","selectedOptionClass","correctAnswerClass","userResponses","isFirstQuestion$","correctAnswer","categories","selectedNumberOfQuestions","selectedCategory","quizAppReducer","loadQuestionsSuccess","state","length","question","text","incorrectAnswers","concat","sort","setCurrentQuestion","index","nextQuestion","nextIndex","skipQuestion","previousQuestion","previousIndex","selectOption","option","updateScore","score","restartQuiz","loadCategoriesSuccess"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/+state/quiz-app.reducer.ts"],"sourcesContent":["import { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { createReducer, on } from '@ngrx/store';\n\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport { QuizAppEntity } from './quiz-app.models';\nimport { Quiz } from '../quiz/quiz.interface';\n\nexport const QUIZ_APP_FEATURE_KEY = 'quizApp';\n\nexport const initialState: Quiz = {\n  totalQuestions: 0,\n  current_score: 0,\n  total_score: 0,\n  questions: [],\n  options: [],\n  currentQuestion: '',\n  current_Question_Index: 0,\n  selectedOption: '',\n  isOptionSelected: false,\n  selectedOptionClass: '',\n  correctAnswerClass: '',\n  userResponses: [],\n  isFirstQuestion$: false,\n  correctAnswer: '',\n  categories: {},\n  selectedNumberOfQuestions: 0,\n  selectedCategory: '',\n};\n\nexport const quizAppReducer = createReducer(\n  initialState,\n\n  on(QuizApiActions.loadQuestionsSuccess, (state, { questions }) => ({\n    ...state,\n    questions: questions,\n    totalQuestions: questions.length,\n    currentQuestion: questions[state.current_Question_Index].question.text,\n    options: questions[state.current_Question_Index].incorrectAnswers\n      .concat(questions[state.current_Question_Index].correctAnswer)\n      .sort(),\n  })),\n  on(QuizActions.setCurrentQuestion, (state, { question, index }) => ({\n    ...state,\n    current_Question_Index: index,\n    currentQuestion: question,\n  })),\n\n  on(QuizActions.nextQuestion, (state) => {\n    const nextIndex = state.current_Question_Index + 1;\n\n    return {\n      ...state,\n      current_Question_Index: nextIndex,\n      currentQuestion: state.questions[nextIndex]?.question.text,\n    };\n  }),\n  on(QuizActions.skipQuestion, (state) => {\n    const nextIndex = state.current_Question_Index + 1;\n\n    return {\n      ...state,\n      current_Question_Index: nextIndex,\n      currentQuestion: state.questions[nextIndex]?.question.text,\n    };\n  }),\n  on(QuizActions.previousQuestion, (state) => {\n    const previousIndex = state.current_Question_Index - 1;\n    // const nextIndex = state.current_Question_Index + 1;\n\n    return {\n      ...state,\n      current_Question_Index: previousIndex,\n      currentQuestion: state.questions[previousIndex]?.question.text,\n    };\n  }),\n\n  on(QuizActions.selectOption, (state, { option }) => {\n    const userResponses = [...state.userResponses];\n    userResponses[state.current_Question_Index] = option;\n\n    return {\n      ...state,\n      selectedOption: option,\n      isOptionSelected: true,\n      selectedOptionClass:\n        state.questions[state.current_Question_Index].correctAnswer === option\n          ? 'correct-answer'\n          : 'incorrect-answer',\n      correctAnswerClass: 'correct-answer',\n      userResponses,\n    };\n  }),\n  on(QuizActions.updateScore, (state, { score }) => {\n    return { ...state, current_score: state.current_score + score };\n  }),\n\n  on(QuizActions.restartQuiz, () => initialState),\n\n  //categories and all work related to form\n  on(QuizApiActions.loadCategoriesSuccess, (state, { categories }) => {\n    // console.log('Categories received in reducer:', categories);\n    return {\n      ...state,\n      categories: categories,\n    };\n  })\n);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}