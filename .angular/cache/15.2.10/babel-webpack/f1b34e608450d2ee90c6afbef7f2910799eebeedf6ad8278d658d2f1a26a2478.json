{"ast":null,"code":"import { createEffect, Actions, ofType } from '@ngrx/effects';\nimport { switchMap, catchError, of, map, mergeMap, tap } from 'rxjs';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../quiz-redux.service\";\nexport class QuizAppEffects {\n  constructor(actions$, triviaService // Inject your trivia service\n  ) {\n    this.actions$ = actions$;\n    this.triviaService = triviaService;\n    this.loadTrivia$ = createEffect(() => this.actions$.pipe(ofType(QuizActions.loadQuestions), mergeMap(() => this.triviaService.getTriviaQuestion().pipe(map(questions => {\n      console.log('Trivia questions received from Effects:', questions);\n      return QuizApiActions.loadQuestionsSuccess({\n        questions\n      });\n    }), catchError(error => {\n      console.error('Error in loadTodos effect:', error);\n      return of(QuizApiActions.loadQuestionsFailure({\n        error\n      }));\n    })))));\n    // shuffleArray(array: string[]): string[] {\n    //   return array.sort(() => Math.random() - 0.6);\n    // }\n    this.loadCategories$ = createEffect(() => this.actions$.pipe(ofType(QuizActions.loadCategories), tap(), switchMap(() => this.triviaService.getcategories().pipe(map(categories => {\n      console.log('Trivia categories received from Effects:', categories);\n      return QuizApiActions.loadCategoriesSuccess({\n        categories\n      });\n    }), catchError(error => of(QuizApiActions.loadCategoriesFailure({\n      error\n    })))))));\n  }\n  static #_ = this.ɵfac = function QuizAppEffects_Factory(t) {\n    return new (t || QuizAppEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.QuizReduxService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuizAppEffects,\n    factory: QuizAppEffects.ɵfac\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,OAAO,EAAEC,MAAM,QAAQ,eAAe;AAC7D,SAASC,SAAS,EAAEC,UAAU,EAAEC,EAAE,EAAEC,GAAG,EAAEC,QAAQ,EAAEC,GAAG,QAAQ,MAAM;AACpE,SAASC,WAAW,QAAQ,oBAAoB;AAChD,SAASC,cAAc,QAAQ,oBAAoB;AAEnD,SAASC,gBAAgB,QAAQ,uBAAuB;;;;AAIxD,OAAM,MAAOC,cAAc;EACzBC,YACUC,QAAiB,EACjBC,aAA+B,CAAC;EAAA;IADhC,aAAQ,GAARD,QAAQ;IACR,kBAAa,GAAbC,aAAa;IAGvB,gBAAW,GAAGf,YAAY,CAAC,MACzB,IAAI,CAACc,QAAQ,CAACE,IAAI,CAChBd,MAAM,CAACO,WAAW,CAACQ,aAAa,CAAC,EACjCV,QAAQ,CAAC,MACP,IAAI,CAACQ,aAAa,CAACG,iBAAiB,EAAE,CAACF,IAAI,CACzCV,GAAG,CAAEa,SAAc,IAAI;MACrBC,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAEF,SAAS,CAAC;MACjE,OAAOT,cAAc,CAACY,oBAAoB,CAAC;QAAEH;MAAS,CAAE,CAAC;IAC3D,CAAC,CAAC,EACFf,UAAU,CAAEmB,KAAK,IAAI;MACnBH,OAAO,CAACG,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,OAAOlB,EAAE,CAACK,cAAc,CAACc,oBAAoB,CAAC;QAAED;MAAK,CAAE,CAAC,CAAC;IAC3D,CAAC,CAAC,CACH,CACF,CACF,CACF;IACD;IACA;IACA;IACA,oBAAe,GAAGvB,YAAY,CAAC,MAC7B,IAAI,CAACc,QAAQ,CAACE,IAAI,CAChBd,MAAM,CAACO,WAAW,CAACgB,cAAc,CAAC,EAClCjB,GAAG,EAAE,EACLL,SAAS,CAAC,MACR,IAAI,CAACY,aAAa,CAACW,aAAa,EAAE,CAACV,IAAI,CACrCV,GAAG,CAAEqB,UAAU,IAAI;MACjBP,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAEM,UAAU,CAAC;MACnE,OAAOjB,cAAc,CAACkB,qBAAqB,CAAC;QAAED;MAAU,CAAE,CAAC;IAC7D,CAAC,CAAC,EACFvB,UAAU,CAAEmB,KAAK,IACflB,EAAE,CAACK,cAAc,CAACmB,qBAAqB,CAAC;MAAEN;IAAK,CAAE,CAAC,CAAC,CACpD,CACF,CACF,CACF,CACF;EAtCE;EAAC;qBAJOX,cAAc;EAAA;EAAA;WAAdA,cAAc;IAAAkB,SAAdlB,cAAc;EAAA","names":["createEffect","Actions","ofType","switchMap","catchError","of","map","mergeMap","tap","QuizActions","QuizApiActions","QuizReduxService","QuizAppEffects","constructor","actions$","triviaService","pipe","loadQuestions","getTriviaQuestion","questions","console","log","loadQuestionsSuccess","error","loadQuestionsFailure","loadCategories","getcategories","categories","loadCategoriesSuccess","loadCategoriesFailure","factory"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/+state/quiz-app.effects.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport { createEffect, Actions, ofType } from '@ngrx/effects';\nimport { switchMap, catchError, of, map, mergeMap, tap } from 'rxjs';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport * as QuizAppFeature from './quiz-app.reducer';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport { Question } from '../quiz/quiz.interface';\n\n@Injectable()\nexport class QuizAppEffects {\n  constructor(\n    private actions$: Actions,\n    private triviaService: QuizReduxService // Inject your trivia service\n  ) {}\n\n  loadTrivia$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(QuizActions.loadQuestions),\n      mergeMap(() =>\n        this.triviaService.getTriviaQuestion().pipe(\n          map((questions: any) => {\n            console.log('Trivia questions received from Effects:', questions);\n            return QuizApiActions.loadQuestionsSuccess({ questions });\n          }),\n          catchError((error) => {\n            console.error('Error in loadTodos effect:', error);\n            return of(QuizApiActions.loadQuestionsFailure({ error }));\n          })\n        )\n      )\n    )\n  );\n  // shuffleArray(array: string[]): string[] {\n  //   return array.sort(() => Math.random() - 0.6);\n  // }\n  loadCategories$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(QuizActions.loadCategories),\n      tap(),\n      switchMap(() =>\n        this.triviaService.getcategories().pipe(\n          map((categories) => {\n            console.log('Trivia categories received from Effects:', categories);\n            return QuizApiActions.loadCategoriesSuccess({ categories });\n          }),\n          catchError((error) =>\n            of(QuizApiActions.loadCategoriesFailure({ error }))\n          )\n        )\n      )\n    )\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}