{"ast":null,"code":"import { Question } from './quiz.interface';\nimport { Store, select } from '@ngrx/store';\nimport { QuizActions } from '../+state/quiz-app.actions';\nimport { combineLatest, map, take } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { selectCorrectAnswer, selectCurrentQuestion, selectCurrentQuestionIndex, selectCurrentScore, selectSelectedOption, selectTotalQuestions, selectUserResponses } from '../+state/quiz-app.selectors';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/router\";\nexport class QuizComponent {\n  // state: Quiz = {\n  //   totalQuestions: 0,\n  //   current_score: 0,\n  //   total_score: 0,\n  //   questions: [],\n  //   options: [],\n  //   currentQuestion: '',\n  //   current_Question_Index: 0,\n  // };\n  constructor(store, router) {\n    this.store = store;\n    this.router = router;\n    this.isOptionSelected = false;\n    this.selectedOption = null;\n    this.selectedOptionClass = null;\n    this.correctAnswerClass = null;\n    this.nextBtn = 'Next';\n  }\n  ngOnInit() {\n    // ====================================================\n    this.store.dispatch(QuizActions.loadQuestions());\n    this.currentQuestionIndex$ = this.store.pipe(select(selectCurrentQuestionIndex), map(index => index + 1));\n    this.totalQuestions$ = this.store.pipe(select(selectTotalQuestions));\n    this.currentQuestion$ = this.store.pipe(select(selectCurrentQuestion));\n    this.correctAnswer$ = this.store.pipe(select(selectCorrectAnswer));\n    this.currentScore$ = this.store.pipe(select(selectCurrentScore));\n    // for previous question\n    this.isFirstQuestion$ = this.currentQuestionIndex$.pipe(map(index => index === 1));\n    this.userResponses$ = this.store.pipe(select(selectUserResponses));\n    this.isLastQuestion$ = combineLatest([this.currentQuestionIndex$, this.totalQuestions$]).pipe(map(([index, totalQuestions]) => {\n      console.log('Total Questions:', totalQuestions);\n      const lastQuestion = (index ?? 0) > (totalQuestions ?? 0);\n      return lastQuestion;\n    }));\n    // ===============================\n    this.store.pipe(select(selectSelectedOption)).subscribe(selectedOption => {\n      this.selectedOption = selectedOption;\n    });\n    // ================================================================\n    //this is only to show in console and otherwise not working at all\n    this.correctAnswer$.subscribe(correctAnswer => console.log('Correct Answer:', correctAnswer));\n    this.currentQuestionIndex$.subscribe(index => {\n      console.log('Current Question Index:', index);\n    });\n    this.currentQuestionIndex$.subscribe(index => {\n      if (index && index === 10) {\n        this.nextBtn = 'Complete';\n      }\n    });\n  }\n  skipQuestion() {\n    console.log('skip');\n    this.store.dispatch(QuizActions.skipQuestion());\n    this.currentQuestionIndex$.subscribe(index => {\n      if (index && index > 10) {\n        this.router.navigate(['/skip']);\n      }\n    });\n  }\n  nextQuestion() {\n    this.store.dispatch(QuizActions.nextQuestion());\n    // reset styling\n    this.selectedOption = null;\n    this.selectedOptionClass = null;\n    this.correctAnswerClass = null;\n    this.isOptionSelected = false;\n    this.currentQuestionIndex$.subscribe(index => {\n      if (index && index > 10) {\n        this.router.navigate(['/result']);\n      }\n    });\n  }\n  previousQuestion() {\n    this.store.dispatch(QuizActions.previousQuestion());\n    combineLatest([this.currentQuestion$, this.userResponses$]).pipe(take(1)).subscribe(([currentQuestion, userResponses]) => {\n      console.log('Current Question:', currentQuestion);\n      console.log('User Responses:', userResponses);\n    });\n    this.userResponses$.pipe(take(1)).subscribe(userResponses => {\n      console.log('Selected Responses:', userResponses);\n    });\n    this.isOptionSelected = true;\n  }\n  isCorrectAnswer(option) {\n    let correctAnswer;\n    this.store.pipe(select(selectCurrentQuestion)).subscribe(currentQuestion => {\n      if (currentQuestion) {\n        correctAnswer = currentQuestion.correctAnswer;\n      }\n    });\n    return !!correctAnswer && correctAnswer === option;\n  }\n  // Function to handle option selection\n  selectOption(option) {\n    if (!this.selectedOption) {\n      this.selectedOption = option;\n      console.log('Selected Option:', this.selectedOption);\n      const isCorrect = this.isCorrectAnswer(option);\n      this.store.dispatch(QuizActions.selectOption({\n        option,\n        isCorrect\n      }));\n      if (isCorrect) {\n        this.store.dispatch(QuizActions.updateScore({\n          score: 1\n        }));\n      }\n      this.selectedOptionClass = isCorrect ? 'correct-answer' : 'incorrect-answer';\n      this.correctAnswerClass = 'correct-answer';\n      this.isOptionSelected = true;\n    }\n  }\n  static #_ = this.ɵfac = function QuizComponent_Factory(t) {\n    return new (t || QuizComponent)(i0.ɵɵdirectiveInject(i1.Store), i0.ɵɵdirectiveInject(i2.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: QuizComponent,\n    selectors: [[\"quiz-app-quiz\"]],\n    decls: 14,\n    vars: 0,\n    consts: [[1, \"side-btn\"], [1, \"nav\"], [1, \"navbar\"]],\n    template: function QuizComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"section\")(1, \"div\", 0)(2, \"button\");\n        i0.ɵɵtext(3, \"side\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(4, \"div\", 1)(5, \"div\", 2)(6, \"button\");\n        i0.ɵɵtext(7, \"Previous\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"button\");\n        i0.ɵɵtext(9, \"Question 1/6\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"button\");\n        i0.ɵɵtext(11, \"Next\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"button\");\n        i0.ɵɵtext(13, \"Option panel\");\n        i0.ɵɵelementEnd()()();\n      }\n    },\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,QAAQ,QAAc,kBAAkB;AACjD,SAASC,KAAK,EAAEC,MAAM,QAAQ,aAAa;AAC3C,SAASC,WAAW,QAAQ,4BAA4B;AACxD,SAAqBC,aAAa,EAAEC,GAAG,EAAEC,IAAI,QAAQ,MAAM;AAC3D,SAASC,MAAM,QAAQ,iBAAiB;AACxC,SACEC,mBAAmB,EACnBC,qBAAqB,EACrBC,0BAA0B,EAC1BC,kBAAkB,EAClBC,oBAAoB,EACpBC,oBAAoB,EACpBC,mBAAmB,QACd,8BAA8B;;;;AAOrC,OAAM,MAAOC,aAAa;EAiBxB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEAC,YAAoBC,KAAY,EAAUC,MAAc;IAApC,UAAK,GAALD,KAAK;IAAiB,WAAM,GAANC,MAAM;IAlBhD,qBAAgB,GAAG,KAAK;IAExB,mBAAc,GAAkB,IAAI;IACpC,wBAAmB,GAAkB,IAAI;IACzC,uBAAkB,GAAkB,IAAI;IAGxC,YAAO,GAAG,MAAM;EAW2C;EAE3DC,QAAQ;IACN;IACA,IAAI,CAACF,KAAK,CAACG,QAAQ,CAACjB,WAAW,CAACkB,aAAa,EAAE,CAAC;IAChD,IAAI,CAACC,qBAAqB,GAAG,IAAI,CAACL,KAAK,CAACM,IAAI,CAC1CrB,MAAM,CAACQ,0BAA0B,CAAC,EAClCL,GAAG,CAAEmB,KAAK,IAAKA,KAAK,GAAG,CAAC,CAAC,CAC1B;IACD,IAAI,CAACC,eAAe,GAAG,IAAI,CAACR,KAAK,CAACM,IAAI,CAACrB,MAAM,CAACW,oBAAoB,CAAC,CAAC;IACpE,IAAI,CAACa,gBAAgB,GAAG,IAAI,CAACT,KAAK,CAACM,IAAI,CAACrB,MAAM,CAACO,qBAAqB,CAAC,CAAC;IACtE,IAAI,CAACkB,cAAc,GAAG,IAAI,CAACV,KAAK,CAACM,IAAI,CAACrB,MAAM,CAACM,mBAAmB,CAAC,CAAC;IAClE,IAAI,CAACoB,aAAa,GAAG,IAAI,CAACX,KAAK,CAACM,IAAI,CAACrB,MAAM,CAACS,kBAAkB,CAAC,CAAC;IAChE;IACA,IAAI,CAACkB,gBAAgB,GAAG,IAAI,CAACP,qBAAqB,CAACC,IAAI,CACrDlB,GAAG,CAAEmB,KAAK,IAAKA,KAAK,KAAK,CAAC,CAAC,CAC5B;IACD,IAAI,CAACM,cAAc,GAAG,IAAI,CAACb,KAAK,CAACM,IAAI,CAACrB,MAAM,CAACY,mBAAmB,CAAC,CAAC;IAClE,IAAI,CAACiB,eAAe,GAAG3B,aAAa,CAAC,CACnC,IAAI,CAACkB,qBAAqB,EAC1B,IAAI,CAACG,eAAe,CACrB,CAAC,CAACF,IAAI,CACLlB,GAAG,CAAC,CAAC,CAACmB,KAAK,EAAEQ,cAAc,CAAC,KAAI;MAC9BC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,cAAc,CAAC;MAC/C,MAAMG,YAAY,GAAG,CAACX,KAAK,IAAI,CAAC,KAAKQ,cAAc,IAAI,CAAC,CAAC;MACzD,OAAOG,YAAY;IACrB,CAAC,CAAC,CACH;IACD;IACA,IAAI,CAAClB,KAAK,CACPM,IAAI,CAACrB,MAAM,CAACU,oBAAoB,CAAC,CAAC,CAClCwB,SAAS,CAAEC,cAA6B,IAAI;MAC3C,IAAI,CAACA,cAAc,GAAGA,cAAc;IACtC,CAAC,CAAC;IAEJ;IACA;IACA,IAAI,CAACV,cAAc,CAACS,SAAS,CAAEE,aAAa,IAC1CL,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEI,aAAa,CAAC,CAC9C;IACD,IAAI,CAAChB,qBAAqB,CAACc,SAAS,CAAEZ,KAAK,IAAI;MAC7CS,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEV,KAAK,CAAC;IAC/C,CAAC,CAAC;IACF,IAAI,CAACF,qBAAqB,CAACc,SAAS,CAAEZ,KAAK,IAAI;MAC7C,IAAIA,KAAK,IAAIA,KAAK,KAAK,EAAE,EAAE;QACzB,IAAI,CAACe,OAAO,GAAG,UAAU;;IAE7B,CAAC,CAAC;EACJ;EAEAC,YAAY;IACVP,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;IACnB,IAAI,CAACjB,KAAK,CAACG,QAAQ,CAACjB,WAAW,CAACqC,YAAY,EAAE,CAAC;IAC/C,IAAI,CAAClB,qBAAqB,CAACc,SAAS,CAAEZ,KAAK,IAAI;MAC7C,IAAIA,KAAK,IAAIA,KAAK,GAAG,EAAE,EAAE;QACvB,IAAI,CAACN,MAAM,CAACuB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;;IAEnC,CAAC,CAAC;EACJ;EACAC,YAAY;IACV,IAAI,CAACzB,KAAK,CAACG,QAAQ,CAACjB,WAAW,CAACuC,YAAY,EAAE,CAAC;IAC/C;IACA,IAAI,CAACL,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACM,mBAAmB,GAAG,IAAI;IAC/B,IAAI,CAACC,kBAAkB,GAAG,IAAI;IAC9B,IAAI,CAACC,gBAAgB,GAAG,KAAK;IAE7B,IAAI,CAACvB,qBAAqB,CAACc,SAAS,CAAEZ,KAAK,IAAI;MAC7C,IAAIA,KAAK,IAAIA,KAAK,GAAG,EAAE,EAAE;QACvB,IAAI,CAACN,MAAM,CAACuB,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC;;IAErC,CAAC,CAAC;EACJ;EAEAK,gBAAgB;IACd,IAAI,CAAC7B,KAAK,CAACG,QAAQ,CAACjB,WAAW,CAAC2C,gBAAgB,EAAE,CAAC;IAEnD1C,aAAa,CAAC,CAAC,IAAI,CAACsB,gBAAgB,EAAE,IAAI,CAACI,cAAc,CAAC,CAAC,CACxDP,IAAI,CAACjB,IAAI,CAAC,CAAC,CAAC,CAAC,CACb8B,SAAS,CAAC,CAAC,CAACW,eAAe,EAAEC,aAAa,CAAC,KAAI;MAC9Cf,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEa,eAAe,CAAC;MACjDd,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEc,aAAa,CAAC;IAC/C,CAAC,CAAC;IAEJ,IAAI,CAAClB,cAAc,CAACP,IAAI,CAACjB,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC8B,SAAS,CAAEY,aAAa,IAAI;MAC5Df,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEc,aAAa,CAAC;IACnD,CAAC,CAAC;IACF,IAAI,CAACH,gBAAgB,GAAG,IAAI;EAC9B;EACAI,eAAe,CAACC,MAAc;IAC5B,IAAIZ,aAAiC;IACrC,IAAI,CAACrB,KAAK,CACPM,IAAI,CAACrB,MAAM,CAACO,qBAAqB,CAAC,CAAC,CACnC2B,SAAS,CAAEW,eAAe,IAAI;MAC7B,IAAIA,eAAe,EAAE;QACnBT,aAAa,GAAGS,eAAe,CAACT,aAAa;;IAEjD,CAAC,CAAC;IAEJ,OAAO,CAAC,CAACA,aAAa,IAAIA,aAAa,KAAKY,MAAM;EACpD;EAEA;EACAC,YAAY,CAACD,MAAc;IACzB,IAAI,CAAC,IAAI,CAACb,cAAc,EAAE;MACxB,IAAI,CAACA,cAAc,GAAGa,MAAM;MAC5BjB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE,IAAI,CAACG,cAAc,CAAC;MACpD,MAAMe,SAAS,GAAG,IAAI,CAACH,eAAe,CAACC,MAAM,CAAC;MAE9C,IAAI,CAACjC,KAAK,CAACG,QAAQ,CAACjB,WAAW,CAACgD,YAAY,CAAC;QAAED,MAAM;QAAEE;MAAS,CAAE,CAAC,CAAC;MACpE,IAAIA,SAAS,EAAE;QACb,IAAI,CAACnC,KAAK,CAACG,QAAQ,CAACjB,WAAW,CAACkD,WAAW,CAAC;UAAEC,KAAK,EAAE;QAAC,CAAE,CAAC,CAAC;;MAG5D,IAAI,CAACX,mBAAmB,GAAGS,SAAS,GAChC,gBAAgB,GAChB,kBAAkB;MACtB,IAAI,CAACR,kBAAkB,GAAG,gBAAgB;MAC1C,IAAI,CAACC,gBAAgB,GAAG,IAAI;;EAEhC;EAAC;qBAnJU9B,aAAa;EAAA;EAAA;UAAbA,aAAa;IAAAwC;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QCuC1BC,+BAAS;QACuBA,oBAAI;QAAAA,iBAAS;QAE7CA,8BAAiB;QAELA,wBAAQ;QAAAA,iBAAS;QACzBA,8BAAQ;QAAAA,4BAAY;QAAAA,iBAAS;QAC7BA,+BAAQ;QAAAA,qBAAI;QAAAA,iBAAS;QACrBA,+BAAQ;QAAAA,6BAAY;QAAAA,iBAAS","names":["Question","Store","select","QuizActions","combineLatest","map","take","Router","selectCorrectAnswer","selectCurrentQuestion","selectCurrentQuestionIndex","selectCurrentScore","selectSelectedOption","selectTotalQuestions","selectUserResponses","QuizComponent","constructor","store","router","ngOnInit","dispatch","loadQuestions","currentQuestionIndex$","pipe","index","totalQuestions$","currentQuestion$","correctAnswer$","currentScore$","isFirstQuestion$","userResponses$","isLastQuestion$","totalQuestions","console","log","lastQuestion","subscribe","selectedOption","correctAnswer","nextBtn","skipQuestion","navigate","nextQuestion","selectedOptionClass","correctAnswerClass","isOptionSelected","previousQuestion","currentQuestion","userResponses","isCorrectAnswer","option","selectOption","isCorrect","updateScore","score","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/quiz/quiz.component.ts","/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/quiz/quiz.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Question, Quiz } from './quiz.interface';\nimport { Store, select } from '@ngrx/store';\nimport { QuizActions } from '../+state/quiz-app.actions';\nimport { Observable, combineLatest, map, take } from 'rxjs';\nimport { Router } from '@angular/router';\nimport {\n  selectCorrectAnswer,\n  selectCurrentQuestion,\n  selectCurrentQuestionIndex,\n  selectCurrentScore,\n  selectSelectedOption,\n  selectTotalQuestions,\n  selectUserResponses,\n} from '../+state/quiz-app.selectors';\n\n@Component({\n  selector: 'quiz-app-quiz',\n  templateUrl: './quiz.component.html',\n  styleUrls: ['./quiz.component.scss'],\n})\nexport class QuizComponent implements OnInit {\n  questions$!: Observable<Question[]>;\n  currentQuestionIndex$!: Observable<number | null>;\n  totalQuestions$!: Observable<number | null>;\n  currentQuestion$!: Observable<Question | undefined>;\n  correctAnswer$!: Observable<string>;\n  currentScore$!: Observable<number>;\n  isFirstQuestion$!: Observable<boolean>;\n  isLastQuestion$!: Observable<boolean>;\n  isOptionSelected = false;\n  quizText!: string;\n  selectedOption: string | null = null;\n  selectedOptionClass: string | null = null;\n  correctAnswerClass: string | null = null;\n  selectedOptionIndex$!: Observable<number | null>;\n  userResponses$!: Observable<(string | null)[]>;\n  nextBtn = 'Next';\n  // state: Quiz = {\n  //   totalQuestions: 0,\n  //   current_score: 0,\n  //   total_score: 0,\n  //   questions: [],\n  //   options: [],\n  //   currentQuestion: '',\n  //   current_Question_Index: 0,\n  // };\n\n  constructor(private store: Store, private router: Router) {}\n\n  ngOnInit(): void {\n    // ====================================================\n    this.store.dispatch(QuizActions.loadQuestions());\n    this.currentQuestionIndex$ = this.store.pipe(\n      select(selectCurrentQuestionIndex),\n      map((index) => index + 1)\n    );\n    this.totalQuestions$ = this.store.pipe(select(selectTotalQuestions));\n    this.currentQuestion$ = this.store.pipe(select(selectCurrentQuestion));\n    this.correctAnswer$ = this.store.pipe(select(selectCorrectAnswer));\n    this.currentScore$ = this.store.pipe(select(selectCurrentScore));\n    // for previous question\n    this.isFirstQuestion$ = this.currentQuestionIndex$.pipe(\n      map((index) => index === 1)\n    );\n    this.userResponses$ = this.store.pipe(select(selectUserResponses));\n    this.isLastQuestion$ = combineLatest([\n      this.currentQuestionIndex$,\n      this.totalQuestions$,\n    ]).pipe(\n      map(([index, totalQuestions]) => {\n        console.log('Total Questions:', totalQuestions);\n        const lastQuestion = (index ?? 0) > (totalQuestions ?? 0);\n        return lastQuestion;\n      })\n    );\n    // ===============================\n    this.store\n      .pipe(select(selectSelectedOption))\n      .subscribe((selectedOption: string | null) => {\n        this.selectedOption = selectedOption;\n      });\n\n    // ================================================================\n    //this is only to show in console and otherwise not working at all\n    this.correctAnswer$.subscribe((correctAnswer) =>\n      console.log('Correct Answer:', correctAnswer)\n    );\n    this.currentQuestionIndex$.subscribe((index) => {\n      console.log('Current Question Index:', index);\n    });\n    this.currentQuestionIndex$.subscribe((index) => {\n      if (index && index === 10) {\n        this.nextBtn = 'Complete';\n      }\n    });\n  }\n\n  skipQuestion() {\n    console.log('skip');\n    this.store.dispatch(QuizActions.skipQuestion());\n    this.currentQuestionIndex$.subscribe((index) => {\n      if (index && index > 10) {\n        this.router.navigate(['/skip']);\n      }\n    });\n  }\n  nextQuestion() {\n    this.store.dispatch(QuizActions.nextQuestion());\n    // reset styling\n    this.selectedOption = null;\n    this.selectedOptionClass = null;\n    this.correctAnswerClass = null;\n    this.isOptionSelected = false;\n\n    this.currentQuestionIndex$.subscribe((index) => {\n      if (index && index > 10) {\n        this.router.navigate(['/result']);\n      }\n    });\n  }\n\n  previousQuestion() {\n    this.store.dispatch(QuizActions.previousQuestion());\n\n    combineLatest([this.currentQuestion$, this.userResponses$])\n      .pipe(take(1))\n      .subscribe(([currentQuestion, userResponses]) => {\n        console.log('Current Question:', currentQuestion);\n        console.log('User Responses:', userResponses);\n      });\n\n    this.userResponses$.pipe(take(1)).subscribe((userResponses) => {\n      console.log('Selected Responses:', userResponses);\n    });\n    this.isOptionSelected = true;\n  }\n  isCorrectAnswer(option: string): boolean {\n    let correctAnswer: string | undefined;\n    this.store\n      .pipe(select(selectCurrentQuestion))\n      .subscribe((currentQuestion) => {\n        if (currentQuestion) {\n          correctAnswer = currentQuestion.correctAnswer;\n        }\n      });\n\n    return !!correctAnswer && correctAnswer === option;\n  }\n\n  // Function to handle option selection\n  selectOption(option: string) {\n    if (!this.selectedOption) {\n      this.selectedOption = option;\n      console.log('Selected Option:', this.selectedOption);\n      const isCorrect = this.isCorrectAnswer(option);\n\n      this.store.dispatch(QuizActions.selectOption({ option, isCorrect }));\n      if (isCorrect) {\n        this.store.dispatch(QuizActions.updateScore({ score: 1 }));\n      }\n\n      this.selectedOptionClass = isCorrect\n        ? 'correct-answer'\n        : 'incorrect-answer';\n      this.correctAnswerClass = 'correct-answer';\n      this.isOptionSelected = true;\n    }\n  }\n}\n","<!-- <section class=\"section-1\" id=\"section-1\">\n  <main>\n    <ng-container>\n      <div\n        *ngIf=\"{\n          currentQuestion: currentQuestion$ | async,\n          totalQuestions: totalQuestions$ | async\n        } as data\"\n      >\n        <div *ngIf=\"data.currentQuestion\">\n          <h3 class=\"text-container\">Redux Angular Quiz</h3>\n          <div class=\"flex\">\n            <p>\n              {{ currentQuestionIndex$ | async }}/{{ totalQuestions$ | async }}\n            </p>\n            <p>\n              Score: {{ currentScore$ | async }}/{{ totalQuestions$ | async }}\n            </p>\n          </div>\n          <p class=\"question-style\">\n            {{ data.currentQuestion.question.text }}\n          </p>\n          <div class=\"quiz-options\">\n            <button\n              class=\"option-btn\"\n              [ngClass]=\"{\n                'selected-option': selectedOption === option,\n                'correct-answer':\n                  correctAnswerClass === 'correct-answer' &&\n                  isCorrectAnswer(option)\n              }\"\n              *ngFor=\"let option of data.currentQuestion.options; let i = index\"\n              (click)=\"selectOption(option)\"\n            >\n              <span class=\"alphabet\">{{ i + 1 }}</span>\n              {{ option }}\n            </button>\n          </div>\n          <div class=\"btn-flex\">\n            <button\n              class=\"next-btn\"\n              (click)=\"previousQuestion()\"\n              [disabled]=\"isFirstQuestion$ | async\"\n            >\n              Previous\n            </button>\n            <button class=\"next-btn\" (click)=\"skipQuestion()\">Skip</button>\n            <button\n              class=\"next-btn\"\n              (click)=\"nextQuestion()\"\n              [disabled]=\"!isOptionSelected\"\n            >\n              {{ nextBtn }}\n            </button>\n          </div>\n        </div>\n      </div>\n    </ng-container>\n  </main>\n</section> -->\n<section>\n  <div class=\"side-btn\"><button>side</button></div>\n</section>\n<div class=\"nav\">\n  <div class=\"navbar\">\n    <button>Previous</button>\n    <button>Question 1/6</button>\n    <button>Next</button>\n    <button>Option panel</button>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}