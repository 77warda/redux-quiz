{"ast":null,"code":"import { createReducer, on } from '@ngrx/store';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nexport const QUIZ_APP_FEATURE_KEY = 'quizApp';\n// export const initialState: Quiz = {\n//   totalQuestions: 0,\n//   current_score: 0,\n//   total_score: 0,\n//   questions: [],\n//   options: [],\n//   currentQuestion: '',\n//   current_Question_Index: 0,\n//   selectedOption: '',\n//   isOptionSelected: false,\n//   selectedOptionClass: '',\n//   correctAnswerClass: '',\n//   userResponses: [],\n//   isFirstQuestion$: false,\n//   correctAnswer: '',\n//   categories: {},\n//   selectedNumberOfQuestions: 0,\n//   selectedCategory: '',\n//   selectedDifficulty: '',\n// };\n// export const quizAppReducer = createReducer(\n//   initialState,\n//   on(QuizApiActions.loadQuestionsSuccess, (state, { questions }) => ({\n//     ...state,\n//     questions: questions,\n//     totalQuestions: questions.length,\n//     currentQuestion: questions[state.current_Question_Index].question.text,\n//     options: questions[state.current_Question_Index].incorrectAnswers\n//       .concat(questions[state.current_Question_Index].correctAnswer)\n//       .sort(),\n//   })),\n//   on(QuizActions.setCurrentQuestion, (state, { question, index }) => ({\n//     ...state,\n//     current_Question_Index: index,\n//     currentQuestion: question,\n//   })),\n//   on(QuizActions.nextQuestion, (state) => {\n//     const nextIndex = state.current_Question_Index + 1;\n//     return {\n//       ...state,\n//       current_Question_Index: nextIndex,\n//       currentQuestion: state.questions[nextIndex]?.question.text,\n//     };\n//   }),\n//   on(QuizActions.skipQuestion, (state) => {\n//     const nextIndex = state.current_Question_Index + 1;\n//     return {\n//       ...state,\n//       current_Question_Index: nextIndex,\n//       currentQuestion: state.questions[nextIndex]?.question.text,\n//     };\n//   }),\n//   on(QuizActions.previousQuestion, (state) => {\n//     const previousIndex = state.current_Question_Index - 1;\n//     // const nextIndex = state.current_Question_Index + 1;\n//     return {\n//       ...state,\n//       current_Question_Index: previousIndex,\n//       currentQuestion: state.questions[previousIndex]?.question.text,\n//     };\n//   }),\n//   on(QuizActions.selectOption, (state, { option }) => {\n//     const userResponses = [...state.userResponses];\n//     userResponses[state.current_Question_Index] = option;\n//     return {\n//       ...state,\n//       selectedOption: option,\n//       isOptionSelected: true,\n//       selectedOptionClass:\n//         state.questions[state.current_Question_Index].correctAnswer === option\n//           ? 'correct-answer'\n//           : 'incorrect-answer',\n//       correctAnswerClass: 'correct-answer',\n//       userResponses,\n//     };\n//   }),\n//   on(QuizActions.updateScore, (state, { score }) => {\n//     return { ...state, current_score: state.current_score + score };\n//   }),\n//   on(QuizActions.restartQuiz, () => initialState),\n//   //categories and all work related to form\n//   on(QuizApiActions.loadCategoriesSuccess, (state, { categories }) => {\n//     // console.log('Categories received in reducer:', categories);\n//     return {\n//       ...state,\n//       categories: categories,\n//     };\n//   }),\n//   on(\n//     QuizActions.setSelectedNumberOfQuestions,\n//     (state, { selectedNumberOfQuestions }) => ({\n//       ...state,\n//       selectedNumberOfQuestions,\n//     })\n//   ),\n//   on(QuizActions.setSelectedCategory, (state, { selectedCategory }) => ({\n//     ...state,\n//     selectedCategory,\n//   })),\n//   on(QuizActions.setSelectedDifficulty, (state, { selectedDifficulty }) => ({\n//     ...state,\n//     selectedDifficulty,\n//   }))\n// );\nexport const initialState = {\n  questions: [],\n  currentQuestionNumber: 1,\n  totalQuestions: 1,\n  score: 0,\n  showFooter: true,\n  currentQuestion: '',\n  options: [],\n  // answered: false,\n  selectedOption: undefined,\n  // selectedButton: false,\n  correctAnswer: '',\n  response: '',\n  lastQuestion: false,\n  previousAllowed: false,\n  userResponses: [],\n  categories: {}\n};\nexport const quizReducer = createReducer(initialState, on(QuizApiActions.triviaLoadedSuccess, (state, {\n  trivia\n}) => ({\n  ...state,\n  questions: trivia,\n  totalQuestions: trivia.length,\n  currentQuestion: trivia[state.currentQuestionNumber - 1].question.text,\n  options: trivia[state.currentQuestionNumber - 1].incorrectAnswers.concat(trivia[state.currentQuestionNumber - 1].correctAnswer).sort(),\n  lastQuestion: trivia.length === state.totalQuestions\n})), on(QuizActions.nextQuestion, state => {\n  const currentQuestionIndex = state.currentQuestionNumber;\n  const nextQuestion = state.questions[currentQuestionIndex];\n  const currentResponse = state.userResponses[currentQuestionIndex] || '';\n  const correctAnswer = nextQuestion.correctAnswer;\n  if (state.currentQuestionNumber < state.totalQuestions) {\n    const nextQuestion = state.questions[state.currentQuestionNumber];\n    console.log('Last Question in reducer:', state.lastQuestion);\n    // Save the response before moving to the next question\n    const updatedUserResponses = [...state.userResponses];\n    updatedUserResponses[currentQuestionIndex] = currentResponse;\n    return {\n      ...state,\n      currentQuestionNumber: state.currentQuestionNumber + 1,\n      // currentQuestion: nextQuestion.question.text,\n      options: nextQuestion.incorrectAnswers.concat(nextQuestion.correctAnswer).sort(),\n      selectedOption: undefined,\n      lastQuestion: false,\n      response: currentResponse,\n      userResponses: updatedUserResponses,\n      correctAnswer\n    };\n  } else {\n    console.log('Setting lastQuestion to true in reducer');\n    return {\n      ...state,\n      showFooter: false,\n      lastQuestion: true,\n      response: currentResponse,\n      correctAnswer: ''\n    };\n  }\n}), on(QuizActions.skipQuestion, state => {\n  if (state.currentQuestionNumber < state.totalQuestions) {\n    const nextQuestion = state.questions[state.currentQuestionNumber];\n    return {\n      ...state,\n      currentQuestionNumber: state.currentQuestionNumber + 1,\n      // currentQuestion: nextQuestion.question.text,\n      options: nextQuestion.incorrectAnswers.concat(nextQuestion.correctAnswer).sort(),\n      selectedOption: undefined\n    };\n  } else {\n    return {\n      ...state,\n      showFooter: false\n    };\n  }\n}), on(QuizActions.previousQuestion, state => {\n  if (state.currentQuestionNumber > 1) {\n    const previousQuestionIndex = state.currentQuestionNumber - 2;\n    const previousQuestion = state.questions[previousQuestionIndex];\n    const response = state.userResponses[previousQuestionIndex] || '';\n    const correctAnswer = previousQuestion.correctAnswer;\n    console.log(previousQuestionIndex);\n    return {\n      ...state,\n      currentQuestionNumber: state.currentQuestionNumber - 1,\n      // currentQuestion: previousQuestion.question.text,\n      options: previousQuestion.incorrectAnswers.concat(previousQuestion.correctAnswer).sort(),\n      selectedOption: response || undefined,\n      response,\n      correctAnswer,\n      previousAllowed: true\n    };\n  } else {\n    console.log('previous allowed');\n    return {\n      ...state,\n      previousAllowed: false\n    };\n  }\n}), on(QuizActions.answerQuestion, (state, {\n  guess\n}) => {\n  const correctAnswer = state.questions[state.currentQuestionNumber - 1].correctAnswer;\n  const updatedResponses = [...state.userResponses];\n  updatedResponses[state.currentQuestionNumber - 1] = guess;\n  if (!state.response) {\n    const score = guess === correctAnswer ? state.score + 1 : state.score;\n    return {\n      ...state,\n      // answered: true,\n      // selectedButton: true,\n      score,\n      response: guess,\n      correctAnswer,\n      userResponses: updatedResponses\n    };\n  } else {\n    return {\n      ...state,\n      // selectedButton: false\n      response: '',\n      userResponses: updatedResponses\n    };\n  }\n}), on(QuizActions.restartQuiz, state => ({\n  ...state,\n  ...initialState\n})), on(QuizApiActions.loadCategoriesSuccess, (state, {\n  categories\n}) => ({\n  ...state,\n  categories\n})), on(QuizActions.setCurrentQuestion, (state, {\n  currentQuestionNumber\n}) => {\n  if (currentQuestionNumber > 0 && currentQuestionNumber <= state.questions.length) {\n    const currentQuestion = state.questions[currentQuestionNumber - 1];\n    return {\n      ...state,\n      currentQuestion: currentQuestion.question.text,\n      options: currentQuestion.incorrectAnswers.concat(currentQuestion.correctAnswer).sort(),\n      currentQuestionNumber: currentQuestionNumber\n    };\n  }\n  return state;\n}));","map":{"version":3,"mappings":"AACA,SAASA,aAAa,EAAEC,EAAE,QAAQ,aAAa;AAE/C,SAASC,WAAW,QAAQ,oBAAoB;AAChD,SAASC,cAAc,QAAQ,oBAAoB;AAInD,OAAO,MAAMC,oBAAoB,GAAG,SAAS;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,MAAMC,YAAY,GAAS;EAChCC,SAAS,EAAE,EAAE;EACbC,qBAAqB,EAAE,CAAC;EACxBC,cAAc,EAAE,CAAC;EACjBC,KAAK,EAAE,CAAC;EACRC,UAAU,EAAE,IAAI;EAChBC,eAAe,EAAE,EAAE;EACnBC,OAAO,EAAE,EAAE;EACX;EACAC,cAAc,EAAEC,SAAS;EACzB;EACAC,aAAa,EAAE,EAAE;EACjBC,QAAQ,EAAE,EAAE;EACZC,YAAY,EAAE,KAAK;EACnBC,eAAe,EAAE,KAAK;EACtBC,aAAa,EAAE,EAAE;EACjBC,UAAU,EAAE;CACb;AAED,OAAO,MAAMC,WAAW,GAAGrB,aAAa,CACtCK,YAAY,EACZJ,EAAE,CAACE,cAAc,CAACmB,mBAAmB,EAAE,CAACC,KAAK,EAAE;EAAEC;AAAM,CAAE,MAAM;EAC7D,GAAGD,KAAK;EACRjB,SAAS,EAAEkB,MAAM;EACjBhB,cAAc,EAAEgB,MAAM,CAACC,MAAM;EAC7Bd,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","names":["createReducer","on","QuizActions","QuizApiActions","QUIZ_APP_FEATURE_KEY","initialState","questions","currentQuestionNumber","totalQuestions","score","showFooter","currentQuestion","options","selectedOption","undefined","correctAnswer","response","lastQuestion","previousAllowed","userResponses","categories","quizReducer","triviaLoadedSuccess","state","trivia","length","question","text","incorrectAnswers","concat","sort","nextQuestion","currentQuestionIndex","currentResponse","console","log","updatedUserResponses","skipQuestion","previousQuestion","previousQuestionIndex","answerQuestion","guess","updatedResponses","restartQuiz","loadCategoriesSuccess","setCurrentQuestion"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/+state/quiz-app.reducer.ts"],"sourcesContent":["import { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { createReducer, on } from '@ngrx/store';\n\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport { QuizAppEntity } from './quiz-app.models';\nimport { Quiz } from '../quiz/quiz.interface';\n\nexport const QUIZ_APP_FEATURE_KEY = 'quizApp';\n\n// export const initialState: Quiz = {\n//   totalQuestions: 0,\n//   current_score: 0,\n//   total_score: 0,\n//   questions: [],\n//   options: [],\n//   currentQuestion: '',\n//   current_Question_Index: 0,\n//   selectedOption: '',\n//   isOptionSelected: false,\n//   selectedOptionClass: '',\n//   correctAnswerClass: '',\n//   userResponses: [],\n//   isFirstQuestion$: false,\n//   correctAnswer: '',\n//   categories: {},\n//   selectedNumberOfQuestions: 0,\n//   selectedCategory: '',\n//   selectedDifficulty: '',\n// };\n\n// export const quizAppReducer = createReducer(\n//   initialState,\n\n//   on(QuizApiActions.loadQuestionsSuccess, (state, { questions }) => ({\n//     ...state,\n//     questions: questions,\n//     totalQuestions: questions.length,\n//     currentQuestion: questions[state.current_Question_Index].question.text,\n//     options: questions[state.current_Question_Index].incorrectAnswers\n//       .concat(questions[state.current_Question_Index].correctAnswer)\n//       .sort(),\n//   })),\n//   on(QuizActions.setCurrentQuestion, (state, { question, index }) => ({\n//     ...state,\n//     current_Question_Index: index,\n//     currentQuestion: question,\n//   })),\n\n//   on(QuizActions.nextQuestion, (state) => {\n//     const nextIndex = state.current_Question_Index + 1;\n\n//     return {\n//       ...state,\n//       current_Question_Index: nextIndex,\n//       currentQuestion: state.questions[nextIndex]?.question.text,\n//     };\n//   }),\n//   on(QuizActions.skipQuestion, (state) => {\n//     const nextIndex = state.current_Question_Index + 1;\n\n//     return {\n//       ...state,\n//       current_Question_Index: nextIndex,\n//       currentQuestion: state.questions[nextIndex]?.question.text,\n//     };\n//   }),\n//   on(QuizActions.previousQuestion, (state) => {\n//     const previousIndex = state.current_Question_Index - 1;\n//     // const nextIndex = state.current_Question_Index + 1;\n\n//     return {\n//       ...state,\n//       current_Question_Index: previousIndex,\n//       currentQuestion: state.questions[previousIndex]?.question.text,\n//     };\n//   }),\n\n//   on(QuizActions.selectOption, (state, { option }) => {\n//     const userResponses = [...state.userResponses];\n//     userResponses[state.current_Question_Index] = option;\n\n//     return {\n//       ...state,\n//       selectedOption: option,\n//       isOptionSelected: true,\n//       selectedOptionClass:\n//         state.questions[state.current_Question_Index].correctAnswer === option\n//           ? 'correct-answer'\n//           : 'incorrect-answer',\n//       correctAnswerClass: 'correct-answer',\n//       userResponses,\n//     };\n//   }),\n//   on(QuizActions.updateScore, (state, { score }) => {\n//     return { ...state, current_score: state.current_score + score };\n//   }),\n\n//   on(QuizActions.restartQuiz, () => initialState),\n\n//   //categories and all work related to form\n//   on(QuizApiActions.loadCategoriesSuccess, (state, { categories }) => {\n//     // console.log('Categories received in reducer:', categories);\n//     return {\n//       ...state,\n//       categories: categories,\n//     };\n//   }),\n//   on(\n//     QuizActions.setSelectedNumberOfQuestions,\n//     (state, { selectedNumberOfQuestions }) => ({\n//       ...state,\n//       selectedNumberOfQuestions,\n//     })\n//   ),\n//   on(QuizActions.setSelectedCategory, (state, { selectedCategory }) => ({\n//     ...state,\n//     selectedCategory,\n//   })),\n//   on(QuizActions.setSelectedDifficulty, (state, { selectedDifficulty }) => ({\n//     ...state,\n//     selectedDifficulty,\n//   }))\n// );\n\nexport const initialState: Quiz = {\n  questions: [],\n  currentQuestionNumber: 1,\n  totalQuestions: 1,\n  score: 0,\n  showFooter: true,\n  currentQuestion: '',\n  options: [],\n  // answered: false,\n  selectedOption: undefined,\n  // selectedButton: false,\n  correctAnswer: '',\n  response: '',\n  lastQuestion: false,\n  previousAllowed: false,\n  userResponses: [],\n  categories: {},\n};\n\nexport const quizReducer = createReducer(\n  initialState,\n  on(QuizApiActions.triviaLoadedSuccess, (state, { trivia }) => ({\n    ...state,\n    questions: trivia,\n    totalQuestions: trivia.length,\n    currentQuestion: trivia[state.currentQuestionNumber - 1].question.text,\n    options: trivia[state.currentQuestionNumber - 1].incorrectAnswers\n      .concat(trivia[state.currentQuestionNumber - 1].correctAnswer)\n      .sort(),\n    lastQuestion: trivia.length === state.totalQuestions,\n  })),\n  on(QuizActions.nextQuestion, (state) => {\n    const currentQuestionIndex = state.currentQuestionNumber;\n    const nextQuestion = state.questions[currentQuestionIndex];\n    const currentResponse = state.userResponses[currentQuestionIndex] || '';\n    const correctAnswer = nextQuestion.correctAnswer;\n    if (state.currentQuestionNumber < state.totalQuestions) {\n      const nextQuestion = state.questions[state.currentQuestionNumber];\n      console.log('Last Question in reducer:', state.lastQuestion);\n\n      // Save the response before moving to the next question\n      const updatedUserResponses = [...state.userResponses];\n      updatedUserResponses[currentQuestionIndex] = currentResponse;\n      return {\n        ...state,\n        currentQuestionNumber: state.currentQuestionNumber + 1,\n        // currentQuestion: nextQuestion.question.text,\n        options: nextQuestion.incorrectAnswers\n          .concat(nextQuestion.correctAnswer)\n          .sort(),\n        selectedOption: undefined,\n        lastQuestion: false,\n        response: currentResponse,\n        userResponses: updatedUserResponses,\n        correctAnswer,\n      };\n    } else {\n      console.log('Setting lastQuestion to true in reducer');\n      return {\n        ...state,\n        showFooter: false,\n        lastQuestion: true,\n        response: currentResponse,\n        correctAnswer: '',\n      };\n    }\n  }),\n  on(QuizActions.skipQuestion, (state) => {\n    if (state.currentQuestionNumber < state.totalQuestions) {\n      const nextQuestion = state.questions[state.currentQuestionNumber];\n      return {\n        ...state,\n        currentQuestionNumber: state.currentQuestionNumber + 1,\n        // currentQuestion: nextQuestion.question.text,\n        options: nextQuestion.incorrectAnswers\n          .concat(nextQuestion.correctAnswer)\n          .sort(),\n        selectedOption: undefined,\n      };\n    } else {\n      return { ...state, showFooter: false };\n    }\n  }),\n  on(QuizActions.previousQuestion, (state) => {\n    if (state.currentQuestionNumber > 1) {\n      const previousQuestionIndex = state.currentQuestionNumber - 2;\n      const previousQuestion = state.questions[previousQuestionIndex];\n      const response = state.userResponses[previousQuestionIndex] || '';\n      const correctAnswer = previousQuestion.correctAnswer;\n      console.log(previousQuestionIndex);\n      return {\n        ...state,\n        currentQuestionNumber: state.currentQuestionNumber - 1,\n        // currentQuestion: previousQuestion.question.text,\n        options: previousQuestion.incorrectAnswers\n          .concat(previousQuestion.correctAnswer)\n          .sort(),\n        selectedOption: response || undefined,\n        response,\n        correctAnswer,\n        previousAllowed: true,\n      };\n    } else {\n      console.log('previous allowed');\n      return { ...state, previousAllowed: false };\n    }\n  }),\n  on(QuizActions.answerQuestion, (state, { guess }) => {\n    const correctAnswer =\n      state.questions[state.currentQuestionNumber - 1].correctAnswer;\n    const updatedResponses = [...state.userResponses];\n    updatedResponses[state.currentQuestionNumber - 1] = guess;\n    if (!state.response) {\n      const score = guess === correctAnswer ? state.score + 1 : state.score;\n      return {\n        ...state,\n        // answered: true,\n        // selectedButton: true,\n        score,\n        response: guess,\n        correctAnswer,\n        userResponses: updatedResponses,\n      };\n    } else {\n      return {\n        ...state,\n        // selectedButton: false\n        response: '',\n        userResponses: updatedResponses,\n      };\n    }\n  }),\n  on(QuizActions.restartQuiz, (state) => ({\n    ...state,\n    ...initialState,\n  })),\n  on(QuizApiActions.loadCategoriesSuccess, (state, { categories }) => ({\n    ...state,\n    categories,\n  })),\n  on(QuizActions.setCurrentQuestion, (state, { currentQuestionNumber }) => {\n    if (\n      currentQuestionNumber > 0 &&\n      currentQuestionNumber <= state.questions.length\n    ) {\n      const currentQuestion = state.questions[currentQuestionNumber - 1];\n      return {\n        ...state,\n        currentQuestion: currentQuestion.question.text,\n        options: currentQuestion.incorrectAnswers\n          .concat(currentQuestion.correctAnswer)\n          .sort(),\n        currentQuestionNumber: currentQuestionNumber,\n      };\n    }\n    return state;\n  })\n);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}