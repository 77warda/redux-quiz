{"ast":null,"code":"import { createEffect, Actions, ofType } from '@ngrx/effects';\nimport { catchError, of, map, mergeMap, tap, switchMap, interval, takeUntil, EMPTY } from 'rxjs';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport { Store } from '@ngrx/store';\nimport { selectTotalQuestions } from './quiz-app.selectors';\nimport { Router } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../quiz-redux.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@ngrx/store\";\nexport class QuizAppEffects {\n  constructor(actions$, quizService, router, store) {\n    this.actions$ = actions$;\n    this.quizService = quizService;\n    this.router = router;\n    this.store = store;\n    this.startTimer$ = createEffect(() => this.actions$.pipe(ofType(QuizApiActions.loadQuestionsSuccess), switchMap(() => this.store.select(selectTotalQuestions)), tap(totalQuestions => {\n      let timerDuration = totalQuestions * 10;\n      this.store.dispatch(QuizActions.startTimer());\n      interval(1000).pipe(takeUntil(this.actions$.pipe(ofType(QuizActions.finishQuiz))), tap(() => {\n        timerDuration--;\n        if (timerDuration >= 0) {\n          const minutes = Math.floor(timerDuration / 60);\n          const seconds = timerDuration % 60;\n          const formattedMinutes = minutes < 10 ? '0' + minutes : '' + minutes;\n          const formattedSeconds = seconds < 10 ? '0' + seconds : '' + seconds;\n          this.store.dispatch(QuizActions.updateTimer({\n            uiTimer: `${formattedMinutes}:${formattedSeconds}`\n          }));\n          if (timerDuration === 0) {\n            this.store.dispatch(QuizActions.finishQuiz());\n          }\n        }\n      })).subscribe();\n    }), catchError(error => {\n      console.error('Error in startTimer effect:', error);\n      return EMPTY;\n    })), {\n      dispatch: false\n    });\n    this.loadTrivia$ = createEffect(() => this.actions$.pipe(ofType(QuizActions.submitForm), mergeMap(action => this.quizService.getTrivia(action.formValue).pipe(tap(() => {\n      console.log('Form submitted successfully');\n      this.router.navigate(['/quizstart']);\n    }), map(quizQuestions => QuizApiActions.loadQuestionsSuccess({\n      quizQuestions\n    })), catchError(error => {\n      console.error('Error in loadTrivia effect:', error);\n      return of(QuizApiActions.loadQuestionsFailure({\n        error\n      }));\n    })))));\n    this.loadCategories$ = createEffect(() => this.actions$.pipe(ofType(QuizActions.loadCategories), mergeMap(() => this.quizService.getCategories().pipe(map(categories => QuizApiActions.loadCategoriesSuccess({\n      categories\n    })), catchError(error => of(QuizApiActions.loadCategoriesFailure({\n      error\n    })))))));\n  }\n  static #_ = this.ɵfac = function QuizAppEffects_Factory(t) {\n    return new (t || QuizAppEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.QuizReduxService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.Store));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuizAppEffects,\n    factory: QuizAppEffects.ɵfac\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,OAAO,EAAEC,MAAM,QAAQ,eAAe;AAC7D,SACEC,UAAU,EACVC,EAAE,EACFC,GAAG,EACHC,QAAQ,EACRC,GAAG,EACHC,SAAS,EACTC,QAAQ,EACRC,SAAS,EACTC,KAAK,QACA,MAAM;AACb,SAASC,WAAW,QAAQ,oBAAoB;AAChD,SAASC,cAAc,QAAQ,oBAAoB;AACnD,SAASC,gBAAgB,QAAQ,uBAAuB;AACxD,SAASC,KAAK,QAAQ,aAAa;AACnC,SAASC,oBAAoB,QAAQ,sBAAsB;AAC3D,SAASC,MAAM,QAAQ,iBAAiB;;;;;;AAGxC,OAAM,MAAOC,cAAc;EACzBC,YACUC,QAAiB,EACjBC,WAA6B,EAC7BC,MAAc,EACdC,KAAY;IAHZ,aAAQ,GAARH,QAAQ;IACR,gBAAW,GAAXC,WAAW;IACX,WAAM,GAANC,MAAM;IACN,UAAK,GAALC,KAAK;IAGf,gBAAW,GAAGvB,YAAY,CACxB,MACE,IAAI,CAACoB,QAAQ,CAACI,IAAI,CAChBtB,MAAM,CAACW,cAAc,CAACY,oBAAoB,CAAC,EAC3CjB,SAAS,CAAC,MAAM,IAAI,CAACe,KAAK,CAACG,MAAM,CAACV,oBAAoB,CAAC,CAAC,EACxDT,GAAG,CAAEoB,cAAmB,IAAI;MAC1B,IAAIC,aAAa,GAAGD,cAAc,GAAG,EAAE;MACvC,IAAI,CAACJ,KAAK,CAACM,QAAQ,CAACjB,WAAW,CAACkB,UAAU,EAAE,CAAC;MAC7CrB,QAAQ,CAAC,IAAI,CAAC,CACXe,IAAI,CACHd,SAAS,CAAC,IAAI,CAACU,QAAQ,CAACI,IAAI,CAACtB,MAAM,CAACU,WAAW,CAACmB,UAAU,CAAC,CAAC,CAAC,EAC7DxB,GAAG,CAAC,MAAK;QACPqB,aAAa,EAAE;QACf,IAAIA,aAAa,IAAI,CAAC,EAAE;UACtB,MAAMI,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACN,aAAa,GAAG,EAAE,CAAC;UAC9C,MAAMO,OAAO,GAAGP,aAAa,GAAG,EAAE;UAClC,MAAMQ,gBAAgB,GACpBJ,OAAO,GAAG,EAAE,GAAG,GAAG,GAAGA,OAAO,GAAG,EAAE,GAAGA,OAAO;UAC7C,MAAMK,gBAAgB,GACpBF,OAAO,GAAG,EAAE,GAAG,GAAG,GAAGA,OAAO,GAAG,EAAE,GAAGA,OAAO;UAC7C,IAAI,CAACZ,KAAK,CAACM,QAAQ,CACjBjB,WAAW,CAAC0B,WAAW,CAAC;YACtBC,OAAO,EAAE,GAAGH,gBAAgB,IAAIC,gBAAgB;WACjD,CAAC,CACH;UACD,IAAIT,aAAa,KAAK,CAAC,EAAE;YACvB,IAAI,CAACL,KAAK,CAACM,QAAQ,CAACjB,WAAW,CAACmB,UAAU,EAAE,CAAC;;;MAGnD,CAAC,CAAC,CACH,CACAS,SAAS,EAAE;IAChB,CAAC,CAAC,EACFrC,UAAU,CAAEsC,KAAK,IAAI;MACnBC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,OAAO9B,KAAK;IACd,CAAC,CAAC,CACH,EACH;MAAEkB,QAAQ,EAAE;IAAK,CAAE,CACpB;IAED,gBAAW,GAAG7B,YAAY,CAAC,MACzB,IAAI,CAACoB,QAAQ,CAACI,IAAI,CAChBtB,MAAM,CAACU,WAAW,CAAC+B,UAAU,CAAC,EAC9BrC,QAAQ,CAAEsC,MAAM,IACd,IAAI,CAACvB,WAAW,CAACwB,SAAS,CAACD,MAAM,CAACE,SAAS,CAAC,CAACtB,IAAI,CAC/CjB,GAAG,CAAC,MAAK;MACPmC,OAAO,CAACK,GAAG,CAAC,6BAA6B,CAAC;MAC1C,IAAI,CAACzB,MAAM,CAAC0B,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;IACtC,CAAC,CAAC,EACF3C,GAAG,CAAE4C,aAAa,IAChBpC,cAAc,CAACY,oBAAoB,CAAC;MAAEwB;IAAa,CAAE,CAAC,CACvD,EACD9C,UAAU,CAAEsC,KAAK,IAAI;MACnBC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,OAAOrC,EAAE,CAACS,cAAc,CAACqC,oBAAoB,CAAC;QAAET;MAAK,CAAE,CAAC,CAAC;IAC3D,CAAC,CAAC,CACH,CACF,CACF,CACF;IAED,oBAAe,GAAGzC,YAAY,CAAC,MAC7B,IAAI,CAACoB,QAAQ,CAACI,IAAI,CAChBtB,MAAM,CAACU,WAAW,CAACuC,cAAc,CAAC,EAClC7C,QAAQ,CAAC,MACP,IAAI,CAACe,WAAW,CAAC+B,aAAa,EAAE,CAAC5B,IAAI,CACnCnB,GAAG,CAAEgD,UAAU,IACbxC,cAAc,CAACyC,qBAAqB,CAAC;MAAED;IAAU,CAAE,CAAC,CACrD,EACDlD,UAAU,CAAEsC,KAAK,IACfrC,EAAE,CAACS,cAAc,CAAC0C,qBAAqB,CAAC;MAAEd;IAAK,CAAE,CAAC,CAAC,CACpD,CACF,CACF,CACF,CACF;EA9EE;EAAC;qBANOvB,cAAc;EAAA;EAAA;WAAdA,cAAc;IAAAsC,SAAdtC,cAAc;EAAA","names":["createEffect","Actions","ofType","catchError","of","map","mergeMap","tap","switchMap","interval","takeUntil","EMPTY","QuizActions","QuizApiActions","QuizReduxService","Store","selectTotalQuestions","Router","QuizAppEffects","constructor","actions$","quizService","router","store","pipe","loadQuestionsSuccess","select","totalQuestions","timerDuration","dispatch","startTimer","finishQuiz","minutes","Math","floor","seconds","formattedMinutes","formattedSeconds","updateTimer","uiTimer","subscribe","error","console","submitForm","action","getTrivia","formValue","log","navigate","quizQuestions","loadQuestionsFailure","loadCategories","getCategories","categories","loadCategoriesSuccess","loadCategoriesFailure","factory"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/+state/quiz-app.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { createEffect, Actions, ofType } from '@ngrx/effects';\nimport {\n  catchError,\n  of,\n  map,\n  mergeMap,\n  tap,\n  switchMap,\n  interval,\n  takeUntil,\n  EMPTY,\n} from 'rxjs';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport { Store } from '@ngrx/store';\nimport { selectTotalQuestions } from './quiz-app.selectors';\nimport { Router } from '@angular/router';\n\n@Injectable()\nexport class QuizAppEffects {\n  constructor(\n    private actions$: Actions,\n    private quizService: QuizReduxService,\n    private router: Router,\n    private store: Store\n  ) {}\n\n  startTimer$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(QuizApiActions.loadQuestionsSuccess),\n        switchMap(() => this.store.select(selectTotalQuestions)),\n        tap((totalQuestions: any) => {\n          let timerDuration = totalQuestions * 10;\n          this.store.dispatch(QuizActions.startTimer());\n          interval(1000)\n            .pipe(\n              takeUntil(this.actions$.pipe(ofType(QuizActions.finishQuiz))),\n              tap(() => {\n                timerDuration--;\n                if (timerDuration >= 0) {\n                  const minutes = Math.floor(timerDuration / 60);\n                  const seconds = timerDuration % 60;\n                  const formattedMinutes =\n                    minutes < 10 ? '0' + minutes : '' + minutes;\n                  const formattedSeconds =\n                    seconds < 10 ? '0' + seconds : '' + seconds;\n                  this.store.dispatch(\n                    QuizActions.updateTimer({\n                      uiTimer: `${formattedMinutes}:${formattedSeconds}`,\n                    })\n                  );\n                  if (timerDuration === 0) {\n                    this.store.dispatch(QuizActions.finishQuiz());\n                  }\n                }\n              })\n            )\n            .subscribe();\n        }),\n        catchError((error) => {\n          console.error('Error in startTimer effect:', error);\n          return EMPTY;\n        })\n      ),\n    { dispatch: false }\n  );\n\n  loadTrivia$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(QuizActions.submitForm),\n      mergeMap((action) =>\n        this.quizService.getTrivia(action.formValue).pipe(\n          tap(() => {\n            console.log('Form submitted successfully');\n            this.router.navigate(['/quizstart']);\n          }),\n          map((quizQuestions) =>\n            QuizApiActions.loadQuestionsSuccess({ quizQuestions })\n          ),\n          catchError((error) => {\n            console.error('Error in loadTrivia effect:', error);\n            return of(QuizApiActions.loadQuestionsFailure({ error }));\n          })\n        )\n      )\n    )\n  );\n\n  loadCategories$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(QuizActions.loadCategories),\n      mergeMap(() =>\n        this.quizService.getCategories().pipe(\n          map((categories) =>\n            QuizApiActions.loadCategoriesSuccess({ categories })\n          ),\n          catchError((error) =>\n            of(QuizApiActions.loadCategoriesFailure({ error }))\n          )\n        )\n      )\n    )\n  );\n  // startTimer(duration: number): void {\n  //   setTimeout(() => {\n  //     let timer = duration;\n\n  //     this.store.dispatch(QuizActions.startTimer());\n\n  //     this.store\n  //       .pipe(\n  //         ofType(QuizActions.startTimer),\n  //         switchMap(() => interval(1000)),\n  //         tap(() => {\n  //           if (timer >= 0) {\n  //             const minutes = Math.floor(timer / 60);\n  //             const seconds = timer % 60;\n\n  //             const formattedMinutes =\n  //               minutes < 10 ? '0' + minutes : '' + minutes;\n  //             const formattedSeconds =\n  //               seconds < 10 ? '0' + seconds : '' + seconds;\n\n  //             this.store.dispatch(\n  //               QuizActions.updateTimer({\n  //                 uiTimer: `${formattedMinutes}:${formattedSeconds}`,\n  //               })\n  //             );\n\n  //             if (timer === 0) {\n  //               this.store.dispatch(QuizActions.finishQuiz());\n  //             }\n  //             timer--;\n  //           }\n  //         })\n  //       )\n  //       .subscribe();\n  //   }, 500);\n  // }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}