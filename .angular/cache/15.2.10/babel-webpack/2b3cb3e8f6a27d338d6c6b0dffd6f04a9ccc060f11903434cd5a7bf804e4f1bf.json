{"ast":null,"code":"import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable, catchError, throwError } from 'rxjs';\nimport { Question } from './quiz/quiz.interface';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class QuizReduxService {\n  constructor(http) {\n    this.http = http;\n    // private apiUrl = 'https://the-trivia-api.com/v2/questions';\n    this.apiCatUrl = ' https://the-trivia-api.com/v2';\n    // constructor(private http: HttpClient) {}\n    // getTriviaQuestion(): Observable<Question> {\n    //   return this.http.get<Question>(this.apiUrl).pipe(\n    //     // tap((data) => {\n    //     //   console.log('questions:', data);\n    //     // }),\n    //     catchError((error) => {\n    //       console.error('Error fetching trivia question:', error);\n    //       return throwError(error);\n    //     })\n    //   );\n    // }\n    // getcategories(): Observable<any> {\n    //   return this.http.get<any>(this.apiCatUrl).pipe(\n    //     // tap((data) => {\n    //     //   console.log('Categories:', data);\n    //     // }),\n    //     catchError((error) => {\n    //       console.error('Error fetching trivia question:', error);\n    //       return throwError(error);\n    //     })\n    //   );\n    // }\n    this.apiUrl = 'https://the-trivia-api.com/v2/';\n  }\n  // getTrivia(): Observable<Question[]> {\n  //   return this.http.get<Question[]>('https://the-trivia-api.com/v2/questions');\n  // }\n  getcategories() {\n    return this.http.get(this.apiCatUrl).pipe(\n    // tap((data) => {\n    //   console.log('Categories:', data);\n    // }),\n    catchError(error => {\n      console.error('Error fetching trivia question:', error);\n      return throwError(error);\n    }));\n  }\n  getTrivia(formValue) {\n    let searchParams = new HttpParams();\n    const categories = formValue.categories;\n    const difficulties = formValue.difficulties;\n    const type = formValue.type;\n    const totalQuestions = formValue.totalQuestions;\n    if (categories) {\n      searchParams = searchParams.append('categories', categories);\n    }\n    if (difficulties) {\n      searchParams = searchParams.append('difficulties', difficulties);\n    }\n    if (type) {\n      searchParams = searchParams.append('types', type);\n    }\n    if (totalQuestions) {\n      searchParams = searchParams.append('limit', totalQuestions.toString());\n    }\n    return this.http.get('https://the-trivia-api.com/v2/questions', {\n      params: searchParams\n    });\n  }\n  static #_ = this.ɵfac = function QuizReduxService_Factory(t) {\n    return new (t || QuizReduxService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuizReduxService,\n    factory: QuizReduxService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,EAAEC,UAAU,QAAQ,sBAAsB;AAE7D,SAASC,UAAU,EAAEC,UAAU,EAAOC,UAAU,QAAQ,MAAM;AAC9D,SAAmBC,QAAQ,QAAc,uBAAuB;;;AAKhE,OAAM,MAAOC,gBAAgB;EA6B3BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IA5BxB;IACQ,cAAS,GAAG,gCAAgC;IAEpD;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACQ,WAAM,GAAG,gCAAgC;EACV;EACvC;EACA;EACA;EACAC,aAAa;IACX,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAM,IAAI,CAACC,SAAS,CAAC,CAACC,IAAI;IAC5C;IACA;IACA;IACAT,UAAU,CAAEU,KAAK,IAAI;MACnBC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,OAAOT,UAAU,CAACS,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACH;EACAE,SAAS,CAACC,SAAc;IACtB,IAAIC,YAAY,GAAG,IAAIhB,UAAU,EAAE;IACnC,MAAMiB,UAAU,GAAGF,SAAS,CAACE,UAAU;IACvC,MAAMC,YAAY,GAAGH,SAAS,CAACG,YAAY;IAC3C,MAAMC,IAAI,GAAGJ,SAAS,CAACI,IAAI;IAC3B,MAAMC,cAAc,GAAGL,SAAS,CAACK,cAAc;IAE/C,IAAIH,UAAU,EAAE;MACdD,YAAY,GAAGA,YAAY,CAACK,MAAM,CAAC,YAAY,EAAEJ,UAAU,CAAC;;IAE9D,IAAIC,YAAY,EAAE;MAChBF,YAAY,GAAGA,YAAY,CAACK,MAAM,CAAC,cAAc,EAAEH,YAAY,CAAC;;IAElE,IAAIC,IAAI,EAAE;MACRH,YAAY,GAAGA,YAAY,CAACK,MAAM,CAAC,OAAO,EAAEF,IAAI,CAAC;;IAEnD,IAAIC,cAAc,EAAE;MAClBJ,YAAY,GAAGA,YAAY,CAACK,MAAM,CAAC,OAAO,EAAED,cAAc,CAACE,QAAQ,EAAE,CAAC;;IAExE,OAAO,IAAI,CAACf,IAAI,CAACE,GAAG,CAClB,yCAAyC,EACzC;MACEc,MAAM,EAAEP;KACT,CACF;EACH;EAAC;qBArEUX,gBAAgB;EAAA;EAAA;WAAhBA,gBAAgB;IAAAmB,SAAhBnB,gBAAgB;IAAAoB,YAFf;EAAM","names":["HttpClient","HttpParams","Observable","catchError","throwError","Question","QuizReduxService","constructor","http","getcategories","get","apiCatUrl","pipe","error","console","getTrivia","formValue","searchParams","categories","difficulties","type","totalQuestions","append","toString","params","factory","providedIn"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/quiz-redux.service.ts"],"sourcesContent":["import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, catchError, tap, throwError } from 'rxjs';\nimport { Category, Question, Quiz } from './quiz/quiz.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QuizReduxService {\n  // private apiUrl = 'https://the-trivia-api.com/v2/questions';\n  private apiCatUrl = ' https://the-trivia-api.com/v2';\n\n  // constructor(private http: HttpClient) {}\n\n  // getTriviaQuestion(): Observable<Question> {\n  //   return this.http.get<Question>(this.apiUrl).pipe(\n  //     // tap((data) => {\n  //     //   console.log('questions:', data);\n  //     // }),\n  //     catchError((error) => {\n  //       console.error('Error fetching trivia question:', error);\n  //       return throwError(error);\n  //     })\n  //   );\n  // }\n  // getcategories(): Observable<any> {\n  //   return this.http.get<any>(this.apiCatUrl).pipe(\n  //     // tap((data) => {\n  //     //   console.log('Categories:', data);\n  //     // }),\n  //     catchError((error) => {\n  //       console.error('Error fetching trivia question:', error);\n  //       return throwError(error);\n  //     })\n  //   );\n  // }\n  private apiUrl = 'https://the-trivia-api.com/v2/';\n  constructor(private http: HttpClient) {}\n  // getTrivia(): Observable<Question[]> {\n  //   return this.http.get<Question[]>('https://the-trivia-api.com/v2/questions');\n  // }\n  getcategories(): Observable<any> {\n    return this.http.get<any>(this.apiCatUrl).pipe(\n      // tap((data) => {\n      //   console.log('Categories:', data);\n      // }),\n      catchError((error) => {\n        console.error('Error fetching trivia question:', error);\n        return throwError(error);\n      })\n    );\n  }\n  getTrivia(formValue: any): Observable<Question[]> {\n    let searchParams = new HttpParams();\n    const categories = formValue.categories;\n    const difficulties = formValue.difficulties;\n    const type = formValue.type;\n    const totalQuestions = formValue.totalQuestions;\n\n    if (categories) {\n      searchParams = searchParams.append('categories', categories);\n    }\n    if (difficulties) {\n      searchParams = searchParams.append('difficulties', difficulties);\n    }\n    if (type) {\n      searchParams = searchParams.append('types', type);\n    }\n    if (totalQuestions) {\n      searchParams = searchParams.append('limit', totalQuestions.toString());\n    }\n    return this.http.get<Question[]>(\n      'https://the-trivia-api.com/v2/questions',\n      {\n        params: searchParams,\n      }\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}