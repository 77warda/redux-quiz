{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport { Store, select } from '@ngrx/store';\nimport * as QuizActions from '../+state/quiz-app.actions';\nimport { selectCurrentQuestionIndex, selectQuestions, selectTotalQuestions } from '../+state/quiz-app.selectors';\nlet QuizComponent = class QuizComponent {\n  constructor(triviaService, store) {\n    this.triviaService = triviaService;\n    this.store = store;\n    this.isOptionSelected = false;\n    this.selectedOption = null;\n    this.selectedOptionClass = null;\n    this.correctAnswerClass = null;\n    this.state = {\n      totalQuestions: 0,\n      current_score: 0,\n      total_score: 0,\n      questions: [],\n      options: [],\n      currentQuestion: '',\n      current_Question_Index: 0\n    };\n    this.questions$ = this.store.pipe(select(selectQuestions));\n    this.currentQuestionIndex$ = this.store.pipe(select(selectCurrentQuestionIndex));\n    this.totalQuestions$ = this.store.pipe(select(selectTotalQuestions));\n  }\n  ngOnInit() {\n    this.restartQuiz();\n    this.store.dispatch(QuizActions.loadQuestions());\n    this.logStoreState();\n  }\n  logStoreState() {\n    this.store.subscribe(state => console.log('Store State:', state));\n  }\n  restartQuiz() {\n    // this.fetchTriviaQuestion();\n    this.state.current_score = 0;\n    this.isOptionSelected = false;\n    this.selectedOption = null;\n    this.selectedOptionClass = null;\n    this.correctAnswerClass = null;\n  }\n  shuffleArray(array) {\n    return array.sort(() => Math.random() - 0.6);\n  }\n  // fetchTriviaQuestion() {\n  //   this.triviaService.getTriviaQuestion().subscribe((triviaResponse: any) => {\n  //     if (triviaResponse) {\n  //       const questions: Question[] = triviaResponse.map(\n  //         (questionItem: any) => ({\n  //           question: questionItem.question.text,\n  //           options: this.shuffleArray([\n  //             ...questionItem.incorrectAnswers,\n  //             questionItem.correctAnswer,\n  //           ]),\n  //           correctAnswer: questionItem.correctAnswer,\n  //         })\n  //       );\n  //       // Dispatch the loadQuestionsSuccess action with the correct payload\n  //       this.store.dispatch(QuizActions.loadQuestionsSuccess({ questions }));\n  //       this.state.totalQuestions = triviaResponse.length;\n  //       this.state.total_score = triviaResponse.length;\n  //       this.state.questions = questions;\n  //       this.setCurrentQuestion(0);\n  //     } else {\n  //       console.error('Invalid response structure');\n  //     }\n  //   });\n  // }\n  setCurrentQuestion(index) {\n    this.quizText = 'Redux Angular Quiz';\n    this.state.current_Question_Index = index;\n    this.state.currentQuestion = this.state.questions[index].question;\n    this.state.options = this.state.questions[index].options;\n  }\n  nextQuestion() {\n    const nextIndex = this.state.current_Question_Index + 1;\n    // Dispatch the nextQuestion action\n    this.store.dispatch(QuizActions.nextQuestion());\n    this.setCurrentQuestion(nextIndex);\n    // reset styling\n    this.selectedOption = null;\n    this.selectedOptionClass = null;\n    this.correctAnswerClass = null;\n    this.isOptionSelected = false;\n  }\n  isCorrectAnswer(option) {\n    const correctAnswer = this.state.questions[this.state.current_Question_Index].correctAnswer;\n    return correctAnswer === option;\n  }\n  // Function to handle option selection\n  selectOption(option) {\n    if (!this.selectedOption) {\n      this.selectedOption = option;\n      const isCorrect = this.isCorrectAnswer(option);\n      console.log('Selected option:', option);\n      console.log('Is correct:', isCorrect);\n      this.store.dispatch(QuizActions.selectOption({\n        option\n      }));\n      if (isCorrect) {\n        this.state.current_score++;\n      }\n      this.selectedOptionClass = isCorrect ? 'correct-answer' : 'incorrect-answer';\n      this.correctAnswerClass = 'correct-answer';\n      this.isOptionSelected = true;\n    }\n  }\n};\nQuizComponent = __decorate([Component({\n  selector: 'quiz-app-quiz',\n  templateUrl: './quiz.component.html',\n  styleUrls: ['./quiz.component.scss']\n}), __metadata(\"design:paramtypes\", [QuizReduxService, Store])], QuizComponent);\nexport { QuizComponent };","map":{"version":3,"mappings":"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","names":["Component","QuizReduxService","Store","select","QuizActions","selectCurrentQuestionIndex","selectQuestions","selectTotalQuestions","QuizComponent","constructor","triviaService","store","totalQuestions","current_score","total_score","questions","options","currentQuestion","current_Question_Index","questions$","pipe","currentQuestionIndex$","totalQuestions$","ngOnInit","restartQuiz","dispatch","loadQuestions","logStoreState","subscribe","state","console","log","isOptionSelected","selectedOption","selectedOptionClass","correctAnswerClass","shuffleArray","array","sort","Math","random","setCurrentQuestion","index","quizText","question","nextQuestion","nextIndex","isCorrectAnswer","option","correctAnswer","selectOption","isCorrect","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/Angular apps/quiz-app/apps/quiz-redux-app/src/app/quiz/quiz.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Question, Quiz } from './quiz.interface';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport { Store, select } from '@ngrx/store';\nimport * as QuizActions from '../+state/quiz-app.actions';\nimport { quizAppReducer } from '../+state/quiz-app.reducer';\nimport { Observable } from 'rxjs';\nimport {\n  selectCurrentQuestionIndex,\n  selectQuestions,\n  selectTotalQuestions,\n} from '../+state/quiz-app.selectors';\n\n@Component({\n  selector: 'quiz-app-quiz',\n  templateUrl: './quiz.component.html',\n  styleUrls: ['./quiz.component.scss'],\n})\nexport class QuizComponent implements OnInit {\n  questions$!: Observable<Question[]>;\n  currentQuestionIndex$!: Observable<number>;\n  totalQuestions$!: Observable<number>;\n  isOptionSelected = false;\n  quizText!: string;\n  selectedOption: string | null = null;\n  selectedOptionClass: string | null = null;\n  correctAnswerClass: string | null = null;\n  state: Quiz = {\n    totalQuestions: 0,\n    current_score: 0,\n    total_score: 0,\n    questions: [],\n    options: [],\n    currentQuestion: '',\n    current_Question_Index: 0,\n  };\n\n  constructor(private triviaService: QuizReduxService, private store: Store) {\n    this.questions$ = this.store.pipe(select(selectQuestions));\n    this.currentQuestionIndex$ = this.store.pipe(\n      select(selectCurrentQuestionIndex)\n    );\n    this.totalQuestions$ = this.store.pipe(select(selectTotalQuestions));\n  }\n\n  ngOnInit(): void {\n    this.restartQuiz();\n    this.store.dispatch(QuizActions.loadQuestions());\n    this.logStoreState();\n  }\n  logStoreState() {\n    this.store.subscribe((state) => console.log('Store State:', state));\n  }\n\n  restartQuiz() {\n    // this.fetchTriviaQuestion();\n    this.state.current_score = 0;\n    this.isOptionSelected = false;\n    this.selectedOption = null;\n    this.selectedOptionClass = null;\n    this.correctAnswerClass = null;\n  }\n  shuffleArray(array: string[]): string[] {\n    return array.sort(() => Math.random() - 0.6);\n  }\n\n  // fetchTriviaQuestion() {\n  //   this.triviaService.getTriviaQuestion().subscribe((triviaResponse: any) => {\n  //     if (triviaResponse) {\n  //       const questions: Question[] = triviaResponse.map(\n  //         (questionItem: any) => ({\n  //           question: questionItem.question.text,\n  //           options: this.shuffleArray([\n  //             ...questionItem.incorrectAnswers,\n  //             questionItem.correctAnswer,\n  //           ]),\n  //           correctAnswer: questionItem.correctAnswer,\n  //         })\n  //       );\n\n  //       // Dispatch the loadQuestionsSuccess action with the correct payload\n  //       this.store.dispatch(QuizActions.loadQuestionsSuccess({ questions }));\n\n  //       this.state.totalQuestions = triviaResponse.length;\n  //       this.state.total_score = triviaResponse.length;\n  //       this.state.questions = questions;\n\n  //       this.setCurrentQuestion(0);\n  //     } else {\n  //       console.error('Invalid response structure');\n  //     }\n  //   });\n  // }\n\n  setCurrentQuestion(index: number) {\n    this.quizText = 'Redux Angular Quiz';\n    this.state.current_Question_Index = index;\n    this.state.currentQuestion = this.state.questions[index].question;\n    this.state.options = this.state.questions[index].options;\n  }\n\n  nextQuestion() {\n    const nextIndex = this.state.current_Question_Index + 1;\n\n    // Dispatch the nextQuestion action\n    this.store.dispatch(QuizActions.nextQuestion());\n    this.setCurrentQuestion(nextIndex);\n\n    // reset styling\n    this.selectedOption = null;\n    this.selectedOptionClass = null;\n    this.correctAnswerClass = null;\n    this.isOptionSelected = false;\n  }\n  isCorrectAnswer(option: string): boolean {\n    const correctAnswer =\n      this.state.questions[this.state.current_Question_Index].correctAnswer;\n    return correctAnswer === option;\n  }\n\n  // Function to handle option selection\n  selectOption(option: string) {\n    if (!this.selectedOption) {\n      this.selectedOption = option;\n      const isCorrect = this.isCorrectAnswer(option);\n\n      console.log('Selected option:', option);\n      console.log('Is correct:', isCorrect);\n      this.store.dispatch(QuizActions.selectOption({ option }));\n      if (isCorrect) {\n        this.state.current_score++;\n      }\n\n      this.selectedOptionClass = isCorrect\n        ? 'correct-answer'\n        : 'incorrect-answer';\n      this.correctAnswerClass = 'correct-answer';\n      this.isOptionSelected = true;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}