{"ast":null,"code":"import { createEffect, Actions, ofType, concatLatestFrom } from '@ngrx/effects';\nimport { catchError, of, map, mergeMap, tap, switchMap, interval, takeUntil } from 'rxjs';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport { Store } from '@ngrx/store';\nimport { selectTotalQuestions } from './quiz-app.selectors';\nimport { Router } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../quiz-redux.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@ngrx/store\";\nexport class QuizAppEffects {\n  constructor(actions$, quizService, router, store) {\n    this.actions$ = actions$;\n    this.quizService = quizService;\n    this.router = router;\n    this.store = store;\n    this.startTimer$ = createEffect(() => this.actions$.pipe(ofType(QuizApiActions.loadQuestionsSuccess), concatLatestFrom(() => {\n      this.totalQuestions$.subscribe(totalQuestions => {\n        this.totalQuestions = totalQuestions;\n        this.timerDuration = this.calculateTimerDuration();\n        this.startTimer();\n      });\n      return this.store.select(selectTotalQuestions);\n    }), switchMap(totalQuestions => {\n      // const totalQuestions = action.formValue.numberOfQuestions;\n      const timerDuration = totalQuestions.length * 10;\n      console.log('Timer started');\n      return interval(1000).pipe(takeUntil(this.actions$.pipe(ofType(QuizActions.finishQuiz))), map(timeElapsed => timerDuration - timeElapsed), tap(remainingTime => {\n        if (remainingTime === 0) {\n          this.store.dispatch(QuizActions.finishQuiz());\n        }\n        const minutes = Math.floor(remainingTime / 60);\n        const seconds = remainingTime % 60;\n        const formattedMinutes = minutes < 10 ? '0' + minutes : '' + minutes;\n        const formattedSeconds = seconds < 10 ? '0' + seconds : '' + seconds;\n        console.log('Time remaining:', `${formattedMinutes}:${formattedSeconds}`);\n        this.store.dispatch(QuizActions.updateTimer({\n          timer: `${formattedMinutes}:${formattedSeconds}`\n        }));\n      }));\n    })), {\n      dispatch: false\n    });\n    this.loadTrivia$ = createEffect(() => this.actions$.pipe(ofType(QuizActions.submitForm), switchMap(action => this.quizService.getTrivia(action.formValue).pipe(tap(() => {\n      console.log('Form submitted successfully');\n      this.router.navigate(['/quizstart']);\n    }), switchMap(quizQuestions => [QuizApiActions.loadQuestionsSuccess({\n      quizQuestions\n    }), QuizActions.startTimer()]), catchError(error => {\n      console.error('Error in loadTrivia effect:', error);\n      return of(QuizApiActions.loadQuestionsFailure({\n        error\n      }));\n    })))));\n    this.loadCategories$ = createEffect(() => this.actions$.pipe(ofType(QuizActions.loadCategories), mergeMap(() => this.quizService.getCategories().pipe(map(categories => QuizApiActions.loadCategoriesSuccess({\n      categories\n    })), catchError(error => of(QuizApiActions.loadCategoriesFailure({\n      error\n    })))))));\n    this.finishQuiz$ = createEffect(() => this.actions$.pipe(ofType(QuizActions.finishQuiz), tap(() => {\n      this.router.navigate(['/result']);\n    })), {\n      dispatch: false\n    });\n  }\n  static #_ = this.ɵfac = function QuizAppEffects_Factory(t) {\n    return new (t || QuizAppEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.QuizReduxService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.Store));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuizAppEffects,\n    factory: QuizAppEffects.ɵfac\n  });\n}","map":{"version":3,"mappings":"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","names":["createEffect","Actions","ofType","concatLatestFrom","catchError","of","map","mergeMap","tap","switchMap","interval","takeUntil","QuizActions","QuizApiActions","QuizReduxService","Store","selectTotalQuestions","Router","QuizAppEffects","constructor","actions$","quizService","router","store","pipe","loadQuestionsSuccess","totalQuestions$","subscribe","totalQuestions","timerDuration","calculateTimerDuration","startTimer","select","length","console","log","finishQuiz","timeElapsed","remainingTime","dispatch","minutes","Math","floor","seconds","formattedMinutes","formattedSeconds","updateTimer","timer","submitForm","action","getTrivia","formValue","navigate","quizQuestions","error","loadQuestionsFailure","loadCategories","getCategories","categories","loadCategoriesSuccess","loadCategoriesFailure","factory"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/+state/quiz-app.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { createEffect, Actions, ofType, concatLatestFrom } from '@ngrx/effects';\nimport {\n  catchError,\n  of,\n  map,\n  mergeMap,\n  tap,\n  switchMap,\n  interval,\n  takeUntil,\n  EMPTY,\n  take,\n} from 'rxjs';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport { Store } from '@ngrx/store';\nimport { selectTotalQuestions } from './quiz-app.selectors';\nimport { Router } from '@angular/router';\n\n@Injectable()\nexport class QuizAppEffects {\n  constructor(\n    private actions$: Actions,\n    private quizService: QuizReduxService,\n    private router: Router,\n    private store: Store\n  ) {}\n\n  startTimer$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(QuizApiActions.loadQuestionsSuccess),\n        concatLatestFrom(() => {\n          this.totalQuestions$.subscribe((totalQuestions: number) => {\n            this.totalQuestions = totalQuestions;\n            this.timerDuration = this.calculateTimerDuration();\n            this.startTimer();\n          });\n          return this.store.select(selectTotalQuestions);\n        }),\n        switchMap((totalQuestions: any) => {\n          // const totalQuestions = action.formValue.numberOfQuestions;\n          const timerDuration = totalQuestions.length * 10;\n\n          console.log('Timer started');\n          return interval(1000).pipe(\n            takeUntil(this.actions$.pipe(ofType(QuizActions.finishQuiz))),\n            map((timeElapsed) => timerDuration - timeElapsed),\n            tap((remainingTime) => {\n              if (remainingTime === 0) {\n                this.store.dispatch(QuizActions.finishQuiz());\n              }\n              const minutes = Math.floor(remainingTime / 60);\n              const seconds = remainingTime % 60;\n              const formattedMinutes =\n                minutes < 10 ? '0' + minutes : '' + minutes;\n              const formattedSeconds =\n                seconds < 10 ? '0' + seconds : '' + seconds;\n              console.log(\n                'Time remaining:',\n                `${formattedMinutes}:${formattedSeconds}`\n              );\n              this.store.dispatch(\n                QuizActions.updateTimer({\n                  timer: `${formattedMinutes}:${formattedSeconds}`,\n                })\n              );\n            })\n          );\n        })\n      ),\n    { dispatch: false }\n  );\n\n  loadTrivia$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(QuizActions.submitForm),\n      switchMap((action) =>\n        this.quizService.getTrivia(action.formValue).pipe(\n          tap(() => {\n            console.log('Form submitted successfully');\n            this.router.navigate(['/quizstart']);\n          }),\n          switchMap((quizQuestions) => [\n            QuizApiActions.loadQuestionsSuccess({ quizQuestions }),\n            QuizActions.startTimer(),\n          ]),\n          catchError((error) => {\n            console.error('Error in loadTrivia effect:', error);\n            return of(QuizApiActions.loadQuestionsFailure({ error }));\n          })\n        )\n      )\n    )\n  );\n\n  loadCategories$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(QuizActions.loadCategories),\n      mergeMap(() =>\n        this.quizService.getCategories().pipe(\n          map((categories) =>\n            QuizApiActions.loadCategoriesSuccess({ categories })\n          ),\n          catchError((error) =>\n            of(QuizApiActions.loadCategoriesFailure({ error }))\n          )\n        )\n      )\n    )\n  );\n  finishQuiz$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(QuizActions.finishQuiz),\n        tap(() => {\n          this.router.navigate(['/result']);\n        })\n      ),\n    { dispatch: false }\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}