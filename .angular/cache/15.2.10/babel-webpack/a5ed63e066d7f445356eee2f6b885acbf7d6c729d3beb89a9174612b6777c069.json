{"ast":null,"code":"import { createEffect, Actions, ofType } from '@ngrx/effects';\nimport { catchError, of, map, mergeMap, tap, switchMap, takeUntil } from 'rxjs';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport { Store } from '@ngrx/store';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../quiz-redux.service\";\nimport * as i3 from \"@ngrx/store\";\nexport class QuizAppEffects {\n  constructor(actions$, quizService, store) {\n    this.actions$ = actions$;\n    this.quizService = quizService;\n    this.store = store;\n    this.startTimer$ = createEffect(() => this.actions$.pipe(ofType(QuizApiActions.loadQuestionsSuccess), map(action => ({\n      totalQuestions: action.quizQuestions\n    })), switchMap(({\n      totalQuestions\n    }) => timer(500, 1000).pipe(takeUntil(this.actions$.pipe(ofType(QuizActions.finishQuiz, QuizActions.restartQuiz))), map(() => {\n      const timer = totalQuestions * 10 * 1000; // Milliseconds\n      return QuizActions.startQuizTimer({\n        timeLeft: timer\n      });\n    })))));\n    this.loadTrivia$ = createEffect(() => this.actions$.pipe(ofType(QuizActions.submitForm), mergeMap(action => this.quizService.getTrivia(action.formValue).pipe(tap(data => {\n      console.log('Service Data:', data);\n    }), map(quizQuestions => QuizApiActions.loadQuestionsSuccess({\n      quizQuestions\n    })), catchError(error => {\n      console.error('Error in loadTodos effect:', error);\n      return of(QuizApiActions.loadQuestionsFailure({\n        error\n      }));\n    })))));\n    this.loadCategories$ = createEffect(() => this.actions$.pipe(ofType(QuizActions.loadCategories), mergeMap(() => this.quizService.getCategories().pipe(map(categories => QuizApiActions.loadCategoriesSuccess({\n      categories\n    })), catchError(error => of(QuizApiActions.loadCategoriesFailure({\n      error\n    })))))));\n  }\n  calculateTimerDuration() {\n    console.log('timer');\n  }\n  static #_ = this.ɵfac = function QuizAppEffects_Factory(t) {\n    return new (t || QuizAppEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.QuizReduxService), i0.ɵɵinject(i3.Store));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuizAppEffects,\n    factory: QuizAppEffects.ɵfac\n  });\n}","map":{"version":3,"mappings":"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","names":["createEffect","Actions","ofType","catchError","of","map","mergeMap","tap","switchMap","takeUntil","QuizActions","QuizApiActions","QuizReduxService","Store","QuizAppEffects","constructor","actions$","quizService","store","pipe","loadQuestionsSuccess","action","totalQuestions","quizQuestions","timer","finishQuiz","restartQuiz","startQuizTimer","timeLeft","submitForm","getTrivia","formValue","data","console","log","error","loadQuestionsFailure","loadCategories","getCategories","categories","loadCategoriesSuccess","loadCategoriesFailure","calculateTimerDuration","factory"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/+state/quiz-app.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { createEffect, Actions, ofType } from '@ngrx/effects';\nimport {\n  catchError,\n  of,\n  map,\n  mergeMap,\n  tap,\n  switchMap,\n  interval,\n  takeUntil,\n} from 'rxjs';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport { Store } from '@ngrx/store';\n\n@Injectable()\nexport class QuizAppEffects {\n  constructor(\n    private actions$: Actions,\n    private quizService: QuizReduxService,\n    private store: Store\n  ) {}\n\n  startTimer$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(QuizApiActions.loadQuestionsSuccess),\n      map((action) => ({ totalQuestions: action.quizQuestions })),\n      switchMap(({ totalQuestions }) =>\n        timer(500, 1000).pipe(\n          takeUntil(\n            this.actions$.pipe(\n              ofType(QuizActions.finishQuiz, QuizActions.restartQuiz)\n            )\n          ),\n          map(() => {\n            const timer = totalQuestions * 10 * 1000; // Milliseconds\n\n            return QuizActions.startQuizTimer({ timeLeft: timer });\n          })\n        )\n      )\n    )\n  );\n\n  loadTrivia$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(QuizActions.submitForm),\n      mergeMap((action) =>\n        this.quizService.getTrivia(action.formValue).pipe(\n          tap((data) => {\n            console.log('Service Data:', data);\n          }),\n          map((quizQuestions) =>\n            QuizApiActions.loadQuestionsSuccess({ quizQuestions })\n          ),\n          catchError((error) => {\n            console.error('Error in loadTodos effect:', error);\n            return of(QuizApiActions.loadQuestionsFailure({ error }));\n          })\n        )\n      )\n    )\n  );\n\n  loadCategories$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(QuizActions.loadCategories),\n      mergeMap(() =>\n        this.quizService.getCategories().pipe(\n          map((categories) =>\n            QuizApiActions.loadCategoriesSuccess({ categories })\n          ),\n          catchError((error) =>\n            of(QuizApiActions.loadCategoriesFailure({ error }))\n          )\n        )\n      )\n    )\n  );\n  calculateTimerDuration() {\n    console.log('timer');\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}