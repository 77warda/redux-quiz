{"ast":null,"code":"import { createReducer, on } from '@ngrx/store';\nimport { QuizActions } from './quiz-app.actions';\nexport const QUIZ_APP_FEATURE_KEY = 'quizApp';\nexport const initialState = {\n  totalQuestions: 0,\n  current_score: 0,\n  total_score: 0,\n  questions: [],\n  options: [],\n  currentQuestion: '',\n  current_Question_Index: 0,\n  selectedOption: '',\n  isOptionSelected: false,\n  selectedOptionClass: '',\n  correctAnswerClass: ''\n};\nexport const quizAppReducer = createReducer(initialState, on(QuizActions.loadQuestionsSuccess, (state, {\n  questions\n}) => ({\n  ...state,\n  questions\n})), on(QuizActions.selectOption, (state, {\n  option\n}) => ({\n  ...state,\n  selectedOption: option,\n  isOptionSelected: true,\n  selectedOptionClass: state.questions[state.current_Question_Index].correctAnswer === option ? 'correct-answer' : 'incorrect-answer',\n  correctAnswerClass: 'correct-answer'\n})), on(QuizActions.nextQuestion, state => {\n  const nextIndex = state.current_Question_Index + 1;\n  return {\n    ...state,\n    current_Question_Index: nextIndex,\n    currentQuestion: state.questions[nextIndex]?.question,\n    options: state.questions[nextIndex]?.options\n  };\n}), on(QuizActions.skipQuestion, state => {\n  const nextIndex = state.current_Question_Index + 1;\n  return {\n    ...state,\n    current_Question_Index: nextIndex,\n    currentQuestion: state.questions[nextIndex]?.question,\n    options: state.questions[nextIndex]?.options\n  };\n}), on(QuizActions.previousQuestion, state => {\n  const newIndex = Math.max(0, state.current_Question_Index - 1);\n  return {\n    ...state,\n    current_Question_Index: newIndex\n  };\n}), on(QuizActions.updateScore, (state, {\n  score\n}) => {\n  return {\n    ...state,\n    current_score: state.current_score + score\n  };\n}), on(QuizActions.restartQuiz, () => initialState));","map":{"version":3,"mappings":"AACA,SAASA,aAAa,EAAEC,EAAE,QAAQ,aAAa;AAE/C,SAASC,WAAW,QAAQ,oBAAoB;AAIhD,OAAO,MAAMC,oBAAoB,GAAG,SAAS;AAE7C,OAAO,MAAMC,YAAY,GAAS;EAChCC,cAAc,EAAE,CAAC;EACjBC,aAAa,EAAE,CAAC;EAChBC,WAAW,EAAE,CAAC;EACdC,SAAS,EAAE,EAAE;EACbC,OAAO,EAAE,EAAE;EACXC,eAAe,EAAE,EAAE;EACnBC,sBAAsB,EAAE,CAAC;EACzBC,cAAc,EAAE,EAAE;EAClBC,gBAAgB,EAAE,KAAK;EACvBC,mBAAmB,EAAE,EAAE;EACvBC,kBAAkB,EAAE;CACrB;AAED,OAAO,MAAMC,cAAc,GAAGhB,aAAa,CACzCI,YAAY,EACZH,EAAE,CAACC,WAAW,CAACe,oBAAoB,EAAE,CAACC,KAAK,EAAE;EAAEV;AAAS,CAAE,MAAM;EAC9D,GAAGU,KAAK;EACRV;CACD,CAAC,CAAC,EAEHP,EAAE,CAACC,WAAW,CAACiB,YAAY,EAAE,CAACD,KAAK,EAAE;EAAEE;AAAM,CAAE,MAAM;EACnD,GAAGF,KAAK;EACRN,cAAc,EAAEQ,MAAM;EACtBP,gBAAgB,EAAE,IAAI;EACtBC,mBAAmB,EACjBI,KAAK,CAACV,SAAS,CAACU,KAAK,CAACP,sBAAsB,CAAC,CAACU,aAAa,KAAKD,MAAM,GAClE,gBAAgB,GAChB,kBAAkB;EACxBL,kBAAkB,EAAE;CACrB,CAAC,CAAC,EAEHd,EAAE,CAACC,WAAW,CAACoB,YAAY,EAAGJ,KAAK,IAAI;EACrC,MAAMK,SAAS,GAAGL,KAAK,CAACP,sBAAsB,GAAG,CAAC;EAElD,OAAO;IACL,GAAGO,KAAK;IACRP,sBAAsB,EAAEY,SAAS;IACjCb,eAAe,EAAEQ,KAAK,CAACV,SAAS,CAACe,SAAS,CAAC,EAAEC,QAAQ;IACrDf,OAAO,EAAES,KAAK,CAACV,SAAS,CAACe,SAAS,CAAC,EAAEd;GACtC;AACH,CAAC,CAAC,EACFR,EAAE,CAACC,WAAW,CAACuB,YAAY,EAAGP,KAAK,IAAI;EACrC,MAAMK,SAAS,GAAGL,KAAK,CAACP,sBAAsB,GAAG,CAAC;EAElD,OAAO;IACL,GAAGO,KAAK;IACRP,sBAAsB,EAAEY,SAAS;IACjCb,eAAe,EAAEQ,KAAK,CAACV,SAAS,CAACe,SAAS,CAAC,EAAEC,QAAQ;IACrDf,OAAO,EAAES,KAAK,CAACV,SAAS,CAACe,SAAS,CAAC,EAAEd;GACtC;AACH,CAAC,CAAC,EACFR,EAAE,CAACC,WAAW,CAACwB,gBAAgB,EAAGR,KAAK,IAAI;EACzC,MAAMS,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEX,KAAK,CAACP,sBAAsB,GAAG,CAAC,CAAC;EAC9D,OAAO;IAAE,GAAGO,KAAK;IAAEP,sBAAsB,EAAEgB;EAAQ,CAAE;AACvD,CAAC,CAAC,EAEF1B,EAAE,CAACC,WAAW,CAAC4B,WAAW,EAAE,CAACZ,KAAK,EAAE;EAAEa;AAAK,CAAE,KAAI;EAC/C,OAAO;IAAE,GAAGb,KAAK;IAAEZ,aAAa,EAAEY,KAAK,CAACZ,aAAa,GAAGyB;EAAK,CAAE;AACjE,CAAC,CAAC,EAEF9B,EAAE,CAACC,WAAW,CAAC8B,WAAW,EAAE,MAAM5B,YAAY,CAAC,CAChD","names":["createReducer","on","QuizActions","QUIZ_APP_FEATURE_KEY","initialState","totalQuestions","current_score","total_score","questions","options","currentQuestion","current_Question_Index","selectedOption","isOptionSelected","selectedOptionClass","correctAnswerClass","quizAppReducer","loadQuestionsSuccess","state","selectOption","option","correctAnswer","nextQuestion","nextIndex","question","skipQuestion","previousQuestion","newIndex","Math","max","updateScore","score","restartQuiz"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/+state/quiz-app.reducer.ts"],"sourcesContent":["import { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { createReducer, on } from '@ngrx/store';\n\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizAppEntity } from './quiz-app.models';\nimport { Quiz } from '../quiz/quiz.interface';\n\nexport const QUIZ_APP_FEATURE_KEY = 'quizApp';\n\nexport const initialState: Quiz = {\n  totalQuestions: 0,\n  current_score: 0,\n  total_score: 0,\n  questions: [],\n  options: [],\n  currentQuestion: '',\n  current_Question_Index: 0,\n  selectedOption: '',\n  isOptionSelected: false,\n  selectedOptionClass: '',\n  correctAnswerClass: '',\n};\n\nexport const quizAppReducer = createReducer(\n  initialState,\n  on(QuizActions.loadQuestionsSuccess, (state, { questions }) => ({\n    ...state,\n    questions,\n  })),\n\n  on(QuizActions.selectOption, (state, { option }) => ({\n    ...state,\n    selectedOption: option,\n    isOptionSelected: true,\n    selectedOptionClass:\n      state.questions[state.current_Question_Index].correctAnswer === option\n        ? 'correct-answer'\n        : 'incorrect-answer',\n    correctAnswerClass: 'correct-answer',\n  })),\n\n  on(QuizActions.nextQuestion, (state) => {\n    const nextIndex = state.current_Question_Index + 1;\n\n    return {\n      ...state,\n      current_Question_Index: nextIndex,\n      currentQuestion: state.questions[nextIndex]?.question,\n      options: state.questions[nextIndex]?.options,\n    };\n  }),\n  on(QuizActions.skipQuestion, (state) => {\n    const nextIndex = state.current_Question_Index + 1;\n\n    return {\n      ...state,\n      current_Question_Index: nextIndex,\n      currentQuestion: state.questions[nextIndex]?.question,\n      options: state.questions[nextIndex]?.options,\n    };\n  }),\n  on(QuizActions.previousQuestion, (state) => {\n    const newIndex = Math.max(0, state.current_Question_Index - 1);\n    return { ...state, current_Question_Index: newIndex };\n  }),\n\n  on(QuizActions.updateScore, (state, { score }) => {\n    return { ...state, current_score: state.current_score + score };\n  }),\n\n  on(QuizActions.restartQuiz, () => initialState)\n);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}