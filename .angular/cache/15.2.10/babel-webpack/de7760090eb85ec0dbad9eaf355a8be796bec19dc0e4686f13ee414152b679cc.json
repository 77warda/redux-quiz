{"ast":null,"code":"import { createFeatureSelector, createSelector } from '@ngrx/store';\nimport { QUIZ_APP_FEATURE_KEY } from './quiz-app.reducer';\nexport const selectQuizState = createFeatureSelector(QUIZ_APP_FEATURE_KEY);\n// Selectors for individual pieces of state\nexport const selectQuestions = createSelector(selectQuizState, state => {\n  console.log('ques in selectors', state.questions);\n  return state.questions;\n});\nexport const selectCurrentQuestionIndex = createSelector(selectQuizState, state => state.current_Question_Index);\nexport const selectTotalQuestions = createSelector(selectQuizState, state => state.questions.length);\nexport const selectCurrentQuestion = createSelector(selectQuestions, selectCurrentQuestionIndex, (questions, currentQuestionIndex) => {\n  console.log('hi', questions);\n  return {\n    ...questions[currentQuestionIndex],\n    options: questions[currentQuestionIndex]?.incorrectAnswers.concat(questions[currentQuestionIndex]?.correctAnswer).sort() || []\n  };\n});\nexport const selectCorrectAnswer = createSelector(selectCurrentQuestion, currentQuestion => currentQuestion?.correctAnswer);\nexport const selectCurrentScore = createSelector(selectQuizState, state => state.current_score);\nexport const selectSelectedOption = createSelector(selectQuizState, state => state.selectedOption);\nexport const selectUserResponses = createSelector(selectQuizState, state => state.userResponses);\nexport const selectIsOptionSelected = createSelector(selectSelectedOption, selectedOption => !!selectedOption);\n// for getting categories:\nexport const selectCategories = createSelector(selectQuizState, state => state.categories);\nexport const selectSelectedNumberOfQuestions = createSelector(selectQuizState, state => state.selectedNumberOfQuestions);\nexport const selectSelectedCategory = createSelector(selectQuizState, state => state.selectedCategory);\nexport const selectSelectedDifficulty = createSelector(selectQuizState, state => state.selectedDifficulty);\nexport const selectFilteredQuestions = createSelector(selectQuizState, selectSelectedNumberOfQuestions, selectSelectedCategory, selectSelectedDifficulty, (state, selectedNumberOfQuestions, selectedCategory, selectedDifficulty) => {\n  // Apply filtering based on selected criteria\n  const filteredQuestions = state.questions.filter(question => question.category.toLowerCase() === selectedCategory.toLowerCase() && question.difficulty.toLowerCase() === selectedDifficulty.toLowerCase());\n  console.log('selectedCategory:', selectedCategory);\n  console.log('selectedDifficulty:', selectedDifficulty);\n  console.log('Filtered Questions:', filteredQuestions);\n  return filteredQuestions.slice(0, selectedNumberOfQuestions);\n});","map":{"version":3,"mappings":"AAAA,SAASA,qBAAqB,EAAEC,cAAc,QAAQ,aAAa;AACnE,SAASC,oBAAoB,QAAQ,oBAAoB;AAGzD,OAAO,MAAMC,eAAe,GAC1BH,qBAAqB,CAAOE,oBAAoB,CAAC;AAEnD;AACA,OAAO,MAAME,eAAe,GAAGH,cAAc,CAACE,eAAe,EAAGE,KAAK,IAAI;EACvEC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEF,KAAK,CAACG,SAAS,CAAC;EACjD,OAAOH,KAAK,CAACG,SAAS;AACxB,CAAC,CAAC;AAEF,OAAO,MAAMC,0BAA0B,GAAGR,cAAc,CACtDE,eAAe,EACdE,KAAK,IAAKA,KAAK,CAACK,sBAAsB,CACxC;AAED,OAAO,MAAMC,oBAAoB,GAAGV,cAAc,CAChDE,eAAe,EACdE,KAAK,IAAKA,KAAK,CAACG,SAAS,CAACI,MAAM,CAClC;AAED,OAAO,MAAMC,qBAAqB,GAAGZ,cAAc,CACjDG,eAAe,EACfK,0BAA0B,EAC1B,CAACD,SAAS,EAAEM,oBAAoB,KAAI;EAClCR,OAAO,CAACC,GAAG,CAAC,IAAI,EAAEC,SAAS,CAAC;EAC5B,OAAO;IACL,GAAGA,SAAS,CAACM,oBAAoB,CAAC;IAClCC,OAAO,EACLP,SAAS,CAACM,oBAAoB,CAAC,EAAEE,gBAAgB,CAC9CC,MAAM,CAACT,SAAS,CAACM,oBAAoB,CAAC,EAAEI,aAAa,CAAC,CACtDC,IAAI,EAAE,IAAI;GAChB;AACH,CAAC,CACF;AAED,OAAO,MAAMC,mBAAmB,GAAGnB,cAAc,CAC/CY,qBAAqB,EACpBQ,eAAe,IAAKA,eAAe,EAAEH,aAAa,CACpD;AAED,OAAO,MAAMI,kBAAkB,GAAGrB,cAAc,CAC9CE,eAAe,EACdE,KAAK,IAAKA,KAAK,CAACkB,aAAa,CAC/B;AAED,OAAO,MAAMC,oBAAoB,GAAGvB,cAAc,CAChDE,eAAe,EACdE,KAAK,IAAKA,KAAK,CAACoB,cAAc,CAChC;AACD,OAAO,MAAMC,mBAAmB,GAAGzB,cAAc,CAC/CE,eAAe,EACdE,KAAK,IAAKA,KAAK,CAACsB,aAAa,CAC/B;AAED,OAAO,MAAMC,sBAAsB,GAAG3B,cAAc,CAClDuB,oBAAoB,EACnBC,cAAc,IAAK,CAAC,CAACA,cAAc,CACrC;AACD;AACA,OAAO,MAAMI,gBAAgB,GAAG5B,cAAc,CAC5CE,eAAe,EACdE,KAAK,IAAKA,KAAK,CAACyB,UAAU,CAC5B;AAED,OAAO,MAAMC,+BAA+B,GAAG9B,cAAc,CAC3DE,eAAe,EACdE,KAAK,IAAKA,KAAK,CAAC2B,yBAAyB,CAC3C;AAED,OAAO,MAAMC,sBAAsB,GAAGhC,cAAc,CAClDE,eAAe,EACdE,KAAK,IAAKA,KAAK,CAAC6B,gBAAgB,CAClC;AAED,OAAO,MAAMC,wBAAwB,GAAGlC,cAAc,CACpDE,eAAe,EACdE,KAAK,IAAKA,KAAK,CAAC+B,kBAAkB,CACpC;AAED,OAAO,MAAMC,uBAAuB,GAAGpC,cAAc,CACnDE,eAAe,EACf4B,+BAA+B,EAC/BE,sBAAsB,EACtBE,wBAAwB,EACxB,CAAC9B,KAAK,EAAE2B,yBAAyB,EAAEE,gBAAgB,EAAEE,kBAAkB,KAAI;EACzE;EACA,MAAME,iBAAiB,GAAGjC,KAAK,CAACG,SAAS,CAAC+B,MAAM,CAC7CC,QAAQ,IACPA,QAAQ,CAACC,QAAQ,CAACC,WAAW,EAAE,KAAKR,gBAAgB,CAACQ,WAAW,EAAE,IAClEF,QAAQ,CAACG,UAAU,CAACD,WAAW,EAAE,KAAKN,kBAAkB,CAACM,WAAW,EAAE,CACzE;EAEDpC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE2B,gBAAgB,CAAC;EAClD5B,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE6B,kBAAkB,CAAC;EACtD9B,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE+B,iBAAiB,CAAC;EACrD,OAAOA,iBAAiB,CAACM,KAAK,CAAC,CAAC,EAAEZ,yBAAyB,CAAC;AAC9D,CAAC,CACF","names":["createFeatureSelector","createSelector","QUIZ_APP_FEATURE_KEY","selectQuizState","selectQuestions","state","console","log","questions","selectCurrentQuestionIndex","current_Question_Index","selectTotalQuestions","length","selectCurrentQuestion","currentQuestionIndex","options","incorrectAnswers","concat","correctAnswer","sort","selectCorrectAnswer","currentQuestion","selectCurrentScore","current_score","selectSelectedOption","selectedOption","selectUserResponses","userResponses","selectIsOptionSelected","selectCategories","categories","selectSelectedNumberOfQuestions","selectedNumberOfQuestions","selectSelectedCategory","selectedCategory","selectSelectedDifficulty","selectedDifficulty","selectFilteredQuestions","filteredQuestions","filter","question","category","toLowerCase","difficulty","slice"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/+state/quiz-app.selectors.ts"],"sourcesContent":["import { createFeatureSelector, createSelector } from '@ngrx/store';\nimport { QUIZ_APP_FEATURE_KEY } from './quiz-app.reducer';\nimport { Quiz } from '../quiz/quiz.interface';\n\nexport const selectQuizState =\n  createFeatureSelector<Quiz>(QUIZ_APP_FEATURE_KEY);\n\n// Selectors for individual pieces of state\nexport const selectQuestions = createSelector(selectQuizState, (state) => {\n  console.log('ques in selectors', state.questions);\n  return state.questions;\n});\n\nexport const selectCurrentQuestionIndex = createSelector(\n  selectQuizState,\n  (state) => state.current_Question_Index\n);\n\nexport const selectTotalQuestions = createSelector(\n  selectQuizState,\n  (state) => state.questions.length\n);\n\nexport const selectCurrentQuestion = createSelector(\n  selectQuestions,\n  selectCurrentQuestionIndex,\n  (questions, currentQuestionIndex) => {\n    console.log('hi', questions);\n    return {\n      ...questions[currentQuestionIndex],\n      options:\n        questions[currentQuestionIndex]?.incorrectAnswers\n          .concat(questions[currentQuestionIndex]?.correctAnswer)\n          .sort() || [],\n    };\n  }\n);\n\nexport const selectCorrectAnswer = createSelector(\n  selectCurrentQuestion,\n  (currentQuestion) => currentQuestion?.correctAnswer\n);\n\nexport const selectCurrentScore = createSelector(\n  selectQuizState,\n  (state) => state.current_score\n);\n\nexport const selectSelectedOption = createSelector(\n  selectQuizState,\n  (state) => state.selectedOption\n);\nexport const selectUserResponses = createSelector(\n  selectQuizState,\n  (state) => state.userResponses\n);\n\nexport const selectIsOptionSelected = createSelector(\n  selectSelectedOption,\n  (selectedOption) => !!selectedOption\n);\n// for getting categories:\nexport const selectCategories = createSelector(\n  selectQuizState,\n  (state) => state.categories\n);\n\nexport const selectSelectedNumberOfQuestions = createSelector(\n  selectQuizState,\n  (state) => state.selectedNumberOfQuestions\n);\n\nexport const selectSelectedCategory = createSelector(\n  selectQuizState,\n  (state) => state.selectedCategory\n);\n\nexport const selectSelectedDifficulty = createSelector(\n  selectQuizState,\n  (state) => state.selectedDifficulty\n);\n\nexport const selectFilteredQuestions = createSelector(\n  selectQuizState,\n  selectSelectedNumberOfQuestions,\n  selectSelectedCategory,\n  selectSelectedDifficulty,\n  (state, selectedNumberOfQuestions, selectedCategory, selectedDifficulty) => {\n    // Apply filtering based on selected criteria\n    const filteredQuestions = state.questions.filter(\n      (question) =>\n        question.category.toLowerCase() === selectedCategory.toLowerCase() &&\n        question.difficulty.toLowerCase() === selectedDifficulty.toLowerCase()\n    );\n\n    console.log('selectedCategory:', selectedCategory);\n    console.log('selectedDifficulty:', selectedDifficulty);\n    console.log('Filtered Questions:', filteredQuestions);\n    return filteredQuestions.slice(0, selectedNumberOfQuestions);\n  }\n);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}