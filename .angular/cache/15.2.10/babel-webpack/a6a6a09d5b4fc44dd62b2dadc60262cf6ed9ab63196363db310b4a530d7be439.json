{"ast":null,"code":"import { createEffect, Actions, ofType } from '@ngrx/effects';\nimport { catchError, of, map, mergeMap, tap, switchMap } from 'rxjs';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport { Store } from '@ngrx/store';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../quiz-redux.service\";\nimport * as i3 from \"@ngrx/store\";\nexport class QuizAppEffects {\n  constructor(actions$, quizService, store) {\n    this.actions$ = actions$;\n    this.quizService = quizService;\n    this.store = store;\n    this.startTimer$ = createEffect(() => this.actions$.pipe(ofType(QuizActions.loadQuizQuestionsSuccess),\n    // Change this to match the action dispatched when questions are loaded\n    switchMap(() => {\n      const timerDuration = this.calculateTimerDuration();\n      return interval(1000).pipe(map(() => {\n        const timer = timerDuration;\n        if (timer === 0) {\n          return QuizActions.stopTimer();\n        }\n        return QuizActions.updateTimer(timer); // Action to update timer in store\n      }));\n    })));\n\n    this.loadTrivia$ = createEffect(() => this.actions$.pipe(ofType(QuizActions.submitForm), mergeMap(action => this.quizService.getTrivia(action.formValue).pipe(tap(data => {\n      console.log('Service Data:', data);\n    }), map(quizQuestions => QuizApiActions.loadQuestionsSuccess({\n      quizQuestions\n    })), catchError(error => {\n      console.error('Error in loadTodos effect:', error);\n      return of(QuizApiActions.loadQuestionsFailure({\n        error\n      }));\n    })))));\n    this.loadCategories$ = createEffect(() => this.actions$.pipe(ofType(QuizActions.loadCategories), mergeMap(() => this.quizService.getCategories().pipe(map(categories => QuizApiActions.loadCategoriesSuccess({\n      categories\n    })), catchError(error => of(QuizApiActions.loadCategoriesFailure({\n      error\n    })))))));\n  }\n  static #_ = this.ɵfac = function QuizAppEffects_Factory(t) {\n    return new (t || QuizAppEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.QuizReduxService), i0.ɵɵinject(i3.Store));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuizAppEffects,\n    factory: QuizAppEffects.ɵfac\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,OAAO,EAAEC,MAAM,QAAQ,eAAe;AAC7D,SAASC,UAAU,EAAEC,EAAE,EAAEC,GAAG,EAAEC,QAAQ,EAAEC,GAAG,EAAEC,SAAS,QAAQ,MAAM;AACpE,SAASC,WAAW,QAAQ,oBAAoB;AAChD,SAASC,cAAc,QAAQ,oBAAoB;AACnD,SAASC,gBAAgB,QAAQ,uBAAuB;AACxD,SAASC,KAAK,QAAQ,aAAa;;;;;AAGnC,OAAM,MAAOC,cAAc;EACzBC,YACUC,QAAiB,EACjBC,WAA6B,EAC7BC,KAAY;IAFZ,aAAQ,GAARF,QAAQ;IACR,gBAAW,GAAXC,WAAW;IACX,UAAK,GAALC,KAAK;IAGf,gBAAW,GAAGjB,YAAY,CAAC,MACzB,IAAI,CAACe,QAAQ,CAACG,IAAI,CAChBhB,MAAM,CAACO,WAAW,CAACU,wBAAwB,CAAC;IAAE;IAC9CX,SAAS,CAAC,MAAK;MACb,MAAMY,aAAa,GAAG,IAAI,CAACC,sBAAsB,EAAE;MACnD,OAAOC,QAAQ,CAAC,IAAI,CAAC,CAACJ,IAAI,CACxBb,GAAG,CAAC,MAAK;QACP,MAAMkB,KAAK,GAAGH,aAAa;QAC3B,IAAIG,KAAK,KAAK,CAAC,EAAE;UACf,OAAOd,WAAW,CAACe,SAAS,EAAE;;QAEhC,OAAOf,WAAW,CAACgB,WAAW,CAACF,KAAK,CAAC,CAAC,CAAC;MACzC,CAAC,CAAC,CACH;IACH,CAAC,CAAC,CACH,CACF;;IAED,gBAAW,GAAGvB,YAAY,CAAC,MACzB,IAAI,CAACe,QAAQ,CAACG,IAAI,CAChBhB,MAAM,CAACO,WAAW,CAACiB,UAAU,CAAC,EAC9BpB,QAAQ,CAAEqB,MAAM,IACd,IAAI,CAACX,WAAW,CAACY,SAAS,CAACD,MAAM,CAACE,SAAS,CAAC,CAACX,IAAI,CAC/CX,GAAG,CAAEuB,IAAI,IAAI;MACXC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,IAAI,CAAC;IACpC,CAAC,CAAC,EACFzB,GAAG,CAAE4B,aAAa,IAChBvB,cAAc,CAACwB,oBAAoB,CAAC;MAAED;IAAa,CAAE,CAAC,CACvD,EACD9B,UAAU,CAAEgC,KAAK,IAAI;MACnBJ,OAAO,CAACI,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,OAAO/B,EAAE,CAACM,cAAc,CAAC0B,oBAAoB,CAAC;QAAED;MAAK,CAAE,CAAC,CAAC;IAC3D,CAAC,CAAC,CACH,CACF,CACF,CACF;IAED,oBAAe,GAAGnC,YAAY,CAAC,MAC7B,IAAI,CAACe,QAAQ,CAACG,IAAI,CAChBhB,MAAM,CAACO,WAAW,CAAC4B,cAAc,CAAC,EAClC/B,QAAQ,CAAC,MACP,IAAI,CAACU,WAAW,CAACsB,aAAa,EAAE,CAACpB,IAAI,CACnCb,GAAG,CAAEkC,UAAU,IACb7B,cAAc,CAAC8B,qBAAqB,CAAC;MAAED;IAAU,CAAE,CAAC,CACrD,EACDpC,UAAU,CAAEgC,KAAK,IACf/B,EAAE,CAACM,cAAc,CAAC+B,qBAAqB,CAAC;MAAEN;IAAK,CAAE,CAAC,CAAC,CACpD,CACF,CACF,CACF,CACF;EAtDE;EAAC;qBALOtB,cAAc;EAAA;EAAA;WAAdA,cAAc;IAAA6B,SAAd7B,cAAc;EAAA","names":["createEffect","Actions","ofType","catchError","of","map","mergeMap","tap","switchMap","QuizActions","QuizApiActions","QuizReduxService","Store","QuizAppEffects","constructor","actions$","quizService","store","pipe","loadQuizQuestionsSuccess","timerDuration","calculateTimerDuration","interval","timer","stopTimer","updateTimer","submitForm","action","getTrivia","formValue","data","console","log","quizQuestions","loadQuestionsSuccess","error","loadQuestionsFailure","loadCategories","getCategories","categories","loadCategoriesSuccess","loadCategoriesFailure","factory"],"sourceRoot":"","sources":["/Users/macbookpro/OneSchool/rxjs/redux-quiz/apps/quiz-redux-app/src/app/+state/quiz-app.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { createEffect, Actions, ofType } from '@ngrx/effects';\nimport { catchError, of, map, mergeMap, tap, switchMap } from 'rxjs';\nimport { QuizActions } from './quiz-app.actions';\nimport { QuizApiActions } from './quiz-app.actions';\nimport { QuizReduxService } from '../quiz-redux.service';\nimport { Store } from '@ngrx/store';\n\n@Injectable()\nexport class QuizAppEffects {\n  constructor(\n    private actions$: Actions,\n    private quizService: QuizReduxService,\n    private store: Store\n  ) {}\n\n  startTimer$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(QuizActions.loadQuizQuestionsSuccess), // Change this to match the action dispatched when questions are loaded\n      switchMap(() => {\n        const timerDuration = this.calculateTimerDuration();\n        return interval(1000).pipe(\n          map(() => {\n            const timer = timerDuration;\n            if (timer === 0) {\n              return QuizActions.stopTimer();\n            }\n            return QuizActions.updateTimer(timer); // Action to update timer in store\n          })\n        );\n      })\n    )\n  );\n\n  loadTrivia$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(QuizActions.submitForm),\n      mergeMap((action) =>\n        this.quizService.getTrivia(action.formValue).pipe(\n          tap((data) => {\n            console.log('Service Data:', data);\n          }),\n          map((quizQuestions) =>\n            QuizApiActions.loadQuestionsSuccess({ quizQuestions })\n          ),\n          catchError((error) => {\n            console.error('Error in loadTodos effect:', error);\n            return of(QuizApiActions.loadQuestionsFailure({ error }));\n          })\n        )\n      )\n    )\n  );\n\n  loadCategories$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(QuizActions.loadCategories),\n      mergeMap(() =>\n        this.quizService.getCategories().pipe(\n          map((categories) =>\n            QuizApiActions.loadCategoriesSuccess({ categories })\n          ),\n          catchError((error) =>\n            of(QuizApiActions.loadCategoriesFailure({ error }))\n          )\n        )\n      )\n    )\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}